<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-11-14T07:55:09+00:00</updated><id>/feed.xml</id><title type="html">blank</title><subtitle>My personal website focusing on Java EE/Jakarta EE and Spring.
</subtitle><entry><title type="html">What’s New in Jakarta Persistence 3.1 By Examples</title><link href="/blog/2022/what-s-new-in-jakarta-persistence-3-1-by-examples/" rel="alternate" type="text/html" title="What’s New in Jakarta Persistence 3.1 By Examples" /><published>2022-11-13T00:00:00+00:00</published><updated>2022-11-13T00:00:00+00:00</updated><id>/blog/2022/what-s-new-in-jakarta-persistence-3-1-by-examples</id><content type="html" xml:base="/blog/2022/what-s-new-in-jakarta-persistence-3-1-by-examples/">&lt;p&gt;Jakarta Persistence(aka JPA) 3.1 brings a collection of improvements.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The UUID class now is treated as Basic Java Type. To support UUID type ID in Entity class, JPA introduces a new UUID generator.&lt;/li&gt;&lt;li&gt;Several numeric functions and date/time specific functions are added in JPQL and type-safe Criteria API.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;More details please read &lt;a href=&quot;https://newsroom.eclipse.org/eclipse-newsletter/2022/march/what%E2%80%99s-new-jakarta-persistence-31&quot;&gt;What’s New in Jakarta Persistence 3.1&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Next let’s explore these features by writing some real example codes.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gFXKiQoL1Di8pJaVGxvxgQ.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &amp;lt;a href=”&lt;a href=&quot;https://unsplash.com/@lin_alessio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;https://unsplash.com/@lin_alessio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&lt;/a&gt;&amp;quot;&amp;gt;Alessio Lin&amp;lt;/a&amp;gt; on &amp;lt;a href=”&lt;a href=&quot;https://unsplash.com/s/photos/china-building?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;https://unsplash.com/s/photos/china-building?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&lt;/a&gt;&amp;quot;&amp;gt;Unsplash&amp;lt;/a&amp;gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Hibernate 6.1&lt;/h3&gt;&lt;p&gt;Generate a simple &lt;strong&gt;Java application&lt;/strong&gt; project via &lt;a href=&quot;https://maven.apache.org/archetypes/maven-archetype-quickstart/&quot;&gt;Maven Quickstart archetype&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;mvn archetype:generate&lt;br&gt;    -DarchetypeGroupId=org.apache.maven.archetypes&lt;br&gt;    -DarchetypeArtifactId=maven-archetype-quickstart&lt;br&gt;    -DarchetypeVersion=1.4&lt;/pre&gt;&lt;p&gt;There are some interactive steps to guide you setup the project info, such as groupId, artifact, version etc. In this example project, we use com.example as groupId, and demo as artifactId. Then confirm and begin to generate the project source codes.&lt;/p&gt;&lt;p&gt;After it is done, open the project in a Java IDE such as IntelliJ IDEA(Community Edition is free), or Eclipse Java/Java EE bundle, or NetBeans IDE, or a simple text editor, eg. VS Code.&lt;/p&gt;&lt;p&gt;Modify the &lt;em&gt;pom.xml&lt;/em&gt; in the project root folder, add Hibernate 6.1, and JUnit etc. into project dependencies, and setup Maven compiler plugin to use Java 17 to compile the source codes.&lt;/p&gt;&lt;p&gt;The final &lt;em&gt;pom.xml&lt;/em&gt; looks like the following.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;br&gt;         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;hibernate6&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;parent&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;jakartaee10-sandbox-parent&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;relativePath&amp;gt;..&amp;lt;/relativePath&amp;gt;&lt;br&gt;    &amp;lt;/parent&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;name&amp;gt;hibernate6&amp;lt;/name&amp;gt;&lt;br&gt;    &amp;lt;description&amp;gt;Jakarta EE 10 Sandbox: Hibernate 6/JPA 3.1 example&amp;lt;/description&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;maven.compiler.release&amp;gt;17&amp;lt;/maven.compiler.release&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;!-- requires 6.1.2.Final or higher --&amp;gt;&lt;br&gt;        &amp;lt;hibernate.version&amp;gt;6.1.4.Final&amp;lt;/hibernate.version&amp;gt;&lt;br&gt;        &amp;lt;h2.version&amp;gt;2.1.214&amp;lt;/h2.version&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;!-- test deps --&amp;gt;&lt;br&gt;        &amp;lt;junit-jupiter.version&amp;gt;5.9.1&amp;lt;/junit-jupiter.version&amp;gt;&lt;br&gt;        &amp;lt;assertj-core.version&amp;gt;3.23.1&amp;lt;/assertj-core.version&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;slf4j.version&amp;gt;2.0.3&amp;lt;/slf4j.version&amp;gt;&lt;br&gt;        &amp;lt;logback.version&amp;gt;1.4.4&amp;lt;/logback.version&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.hibernate.orm&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;jakarta.persistence&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.persistence-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;!-- H2 Database --&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${h2.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;!-- logging with logback --&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jcl-over-slf4j&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;logback-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${logback.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${logback.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;!-- test dependencies --&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${junit-jupiter.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.assertj&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;assertj-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${assertj-core.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.hibernate.orm&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;hibernate-testing&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;            &amp;lt;exclusions&amp;gt;&lt;br&gt;                &amp;lt;exclusion&amp;gt;&lt;br&gt;                    &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;br&gt;                    &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;/exclusion&amp;gt;&lt;br&gt;            &amp;lt;/exclusions&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;3.10.1&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;3.0.0-M7&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;NOTE: To share common resources for all feature-based projects, create a parent POM to centralize the common configurations in one place, check &lt;a href=&quot;https://github.com/hantsy/jakartaee10-sandbox/blob/master/pom.xml&quot;&gt;the parent pom.xml file&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In this example project, we use H2 embedded database for test purpose. Hibernate 6.1 implements the features of Jakarta Persistence 3.1, but it includes a Jakarta Persistence 3.0 API in the transitive dependency tree.&lt;/p&gt;&lt;p&gt;To use Jakarta Persistence 3.1 API, we have to add jakarta.persistence:jakarta.persistence-api 3.1 explicitly.&lt;/p&gt;&lt;p&gt;In the &lt;em&gt;src/main/resources/META-INF&lt;/em&gt;, add a new file named &lt;em&gt;persistence.xml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;persistence xmlns=&amp;quot;https://jakarta.ee/xml/ns/persistence&amp;quot;&lt;br&gt;             xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;             xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_1.xsd&amp;quot;&lt;br&gt;             version=&amp;quot;3.1&amp;quot;&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;persistence-unit name=&amp;quot;defaultPU&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;description&amp;gt;Hibernate test case template Persistence Unit&amp;lt;/description&amp;gt;&lt;br&gt;        &amp;lt;provider&amp;gt;org.hibernate.jpa.HibernatePersistenceProvider&amp;lt;/provider&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;exclude-unlisted-classes&amp;gt;false&amp;lt;/exclude-unlisted-classes&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;properties&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.archive.autodetection&amp;quot; value=&amp;quot;class, hbm&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot; value=&amp;quot;org.hibernate.dialect.H2Dialect&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.connection.driver_class&amp;quot; value=&amp;quot;org.h2.Driver&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.connection.url&amp;quot; value=&amp;quot;jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.connection.username&amp;quot; value=&amp;quot;sa&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;property name=&amp;quot;hibernate.connection.pool_size&amp;quot; value=&amp;quot;5&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.hbm2ddl.auto&amp;quot; value=&amp;quot;create-drop&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;property name=&amp;quot;hibernate.max_fetch_depth&amp;quot; value=&amp;quot;5&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;property name=&amp;quot;hibernate.cache.region_prefix&amp;quot; value=&amp;quot;hibernate.test&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.cache.region.factory_class&amp;quot;&lt;br&gt;                      value=&amp;quot;org.hibernate.testing.cache.CachingRegionFactory&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!--NOTE: hibernate.jdbc.batch_versioned_data should be set to false when testing with Oracle--&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.jdbc.batch_versioned_data&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;property name=&amp;quot;jakarta.persistence.validation.mode&amp;quot; value=&amp;quot;NONE&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.service.allow_crawling&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.session.events.log&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;        &amp;lt;/properties&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;/persistence-unit&amp;gt;&lt;br&gt;&amp;lt;/persistence&amp;gt;&lt;/pre&gt;&lt;p&gt;We use logback as the logging framework in this project. In the &lt;em&gt;src/main/resources&lt;/em&gt;, add a &lt;em&gt;logback.xml&lt;/em&gt; to configure logback.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;configuration&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;property name=&amp;quot;LOGS&amp;quot; value=&amp;quot;./logs&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;appender name=&amp;quot;Console&amp;quot;&lt;br&gt;              class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;layout class=&amp;quot;ch.qos.logback.classic.PatternLayout&amp;quot;&amp;gt;&lt;br&gt;            &amp;lt;Pattern&amp;gt;&lt;br&gt;                %green(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable&lt;br&gt;            &amp;lt;/Pattern&amp;gt;&lt;br&gt;        &amp;lt;/layout&amp;gt;&lt;br&gt;    &amp;lt;/appender&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;appender name=&amp;quot;RollingFile&amp;quot;&lt;br&gt;              class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;file&amp;gt;${LOGS}/app.log&amp;lt;/file&amp;gt;&lt;br&gt;        &amp;lt;encoder&lt;br&gt;                class=&amp;quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&amp;quot;&amp;gt;&lt;br&gt;            &amp;lt;Pattern&amp;gt;%d %p %C{1.} [%t] %m%n&amp;lt;/Pattern&amp;gt;&lt;br&gt;        &amp;lt;/encoder&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;rollingPolicy&lt;br&gt;                class=&amp;quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;quot;&amp;gt;&lt;br&gt;            &amp;lt;!-- rollover daily and when the file reaches 10 MegaBytes --&amp;gt;&lt;br&gt;            &amp;lt;fileNamePattern&amp;gt;${LOGS}/archived/app-%d{yyyy-MM-dd}.%i.log&lt;br&gt;            &amp;lt;/fileNamePattern&amp;gt;&lt;br&gt;            &amp;lt;timeBasedFileNamingAndTriggeringPolicy&lt;br&gt;                    class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&amp;quot;&amp;gt;&lt;br&gt;                &amp;lt;maxFileSize&amp;gt;10MB&amp;lt;/maxFileSize&amp;gt;&lt;br&gt;            &amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt;&lt;br&gt;        &amp;lt;/rollingPolicy&amp;gt;&lt;br&gt;    &amp;lt;/appender&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;!-- LOG everything at INFO level --&amp;gt;&lt;br&gt;    &amp;lt;root level=&amp;quot;info&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;appender-ref ref=&amp;quot;RollingFile&amp;quot;/&amp;gt;&lt;br&gt;        &amp;lt;appender-ref ref=&amp;quot;Console&amp;quot;/&amp;gt;&lt;br&gt;    &amp;lt;/root&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;!-- Debug hibernate SQL,  see: &lt;a href=&quot;https://thorben-janssen.com/hibernate-logging-guide/&quot;&gt;https://thorben-janssen.com/hibernate-logging-guide/&lt;/a&gt; --&amp;gt;&lt;br&gt;    &amp;lt;logger name=&amp;quot;org.hibernate.SQL&amp;quot; level=&amp;quot;DEBUG&amp;quot;/&amp;gt;&lt;br&gt;    &amp;lt;logger name=&amp;quot;org.hibernate.type.descriptor.sql&amp;quot; level=&amp;quot;trace&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;!-- Custom debug level for the application code --&amp;gt;&lt;br&gt;    &amp;lt;logger name=&amp;quot;com.example&amp;quot; level=&amp;quot;debug&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;appender-ref ref=&amp;quot;RollingFile&amp;quot;/&amp;gt;&lt;br&gt;        &amp;lt;appender-ref ref=&amp;quot;Console&amp;quot;/&amp;gt;&lt;br&gt;    &amp;lt;/logger&amp;gt;&lt;br&gt;&amp;lt;/configuration&amp;gt;&lt;/pre&gt;&lt;p&gt;We set org.hibernate.SQL logging level to DEBUG and org.hibernate.type.descriptor.sql to trace, it will help you to dig into the Hibernate generated sql at runtime.&lt;/p&gt;&lt;h3&gt;UUID Basic Type Support&lt;/h3&gt;&lt;p&gt;JPA 3.1 allows to use UUID as basic Java type, especially it add a UUID ID generator.&lt;/p&gt;&lt;p&gt;Create a simple Entity.&lt;/p&gt;&lt;pre&gt;@Entity&lt;br&gt;public class Person {&lt;br&gt;    @Id&lt;br&gt;    @Column(name = &amp;quot;id&amp;quot;, nullable = false)&lt;br&gt;    @GeneratedValue(strategy = GenerationType.UUID)&lt;br&gt;    private UUID id;&lt;br&gt;    private String name;&lt;br&gt;    private int age = 30;&lt;/pre&gt;&lt;pre&gt;    public Person() {&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Person(String name, int age) {&lt;br&gt;        assert age &amp;gt; 0;&lt;br&gt;        this.name = name;&lt;br&gt;        this.age = age;&lt;br&gt;        this.birthDate = LocalDateTime.now().minusYears(this.age);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    // getters and setters&lt;br&gt;    // override equals and hashCode&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;An entity class is annotated with an @Entity, optionally you can specify the entity name and add table definition with an extra @Table annotation.&lt;/p&gt;&lt;p&gt;Here we defined a UUID type ID, and use a UUID generation strategy.&lt;/p&gt;&lt;p&gt;JPA requires an Entity should includes a no-arguments constructor, if you declare another constructor with a few arguments, you should declare this no-arguments constructor explicitly.&lt;/p&gt;&lt;p&gt;Create a simple JUnit test to verify if the UUID type working as expected.&lt;/p&gt;&lt;pre&gt;class PersonUUIDTest {&lt;br&gt;    private static final Logger log = LoggerFactory.getLogger(PersonUUIDTest.class);&lt;/pre&gt;&lt;pre&gt;    private EntityManagerFactory entityManagerFactory;&lt;/pre&gt;&lt;pre&gt;    @BeforeEach&lt;br&gt;    void setUp() {&lt;br&gt;        entityManagerFactory = Persistence.createEntityManagerFactory(&amp;quot;defaultPU&amp;quot;);&lt;br&gt;        var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;        entityManager.getTransaction().begin();&lt;br&gt;        var deleteFromPerson = entityManager.createQuery(&amp;quot;DELETE FROM Person&amp;quot;).executeUpdate();&lt;br&gt;        log.debug(&amp;quot;Deleted {} persons&amp;quot;, deleteFromPerson);&lt;br&gt;        entityManager.getTransaction().commit();&lt;br&gt;        entityManager.close();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;insert person and verify person&amp;quot;)&lt;br&gt;    public void testInsertAndFindPerson() throws Exception {&lt;br&gt;        var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;        var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;        entityManager.getTransaction().begin();&lt;br&gt;        entityManager.persist(person);&lt;br&gt;        entityManager.getTransaction().commit();&lt;br&gt;        var id = person.getId();&lt;br&gt;        assertNotNull(id);&lt;/pre&gt;&lt;pre&gt;        try {&lt;br&gt;            var foundPerson = entityManager.find(Person.class, id);&lt;br&gt;            assertThat(foundPerson.getId()).isNotNull();&lt;br&gt;            assertThat(foundPerson.getName()).isEqualTo(&amp;quot;John&amp;quot;);&lt;br&gt;            assertThat(foundPerson.getAge()).isEqualTo(30);&lt;br&gt;        } catch (Exception ex) {&lt;br&gt;            ex.printStackTrace();&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @AfterEach&lt;br&gt;    void tearDown() {&lt;br&gt;        entityManagerFactory.close();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In the @BeforeEach method, we will create an EntityManagerFactory instance. And in the @AfterEach we call the EntityManagerFactory.close to release the resource.&lt;/p&gt;&lt;p&gt;In the @BeforeEach we try to clean up the Person data.&lt;/p&gt;&lt;p&gt;Now in the testInsertAndFindPerson test, we insert a new person, then utilize entityManager.find to find the inserted person.&lt;/p&gt;&lt;p&gt;The person id is annotated with @ID and @GeneratedValue, when inserting a person into table, hibernate will generate an ID automatically. After it is persisted, the returned instance is filled with the generated id, it should not be a null.&lt;/p&gt;&lt;h3&gt;Numeric Functions&lt;/h3&gt;&lt;p&gt;JPA 3.1 adds a collection of new numeric functions in literal JPQL query and type-safe Criteria Builder API.&lt;/p&gt;&lt;p&gt;Add some extra properties in the above Person class.&lt;/p&gt;&lt;pre&gt;public class Person{&lt;br&gt;    private Integer yearsWorked = 2;&lt;br&gt;    private LocalDateTime birthDate = LocalDateTime.now().minusYears(30);&lt;br&gt;    private BigDecimal salary = new BigDecimal(&amp;quot;12345.678&amp;quot;);&lt;br&gt;    private BigDecimal hourlyRate = new BigDecimal(&amp;quot;34.56&amp;quot;);&lt;/pre&gt;&lt;pre&gt;    // setters and getters&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Create a new test to verify the new numeric functions: ceiling, floor, round, exp, ln, power, sign.&lt;/p&gt;&lt;pre&gt;@Test&lt;br&gt;@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;)&lt;br&gt;public void testNumericFunctions() throws Exception {&lt;br&gt;    var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;    var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;    entityManager.getTransaction().begin();&lt;br&gt;    entityManager.persist(person);&lt;br&gt;    entityManager.getTransaction().commit();&lt;br&gt;    var id = person.getId();&lt;br&gt;    assertNotNull(id);&lt;/pre&gt;&lt;pre&gt;    try {&lt;br&gt;        var queryString = &amp;quot;&amp;quot;&amp;quot;&lt;br&gt;                SELECT p.name as name,&lt;br&gt;                CEILING(p.salary) as ceiling,&lt;br&gt;                FLOOR(p.salary) as floor,&lt;br&gt;                ROUND(p.salary, 1) as round,&lt;br&gt;                EXP(p.yearsWorked) as exp,&lt;br&gt;                LN(p.yearsWorked) as ln,&lt;br&gt;                POWER(p.yearsWorked,2) as power,&lt;br&gt;                SIGN(p.yearsWorked) as sign&lt;br&gt;                FROM Person p&lt;br&gt;                WHERE p.id=:id&lt;br&gt;                &amp;quot;&amp;quot;&amp;quot;;&lt;br&gt;        var query = entityManager.createQuery(queryString);&lt;br&gt;        query.setParameter(&amp;quot;id&amp;quot;, id);&lt;br&gt;        var resultList = query.getResultList();&lt;br&gt;        log.debug(&amp;quot;Result list: {}&amp;quot;, resultList);&lt;br&gt;        resultList.forEach(result -&amp;gt; log.debug(&amp;quot;result: {}&amp;quot;, result));&lt;br&gt;    } catch (Exception ex) {&lt;br&gt;        ex.printStackTrace();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Next, let’s have a look at how to use them in the Criteria APIs.&lt;/p&gt;&lt;pre&gt;@Test&lt;br&gt;@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;)&lt;br&gt;public void testNumericFunctions() throws Exception {&lt;br&gt;    var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;    var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;    entityManager.getTransaction().begin();&lt;br&gt;    entityManager.persist(person);&lt;br&gt;    entityManager.getTransaction().commit();&lt;br&gt;    var id = person.getId();&lt;br&gt;    assertNotNull(id);&lt;/pre&gt;&lt;pre&gt;    try {&lt;br&gt;        // see: &lt;a href=&quot;https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user/topic/New.20functions.20in.20JPA.203.2E1/near/289429903&quot;&gt;https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user/topic/New.20functions.20in.20JPA.203.2E1/near/289429903&lt;/a&gt;&lt;br&gt;        var cb = (HibernateCriteriaBuilder) entityManager.getCriteriaBuilder();&lt;br&gt;        var query = cb.createTupleQuery();&lt;br&gt;        var root = query.from(Person.class);&lt;/pre&gt;&lt;pre&gt;        query.multiselect(root.get(&amp;quot;name&amp;quot;),&lt;br&gt;                cb.ceiling(root.get(&amp;quot;salary&amp;quot;)),&lt;br&gt;                cb.floor(root.get(&amp;quot;salary&amp;quot;)),&lt;br&gt;                cb.round(root.get(&amp;quot;salary&amp;quot;), 1),&lt;br&gt;                cb.exp(root.get(&amp;quot;yearsWorked&amp;quot;)),&lt;br&gt;                cb.ln(root.get(&amp;quot;yearsWorked&amp;quot;)),&lt;br&gt;                // see: &lt;a href=&quot;https://hibernate.atlassian.net/browse/HHH-15395&quot;&gt;https://hibernate.atlassian.net/browse/HHH-15395&lt;/a&gt;&lt;br&gt;                cb.power(root.get(&amp;quot;yearsWorked&amp;quot;), 2),&lt;br&gt;                cb.sign(root.get(&amp;quot;yearsWorked&amp;quot;))&lt;br&gt;        );&lt;br&gt;        query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id));&lt;br&gt;        var resultList = entityManager.createQuery(query).getResultList();&lt;br&gt;        log.debug(&amp;quot;Result list: {}&amp;quot;, resultList);&lt;/pre&gt;&lt;pre&gt;        resultList.forEach(result -&amp;gt;&lt;br&gt;                log.debug(&lt;br&gt;                        &amp;quot;result: ({},{},{},{},{},{},{},{})&amp;quot;,&lt;br&gt;                        result.get(0, String.class),&lt;br&gt;                        result.get(1, BigDecimal.class),&lt;br&gt;                        result.get(2, BigDecimal.class),&lt;br&gt;                        result.get(3, BigDecimal.class),&lt;br&gt;                        result.get(4, Double.class),&lt;br&gt;                        result.get(5, Double.class),&lt;br&gt;                        result.get(6, Double.class),&lt;br&gt;                        result.get(7, Integer.class)&lt;br&gt;                )&lt;br&gt;        );&lt;br&gt;    } catch (Exception ex) {&lt;br&gt;        fail(ex);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Note, when using Hibernate 6.1, we have to cast CriteriaBuilder to HibernateCriteriaBuilder to experience the new numeric functions. Hibernate 6.2 will align to JPA 3.1 and fix the issue.&lt;/p&gt;&lt;h3&gt;DateTime Functions&lt;/h3&gt;&lt;p&gt;JPA 3.1 add a series of datetime functions and ease the usage of Java 8 DateTime APIs.&lt;/p&gt;&lt;pre&gt;@Test&lt;br&gt;@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test datetime functions&amp;quot;)&lt;br&gt;public void testDateTimeFunctions() throws Exception {&lt;br&gt;    var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;    var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;    entityManager.getTransaction().begin();&lt;br&gt;    entityManager.persist(person);&lt;br&gt;    entityManager.getTransaction().commit();&lt;br&gt;    var id = person.getId();&lt;br&gt;    assertNotNull(id);&lt;/pre&gt;&lt;pre&gt;    try {&lt;br&gt;        var queryString = &amp;quot;&amp;quot;&amp;quot;&lt;br&gt;                SELECT p.name as name,&lt;br&gt;                LOCAL TIME as localTime,&lt;br&gt;                LOCAL DATETIME as localDateTime,&lt;br&gt;                LOCAL DATE as localDate&lt;br&gt;                FROM Person p&lt;br&gt;                &amp;quot;&amp;quot;&amp;quot;;&lt;/pre&gt;&lt;pre&gt;        var query = entityManager.createQuery(queryString);&lt;br&gt;        var resultList = query.getResultList();&lt;br&gt;        log.debug(&amp;quot;Result list: {}&amp;quot;, resultList);&lt;br&gt;        resultList.forEach(result -&amp;gt; log.debug(&amp;quot;result: {}&amp;quot;, result));&lt;br&gt;    } catch (Exception ex) {&lt;br&gt;        ex.printStackTrace();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The LOCAL TIME, LOCAL DATETIME, LOCAL DATE query result will be treated as Java 8 LocalTime, LocalDateTime, LocalDate directly.&lt;/p&gt;&lt;p&gt;Let’s have a look at the usage in the CriteriaBuilder APIs.&lt;/p&gt;&lt;pre&gt;@Test&lt;br&gt;@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test datetime functions&amp;quot;)&lt;br&gt;public void testDateTimeFunctions() throws Exception {&lt;br&gt;    var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;    var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;    entityManager.getTransaction().begin();&lt;br&gt;    entityManager.persist(person);&lt;br&gt;    entityManager.getTransaction().commit();&lt;br&gt;    var id = person.getId();&lt;br&gt;    assertNotNull(id);&lt;/pre&gt;&lt;pre&gt;    try {&lt;br&gt;        var cb = (HibernateCriteriaBuilder) entityManager.getCriteriaBuilder();&lt;br&gt;        var query = cb.createTupleQuery();&lt;br&gt;        var root = query.from(Person.class);&lt;/pre&gt;&lt;pre&gt;        query.multiselect(root.get(&amp;quot;name&amp;quot;),&lt;br&gt;                cb.localTime(),&lt;br&gt;                cb.localDateTime(),&lt;br&gt;                cb.localDate()&lt;br&gt;        );&lt;br&gt;        query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id));&lt;/pre&gt;&lt;pre&gt;        var resultList = entityManager.createQuery(query).getResultList();&lt;br&gt;        log.debug(&amp;quot;Result list: {}&amp;quot;, resultList);&lt;br&gt;        resultList.forEach(result -&amp;gt;&lt;br&gt;                log.debug(&lt;br&gt;                        &amp;quot;result: ({},{},{},{})&amp;quot;,&lt;br&gt;                        result.get(0, String.class),&lt;br&gt;                        result.get(1, LocalTime.class),&lt;br&gt;                        result.get(2, LocalDateTime.class),&lt;br&gt;                        result.get(3, LocalDate.class)&lt;br&gt;                )&lt;br&gt;        );&lt;br&gt;    } catch (Exception ex) {&lt;br&gt;        fail(ex);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;EXTRACT function&lt;/h3&gt;&lt;p&gt;JPA 3.1 introduces a extract function to decode fragments from a datetime value.&lt;/p&gt;&lt;pre&gt;@Test&lt;br&gt;@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test `EXTRACT` functions&amp;quot;)&lt;br&gt;public void testExtractFunctions() throws Exception {&lt;br&gt;    var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;    var entityManager = entityManagerFactory.createEntityManager();&lt;br&gt;    entityManager.getTransaction().begin();&lt;br&gt;    entityManager.persist(person);&lt;br&gt;    entityManager.getTransaction().commit();&lt;br&gt;    var id = person.getId();&lt;br&gt;    assertNotNull(id);&lt;/pre&gt;&lt;pre&gt;    try {&lt;br&gt;        var queryString = &amp;quot;&amp;quot;&amp;quot;&lt;br&gt;                SELECT p.name as name,&lt;br&gt;                EXTRACT(YEAR FROM p.birthDate) as year,&lt;br&gt;                EXTRACT(QUARTER FROM p.birthDate) as quarter,&lt;br&gt;                EXTRACT(MONTH FROM p.birthDate) as month,&lt;br&gt;                EXTRACT(WEEK FROM p.birthDate) as week,&lt;br&gt;                EXTRACT(DAY FROM p.birthDate) as day,&lt;br&gt;                EXTRACT(HOUR FROM p.birthDate) as hour,&lt;br&gt;                EXTRACT(MINUTE FROM p.birthDate) as minute,&lt;br&gt;                EXTRACT(SECOND FROM p.birthDate) as second&lt;br&gt;                FROM Person p&lt;br&gt;                &amp;quot;&amp;quot;&amp;quot;;&lt;br&gt;        var query = entityManager.createQuery(queryString);&lt;/pre&gt;&lt;pre&gt;        var resultList = query.getResultList();&lt;br&gt;        log.debug(&amp;quot;Result list: {}&amp;quot;, resultList);&lt;br&gt;        resultList.forEach(result -&amp;gt; log.debug(&amp;quot;result: {}&amp;quot;, result));&lt;br&gt;    } catch (Exception ex) {&lt;br&gt;        ex.printStackTrace();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Use the new extract function, we can read the year, quarter, month, week, day, hour, minute, second values from a Java 8 DateTime type property in the JPQL query.&lt;/p&gt;&lt;p&gt;Note, there is no mapped extract function in the CriteriaBuilder APIs, for more details, check issue: &lt;a href=&quot;https://github.com/jakartaee/persistence/pull/356&quot;&gt;jakartaee/persistence#356&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;JakartaEE Runtime&lt;/h3&gt;&lt;p&gt;Next let’s go to the Jakarta EE 10 compatible products to experience the new features of JPA 3.1.&lt;/p&gt;&lt;p&gt;Firstly we will prepare a Jakarta EE 10 web application.&lt;/p&gt;&lt;p&gt;Simply generate a web application skeleton via &lt;a href=&quot;https://maven.apache.org/archetypes/maven-archetype-webapp/&quot;&gt;Maven Webapp Archetype&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;mvn archetype:generate&lt;br&gt;    -DarchetypeGroupId=org.apache.maven.archetypes&lt;br&gt;    -DarchetypeArtifactId=maven-archetype-webapp&lt;br&gt;    -DarchetypeVersion=1.4&lt;/pre&gt;&lt;p&gt;Then add Jakarta EE 10 dependency into the project pom.xml. Let’s have a look at the modified pom.xml.&lt;/p&gt;&lt;pre&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jpa-examples&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;br&gt;    &amp;lt;parent&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;jakartaee10-sandbox-parent&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;relativePath&amp;gt;..&amp;lt;/relativePath&amp;gt;&lt;br&gt;    &amp;lt;/parent&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;name&amp;gt;jpa-examples&amp;lt;/name&amp;gt;&lt;br&gt;    &amp;lt;description&amp;gt;Jakarta EE 10 Sandbox: Persistence 3.1 Examples&amp;lt;/description&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;jakarta.platform&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.jakartaee-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.persistence&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;org.eclipse.persistence.jpa.modelgen.processor&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian.junit5&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-junit5-container&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;!-- see: &lt;a href=&quot;https://github.com/arquillian/arquillian-core/issues/248&quot;&gt;https://github.com/arquillian/arquillian-core/issues/248&lt;/a&gt; --&amp;gt;&lt;br&gt;        &amp;lt;!-- and &lt;a href=&quot;https://github.com/arquillian/arquillian-core/pull/246/files&quot;&gt;https://github.com/arquillian/arquillian-core/pull/246/files&lt;/a&gt; --&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian.protocol&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-protocol-servlet-jakarta&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;&amp;lt;/project&amp;gt;&lt;/pre&gt;&lt;p&gt;In the above pom.xml, we also add JUnit 5 and &lt;a href=&quot;https://arquillian.org&quot;&gt;Arquillian&lt;/a&gt; related dependencies in test scope. Through the container specific Aquillian adapter, we can run the tests in Jakarta EE application servers.&lt;/p&gt;&lt;p&gt;In this project, we reuse the the Person entity we have introduced in the Hibernate section.&lt;/p&gt;&lt;p&gt;Now let’s move to persistence configuration. Create a &lt;em&gt;persistence.xml&lt;/em&gt; in the &lt;em&gt;src/main/resources/META-INFO&lt;/em&gt; folder.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;persistence version=&amp;quot;3.0&amp;quot; xmlns=&amp;quot;https://jakarta.ee/xml/ns/persistence&amp;quot;&lt;br&gt;             xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;             xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;persistence-unit name=&amp;quot;defaultPU&amp;quot; transaction-type=&amp;quot;JTA&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;jta-data-source&amp;gt;java:comp/DefaultDataSource&amp;lt;/jta-data-source&amp;gt;&lt;br&gt;        &amp;lt;exclude-unlisted-classes&amp;gt;false&amp;lt;/exclude-unlisted-classes&amp;gt;&lt;br&gt;        &amp;lt;properties&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;jakarta.persistence.schema-generation.database.action&amp;quot; value=&amp;quot;drop-and-create&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- for  Glassfish/Payara/EclipseLink --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;eclipselink.logging.level.sql&amp;quot; value=&amp;quot;FINE&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;eclipselink.logging.level&amp;quot; value=&amp;quot;FINE&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;eclipselink.logging.parameters&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- for WildFly/Hibernate --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;        &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;/persistence-unit&amp;gt;&lt;br&gt;&amp;lt;/persistence&amp;gt;&lt;/pre&gt;&lt;p&gt;The configuration is a little different from the one we introduced in the Hibernate section.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;In a container environment, we would like choose JTA as transaction-type.&lt;/li&gt;&lt;li&gt;We do not setup database connection info, instead we configure a built-in DataSource. The java:comp/DefaultDataSource is the default DataSource for all Jakarta EE compatible products.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Creating Jakarta EE Sample Application&lt;/h3&gt;&lt;p&gt;To interact with our backend database, we will create a simple complete JAXRS application, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A EJB @Stateless bean to read data from database&lt;/li&gt;&lt;li&gt;And expose data via a simple JAXRS resource&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;OK, let’s create class PersonRepository which is annotated with @Stateless. In this class, inject a EntityManager bean with an annotation @PersistenceContext, and add a new method getAllResource to execute a JPQL query to retrieve all persons.&lt;/p&gt;&lt;pre&gt;@Stateless&lt;br&gt;public class PersonRepository {&lt;/pre&gt;&lt;pre&gt;    @PersistenceContext&lt;br&gt;    EntityManager entityManager;&lt;/pre&gt;&lt;pre&gt;    public List&amp;lt;Person&amp;gt; getAllPersons() {&lt;br&gt;        return entityManager.createQuery(&amp;quot;select p from Person p&amp;quot;, Person.class)&lt;br&gt;                .getResultList();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Next, create a PersonResource to expose persons to client.&lt;/p&gt;&lt;pre&gt;@RequestScoped&lt;br&gt;@Path(&amp;quot;/persons&amp;quot;)&lt;br&gt;public class PersonResource {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    PersonRepository personRepository;&lt;/pre&gt;&lt;pre&gt;    @Path(&amp;quot;&amp;quot;)&lt;br&gt;    @GET&lt;br&gt;    @Produces(MediaType.APPLICATION_JSON)&lt;br&gt;    public Response allPersons() {&lt;br&gt;        var data = personRepository.getAllPersons();&lt;br&gt;        return Response.ok(data).build();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The PersonResource is annotated with RequestScoped, it is a CDI bean, the @Path on the class define the root path of all subresources in this class. The allPersons will produces all persons to client in JSON format when HTTP Client request matches HTTP GET method, and URI is /persons and HTTP Header Accept is compatible with application/json.&lt;/p&gt;&lt;p&gt;To activate JAXRS feature, create a class to extend the JAXRS Application, add @ApplicationPath to specify the root context path of all JAXRS resources.&lt;/p&gt;&lt;pre&gt;@ApplicationPath(&amp;quot;/rest&amp;quot;)&lt;br&gt;public class RestActivator extends Application {&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Let’s create a bean to add some sample data at the application startup.&lt;/p&gt;&lt;pre&gt;@Startup&lt;br&gt;@Singleton&lt;br&gt;public class DataInitializer {&lt;/pre&gt;&lt;pre&gt;    @PersistenceContext&lt;br&gt;    EntityManager entityManager;&lt;/pre&gt;&lt;pre&gt;    @PostConstruct&lt;br&gt;    public void init() {&lt;br&gt;        List&lt;br&gt;                .of(&lt;br&gt;                        new Person(&amp;quot;Jack&amp;quot;, 20),&lt;br&gt;                        new Person(&amp;quot;Rose&amp;quot;, 18)&lt;br&gt;                )&lt;br&gt;                .forEach(entityManager::persist);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Deploying to Jakarta EE Containers&lt;/h3&gt;&lt;p&gt;Build and package the application into a war archive. Open a terminal, switch to the project root folder, and execute the following command.&lt;/p&gt;&lt;pre&gt;mvn clean package -DskipTests -D&amp;quot;maven.test.skip=true&amp;quot;&lt;/pre&gt;&lt;p&gt;When it is done, there is war package is ready in the path &lt;em&gt;target/jpa-examples.war&lt;/em&gt;.&lt;/p&gt;&lt;h4&gt;GlassFish 7.0&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;Download the &lt;a href=&quot;https://github.com/eclipse-ee4j/glassfish/releases&quot;&gt;latest GlassFish 7.0&lt;/a&gt;, extract files to a location, eg. D:\glassfish7, mark as &lt;em&gt;GlassFish_install&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;To start GlassFish and Derby, open a terminal, enter &lt;em&gt;GlassFish_install/bin&lt;/em&gt;, run asadmin start-database and asadmin start-domain domain1.&lt;/li&gt;&lt;li&gt;Copy the above war package to &lt;em&gt;Glassfish_install/glassfish/domains/domain1/autodeploy&lt;/em&gt; folder.&lt;/li&gt;&lt;li&gt;Open &lt;em&gt;GlassFish_install/glassfish/domains/domain1/logs/server.log&lt;/em&gt;, and wait the deployment is completed.&lt;/li&gt;&lt;li&gt;Open another terminal window, execute curl http://localhost:8080/jpa-examples/rest/persons. You will the following response in the console.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;[{“age”:18,”birthDate”:”2004–11–06T14:54:05.4504678&amp;quot;,”gender”:”MALE”,”hourlyRate”:34.56,”id”:”d8552d71-ff7f-4650-b5a0-ce1c5fb3fe0b”,”name”:”Rose”,”salary”:12345.678,”yearsWorked”:2},{“age”:20,”birthDate”:”2002–11–06T14:54:05.4504678&amp;quot;,”gender”:”MALE”,”hourlyRate”:34.56,”id”:”cdf94cdc-21b3–492c-b1b5–06bc8cae9947&amp;quot;,”name”:”Jack”,”salary”:12345.678,”yearsWorked”:2}]&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;To stop GlassFish and Derby, run asadmin stop-database and asadmin stop-domain domain1&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;WildFly Preview 27&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;Download the latest &lt;a href=&quot;https://wildfly.org&quot;&gt;WildFly Preview&lt;/a&gt;, extract files to a location, eg. D:\wildfly-preview-27.0.0.Beta1, mark as &lt;em&gt;WildFly_install&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;Open a terminal, enter &lt;em&gt;WildFly_install/bin&lt;/em&gt;, run standalone to start WildFly with the default standalone profile configuration.&lt;/li&gt;&lt;li&gt;Copy the built war to &lt;em&gt;WildFly_install/standalone/deployments&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;Wait the deployment progress is done, you can use the curl in GlassFish section to verify the application.&lt;/li&gt;&lt;li&gt;Send a CTLR+C keys combination in the original WildFly startup console to stop WildFly.&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Deploying Application via Maven Plugin&lt;/h3&gt;&lt;h4&gt;Deploying to GlassFish via Cargo Plugin&lt;/h4&gt;&lt;p&gt;The GlassFish project does not include an official Maven plugin to manage GlassFish server. There is a Maven plugin named cargo-maven3-plugin which can be used to manage all popular Jakarta EE application servers and web servers.&lt;/p&gt;&lt;p&gt;Add the following profile section to use cargo plugin to manage the lifecycle of GlassFish server.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;glassfish&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;activation&amp;gt;&lt;br&gt;        &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;&lt;br&gt;    &amp;lt;/activation&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;cargo.zipUrlInstaller.downloadDir&amp;gt;${project.basedir}/../installs&amp;lt;/cargo.zipUrlInstaller.downloadDir&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.codehaus.cargo&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;cargo-maven3-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;container&amp;gt;&lt;br&gt;                        &amp;lt;containerId&amp;gt;glassfish7x&amp;lt;/containerId&amp;gt;&lt;br&gt;                        &amp;lt;!-- &amp;lt;artifactInstaller&amp;gt;&lt;br&gt;                            &amp;lt;groupId&amp;gt;org.glassfish.main.distributions&amp;lt;/groupId&amp;gt;&lt;br&gt;                            &amp;lt;artifactId&amp;gt;glassfish&amp;lt;/artifactId&amp;gt;&lt;br&gt;                            &amp;lt;version&amp;gt;${glassfish.version}&amp;lt;/version&amp;gt;&lt;br&gt;                        &amp;lt;/artifactInstaller&amp;gt; --&amp;gt;&lt;br&gt;                        &amp;lt;zipUrlInstaller&amp;gt;&lt;br&gt;                            &amp;lt;url&amp;gt;https://github.com/eclipse-ee4j/glassfish/releases/download/${glassfish.version}/glassfish-${glassfish.version}.zip&amp;lt;/url&amp;gt;&lt;br&gt;                            &amp;lt;downloadDir&amp;gt;${cargo.zipUrlInstaller.downloadDir}&amp;lt;/downloadDir&amp;gt;&lt;br&gt;                        &amp;lt;/zipUrlInstaller&amp;gt;&lt;br&gt;                    &amp;lt;/container&amp;gt;&lt;br&gt;                    &amp;lt;configuration&amp;gt;&lt;br&gt;                        &amp;lt;!-- the configuration used to deploy --&amp;gt;&lt;br&gt;                        &amp;lt;home&amp;gt;${project.build.directory}/glassfish7x-home&amp;lt;/home&amp;gt;&lt;br&gt;                        &amp;lt;properties&amp;gt;&lt;br&gt;                            &amp;lt;cargo.remote.password&amp;gt;&amp;lt;/cargo.remote.password&amp;gt;&lt;br&gt;                            &amp;lt;cargo.glassfish.removeDefaultDatasource&amp;gt;true&amp;lt;/cargo.glassfish.removeDefaultDatasource&amp;gt;&lt;br&gt;                        &amp;lt;/properties&amp;gt;&lt;br&gt;                        &amp;lt;datasources&amp;gt;&lt;br&gt;                            &amp;lt;datasource&amp;gt;&lt;br&gt;                                &amp;lt;driverClass&amp;gt;org.apache.derby.jdbc.EmbeddedDriver&amp;lt;/driverClass&amp;gt;&lt;br&gt;                                &amp;lt;url&amp;gt;jdbc:derby:derbyDB;create=true&amp;lt;/url&amp;gt;&lt;br&gt;                                &amp;lt;jndiName&amp;gt;jdbc/__default&amp;lt;/jndiName&amp;gt;&lt;br&gt;                                &amp;lt;username&amp;gt;APP&amp;lt;/username&amp;gt;&lt;br&gt;                                &amp;lt;password&amp;gt;nonemptypassword&amp;lt;/password&amp;gt;&lt;br&gt;                            &amp;lt;/datasource&amp;gt;&lt;br&gt;                        &amp;lt;/datasources&amp;gt;&lt;br&gt;                    &amp;lt;/configuration&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;Unlike the approach in NetBeans IDE or Eclipse IDE with GlassFish Pack, where starting GlassFish it will start the built-in Derby at the same time. Cargo does not start the built-in Derby as expected, to use the default DataSource in our project, clear the default DataSource and add a new default DataSource based on the embedded Derby.&lt;/p&gt;&lt;p&gt;Run the following command. It will compile the project source codes and package the application into a war archive, then start the managed GlassFish server(with a new cargo-domain), and then deploy the package into this running server.&lt;/p&gt;&lt;pre&gt;mvn clean package cargo:run -DskipTests -Dmaven.test.skip=true&lt;/pre&gt;&lt;p&gt;Note, when you run this command at the first time, it will spend some time to download a copy of the GlassFish redistribution, and extract the files into the build folder.&lt;/p&gt;&lt;p&gt;In another terminal window, execute curl http://localhost:8080/jpa-examples/rest/persons to verify the endpoint.&lt;/p&gt;&lt;p&gt;To stop the server, just send a CTRL+C in the original GlassFish running console.&lt;/p&gt;&lt;h4&gt;Deploying to WildFly via WildFly Plugin&lt;/h4&gt;&lt;p&gt;The WildFly project itself provides an official WildFly Maven plugin, we will configure it in a new Maven profile.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Cargo maven plugin also supports WildFly, check &lt;/em&gt;&lt;a href=&quot;https://codehaus-cargo.github.io/cargo/WildFly+27.x.html&quot;&gt;&lt;em&gt;Cargo WildFly docs&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/blockquote&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;wildfly&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;!-- Wildfly server --&amp;gt;&lt;br&gt;        &amp;lt;wildfly.artifactId&amp;gt;wildfly-preview-dist&amp;lt;/wildfly.artifactId&amp;gt;&lt;br&gt;        &amp;lt;jboss-as.home&amp;gt;${project.build.directory}/wildfly-preview-${wildfly.version}&amp;lt;/jboss-as.home&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- unpack a copy of WildFly--&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;${maven-dependency-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;                &amp;lt;executions&amp;gt;&lt;br&gt;                    &amp;lt;execution&amp;gt;&lt;br&gt;                        &amp;lt;id&amp;gt;unpack&amp;lt;/id&amp;gt;&lt;br&gt;                        &amp;lt;phase&amp;gt;process-classes&amp;lt;/phase&amp;gt;&lt;br&gt;                        &amp;lt;goals&amp;gt;&lt;br&gt;                            &amp;lt;goal&amp;gt;unpack&amp;lt;/goal&amp;gt;&lt;br&gt;                        &amp;lt;/goals&amp;gt;&lt;br&gt;                        &amp;lt;configuration&amp;gt;&lt;br&gt;                            &amp;lt;artifactItems&amp;gt;&lt;br&gt;                                &amp;lt;artifactItem&amp;gt;&lt;br&gt;                                    &amp;lt;groupId&amp;gt;org.wildfly&amp;lt;/groupId&amp;gt;&lt;br&gt;                                    &amp;lt;artifactId&amp;gt;${wildfly.artifactId}&amp;lt;/artifactId&amp;gt;&lt;br&gt;                                    &amp;lt;version&amp;gt;${wildfly.version}&amp;lt;/version&amp;gt;&lt;br&gt;                                    &amp;lt;type&amp;gt;zip&amp;lt;/type&amp;gt;&lt;br&gt;                                    &amp;lt;overWrite&amp;gt;false&amp;lt;/overWrite&amp;gt;&lt;br&gt;                                    &amp;lt;outputDirectory&amp;gt;${project.build.directory}&amp;lt;/outputDirectory&amp;gt;&lt;br&gt;                                &amp;lt;/artifactItem&amp;gt;&lt;br&gt;                            &amp;lt;/artifactItems&amp;gt;&lt;br&gt;                        &amp;lt;/configuration&amp;gt;&lt;br&gt;                    &amp;lt;/execution&amp;gt;&lt;br&gt;                &amp;lt;/executions&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- The WildFly plugin deploys your war to a local running WildFly container --&amp;gt;&lt;br&gt;            &amp;lt;!-- To use, run: mvn package wildfly:deploy --&amp;gt;&lt;br&gt;            &amp;lt;!-- For Jakarta EE 9, use `wildfly-preview-dist` as artifactId instead to start and deploy applications--&amp;gt;&lt;br&gt;            &amp;lt;!-- Run: mvn clean wildfly:run -PWildfly -Dwildfly.artifactId=wildfly-preview-dist -Dwildfly.version=22.0.0.Alpha1 --&amp;gt;&lt;br&gt;            &amp;lt;!-- or set the `jboss-as.home` to run: mvn clean wildfly:run -PWildfly -Djboss-as.home=D:\appsvr\wildfly-preview-22.0.0.Alpha1--&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.wildfly.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;wildfly-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;${wildfly-maven-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;    &amp;lt;repositories&amp;gt;&lt;br&gt;        &amp;lt;repository&amp;gt;&lt;br&gt;            &amp;lt;id&amp;gt;opensaml&amp;lt;/id&amp;gt;&lt;br&gt;            &amp;lt;url&amp;gt;https://build.shibboleth.net/nexus/content/repositories/releases/&amp;lt;/url&amp;gt;&lt;br&gt;        &amp;lt;/repository&amp;gt;&lt;br&gt;    &amp;lt;/repositories&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;With the WildFly plugin, we can deploy applications into an embedded WildFly, a managed WildFly server or a remote running WildFly server.&lt;/p&gt;&lt;pre&gt;mvn clean wildfly:run -Pwildfly -DskipTests -Dmaven.test.skip=true&lt;/pre&gt;&lt;p&gt;By default, if we do not setup a jboss-as.home or remote host connection info, it will bootstrap an embedded WildFly and run the application with the embedded server.&lt;/p&gt;&lt;p&gt;Here we configure Maven dependency plugin to download a copy of WildFly, extract the files to the project build directory, and setup a jboss-as.home property, the value is the WildFly location. The WildFly plugin will manage the whole WildFly lifecycle - start the WildFly server, deploy applications into the running server, (use CTRL+C hotkey) stop the server.&lt;/p&gt;&lt;h3&gt;Testing JPA Features&lt;/h3&gt;&lt;p&gt;Here I assume you are familiar with &lt;a href=&quot;https://www.junit.org&quot;&gt;JUnit&lt;/a&gt; and &lt;a href=&quot;https://arquillian.org&quot;&gt;Arquillian&lt;/a&gt; before.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;For the developers new to Arqullian framework, please read the official &lt;/em&gt;&lt;a href=&quot;https://arquillian.org/guides&quot;&gt;&lt;em&gt;Arquillian Guides&lt;/em&gt;&lt;/a&gt;&lt;em&gt; to start your first step. Note, these tutorials are available in several languages, including Simplified Chinese.&lt;/em&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;em&gt;Go to my &lt;/em&gt;&lt;a href=&quot;https://github.com/hantsy/jakartaee8-starter-boilerplate&quot;&gt;&lt;em&gt;Jakarta EE 8 starter boilerplate project&lt;/em&gt;&lt;/a&gt;&lt;em&gt; and &lt;/em&gt;&lt;a href=&quot;https://github.com/hantsy/jakartaee9-starter-boilerplate&quot;&gt;&lt;em&gt;Jakarta EE 9 starter boilerplate project&lt;/em&gt;&lt;/a&gt;&lt;em&gt; to update your Arquilian knowledge.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Since Jakarta EE 9, it uses the new jakarta namespace, Arquillian 1.7.0.x starts to support these changes.&lt;/p&gt;&lt;p&gt;In the next steps, we will configure a managed GlassFish Arquillian Adapter to run the testing codes.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;arq-glassfish-managed&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;skip.unit.tests&amp;gt;true&amp;lt;/skip.unit.tests&amp;gt;&lt;br&gt;        &amp;lt;skip.integration.tests&amp;gt;false&amp;lt;/skip.integration.tests&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;!-- Jersey --&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jersey-media-sse&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jersey-media-json-binding&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish.jersey.inject&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jersey-hk2&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jersey-client&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;com.github.hantsy.arquillian-container-glassfish-jakarta&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-glassfish-managed-jakarta&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${arquillian-glassfish-jakarta.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;testResources&amp;gt;&lt;br&gt;            &amp;lt;testResource&amp;gt;&lt;br&gt;                &amp;lt;directory&amp;gt;src/test/resources&amp;lt;/directory&amp;gt;&lt;br&gt;            &amp;lt;/testResource&amp;gt;&lt;br&gt;            &amp;lt;testResource&amp;gt;&lt;br&gt;                &amp;lt;directory&amp;gt;src/test/arq-glassfish-managed&amp;lt;/directory&amp;gt;&lt;br&gt;            &amp;lt;/testResource&amp;gt;&lt;br&gt;        &amp;lt;/testResources&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;${maven-dependency-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;                &amp;lt;executions&amp;gt;&lt;br&gt;                    &amp;lt;execution&amp;gt;&lt;br&gt;                        &amp;lt;id&amp;gt;unpack&amp;lt;/id&amp;gt;&lt;br&gt;                        &amp;lt;phase&amp;gt;pre-integration-test&amp;lt;/phase&amp;gt;&lt;br&gt;                        &amp;lt;goals&amp;gt;&lt;br&gt;                            &amp;lt;goal&amp;gt;unpack&amp;lt;/goal&amp;gt;&lt;br&gt;                        &amp;lt;/goals&amp;gt;&lt;br&gt;                        &amp;lt;configuration&amp;gt;&lt;br&gt;                            &amp;lt;artifactItems&amp;gt;&lt;br&gt;                                &amp;lt;artifactItem&amp;gt;&lt;br&gt;                                    &amp;lt;groupId&amp;gt;org.glassfish.main.distributions&amp;lt;/groupId&amp;gt;&lt;br&gt;                                    &amp;lt;artifactId&amp;gt;glassfish&amp;lt;/artifactId&amp;gt;&lt;br&gt;                                    &amp;lt;version&amp;gt;${glassfish.version}&amp;lt;/version&amp;gt;&lt;br&gt;                                    &amp;lt;type&amp;gt;zip&amp;lt;/type&amp;gt;&lt;br&gt;                                    &amp;lt;overWrite&amp;gt;false&amp;lt;/overWrite&amp;gt;&lt;br&gt;                                    &amp;lt;outputDirectory&amp;gt;${project.build.directory}&amp;lt;/outputDirectory&amp;gt;&lt;br&gt;                                &amp;lt;/artifactItem&amp;gt;&lt;br&gt;                            &amp;lt;/artifactItems&amp;gt;&lt;br&gt;                        &amp;lt;/configuration&amp;gt;&lt;br&gt;                    &amp;lt;/execution&amp;gt;&lt;br&gt;                &amp;lt;/executions&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;${maven-failsafe-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;environmentVariables&amp;gt;&lt;br&gt;                        &amp;lt;GLASSFISH_HOME&amp;gt;${project.build.directory}/glassfish7&amp;lt;/GLASSFISH_HOME&amp;gt;&lt;br&gt;                    &amp;lt;/environmentVariables&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;In the above configuration, we add com.github.hantsy.arquillian-container-glassfish-jakarta:arquillian-glassfish-managed-jakarta, which is my &lt;a href=&quot;https://github.com/hantsy/arquillian-container-glassfish-jakarta&quot;&gt;fork&lt;/a&gt; of the official &lt;a href=&quot;https://github.com/arquillian/arquillian-container-glassfish6&quot;&gt;Arquillian Container GlassFish project&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We preapre a copy of the latest GlassFish 7.0 in the pre-integration-test phase. The Arquillian tests will be exectued in the integretion-test phase.&lt;/p&gt;&lt;p&gt;Let’s create a simple Arquillian tests to verify the UUID basic type feature in JPA 3.1.&lt;/p&gt;&lt;pre&gt;@ExtendWith(ArquillianExtension.class)&lt;br&gt;public class UUIDStrategyTest {&lt;/pre&gt;&lt;pre&gt;    private final static Logger LOGGER = Logger.getLogger(UUIDStrategyTest.class.getName());&lt;/pre&gt;&lt;pre&gt;    @Deployment&lt;br&gt;    public static WebArchive createDeployment() {&lt;br&gt;        return ShrinkWrap.create(WebArchive.class)&lt;br&gt;                .addClasses(Person.class, Gender.class)&lt;br&gt;                .addAsResource(&amp;quot;test-persistence.xml&amp;quot;, &amp;quot;META-INF/persistence.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @PersistenceContext&lt;br&gt;    private EntityManager em;&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    UserTransaction ux;&lt;/pre&gt;&lt;pre&gt;    @BeforeEach&lt;br&gt;    public void before() throws Exception {&lt;br&gt;        startTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void startTx() throws Exception {&lt;br&gt;        ux.begin();&lt;br&gt;        em.joinTransaction();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @AfterEach&lt;br&gt;    public void after() throws Exception {&lt;br&gt;        endTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void endTx() throws Exception {&lt;br&gt;        try {&lt;br&gt;            if( ux.getStatus() == Status.STATUS_ACTIVE ) {&lt;br&gt;                ux.commit();&lt;br&gt;            }&lt;br&gt;        } catch (Exception e) {&lt;br&gt;            ux.rollback();&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    public void testPersistingPersons() throws Exception {&lt;br&gt;        final Person person = new Person();&lt;br&gt;        person.setName(&amp;quot;Hantsy Bai&amp;quot;);&lt;br&gt;        em.persist(person);&lt;br&gt;        endTx();&lt;/pre&gt;&lt;pre&gt;        startTx();&lt;br&gt;        final Person foundPerson = em.find(Person.class, person.getId());&lt;br&gt;        assertNotNull(foundPerson.getId());&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;Found person: {0}&amp;quot;, foundPerson);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The @ExtendWith(ArquillianExtension.class) annotation on a test class to support Arquillian test lifecycle.&lt;/p&gt;&lt;p&gt;The @Deployment annotated static method defines the resources that will be packaged into the test archive and deployed into the manged GlassFish server. It is easy to use shrinkwrap to create a fine-grined deploymen unit.&lt;/p&gt;&lt;p&gt;You can inject EntityManager and UserTransaction beans in an Arquillian test like what you do in a simple CDI bean.&lt;/p&gt;&lt;p&gt;In this test class, we setup @BeforeEach and @AfterEach hooks to start a transacation and end the transaction.&lt;/p&gt;&lt;p&gt;The test method testPersistingPersons looks no difference from a plain JUnit test. Firstly we persist a person entity, and commit the transaction to ensure it will be flushed into the database as expected. Then exectuing a simple JPA query to verify the persisted data.&lt;/p&gt;&lt;p&gt;Execute the following command to run the tests.&lt;/p&gt;&lt;pre&gt;mvn clean verify -Parq-glassfish-managed&lt;/pre&gt;&lt;p&gt;Similiarly, create a test to verify the new numeric functions and datetime functions in Jakarta rumtimes.&lt;/p&gt;&lt;pre&gt;@ExtendWith(ArquillianExtension.class)&lt;br&gt;public class JPQLFunctionsTest {&lt;/pre&gt;&lt;pre&gt;    private final static Logger LOGGER = Logger.getLogger(JPQLFunctionsTest.class.getName());&lt;/pre&gt;&lt;pre&gt;    @Deployment&lt;br&gt;    public static WebArchive createDeployment() {&lt;br&gt;        return ShrinkWrap.create(WebArchive.class)&lt;br&gt;                .addClasses(Person.class, Gender.class)&lt;br&gt;                .addAsResource(&amp;quot;test-persistence.xml&amp;quot;, &amp;quot;META-INF/persistence.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @PersistenceContext&lt;br&gt;    private EntityManager em;&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    UserTransaction ux;&lt;/pre&gt;&lt;pre&gt;    @BeforeEach&lt;br&gt;    public void before() throws Exception {&lt;br&gt;        clearPersons();&lt;br&gt;        startTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void clearPersons() throws Exception {&lt;br&gt;        startTx();&lt;br&gt;        var builder = em.getCriteriaBuilder();&lt;br&gt;        var deletePersonQuery = builder.createCriteriaDelete(Person.class);&lt;br&gt;        var deletedPersons = em.createQuery(deletePersonQuery).executeUpdate();&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;Deleted {0} persons&amp;quot;, deletedPersons);&lt;br&gt;        endTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void startTx() throws Exception {&lt;br&gt;        ux.begin();&lt;br&gt;        em.joinTransaction();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @AfterEach&lt;br&gt;    public void after() throws Exception {&lt;br&gt;        endTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void endTx() throws Exception {&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;Transaction status: {0}&amp;quot;, ux.getStatus());&lt;br&gt;        try {&lt;br&gt;            if (ux.getStatus() == Status.STATUS_ACTIVE) {&lt;br&gt;                ux.commit();&lt;br&gt;            }&lt;br&gt;        } catch (Exception e) {&lt;br&gt;            ux.rollback();&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;)&lt;br&gt;    public void testNumericFunctions() throws Exception {&lt;br&gt;        var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;        em.persist(person);&lt;br&gt;        var id = person.getId();&lt;br&gt;        assertNotNull(id);&lt;br&gt;        endTx();&lt;/pre&gt;&lt;pre&gt;        startTx();&lt;br&gt;        try {&lt;br&gt;            var queryString = &amp;quot;&amp;quot;&amp;quot;&lt;br&gt;                    SELECT p.name,&lt;br&gt;                    CEILING(p.salary),&lt;br&gt;                    FLOOR(p.salary),&lt;br&gt;                    ROUND(p.salary, 1),&lt;br&gt;                    EXP(p.yearsWorked),&lt;br&gt;                    LN(p.yearsWorked),&lt;br&gt;                    POWER(p.yearsWorked,2),&lt;br&gt;                    SIGN(p.yearsWorked)&lt;br&gt;                    FROM Person p&lt;br&gt;                    WHERE p.id=:id&lt;br&gt;                    &amp;quot;&amp;quot;&amp;quot;;&lt;br&gt;            var query = em.createQuery(queryString);&lt;/pre&gt;&lt;pre&gt;            query.setParameter(&amp;quot;id&amp;quot;, id);&lt;br&gt;            // for EclipseLinks&lt;br&gt;            query.setHint(QueryHints.RESULT_TYPE, ResultType.Map);&lt;br&gt;            List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; resultList = query.getResultList();&lt;br&gt;            LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size());&lt;br&gt;            resultList.forEach(data -&amp;gt; {&lt;br&gt;                data.forEach((k, v) -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;field:{0}, value: {1}&amp;quot;, new Object[]{k, v}));&lt;br&gt;            });&lt;br&gt;        } catch (Exception ex) {&lt;br&gt;            fail(ex);&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test nen datetime functions&amp;quot;)&lt;br&gt;    public void testDateTimeFunctions() throws Exception {&lt;br&gt;        var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;        em.persist(person);&lt;br&gt;        assertNotNull(person.getId());&lt;br&gt;        endTx();&lt;/pre&gt;&lt;pre&gt;        startTx();&lt;br&gt;        try {&lt;br&gt;            var queryString = &amp;quot;&amp;quot;&amp;quot;&lt;br&gt;                    SELECT p.name as name,&lt;br&gt;                    LOCAL TIME as localTime,&lt;br&gt;                    LOCAL DATETIME as localDateTime,&lt;br&gt;                    LOCAL DATE as localDate&lt;br&gt;                    FROM Person p&lt;br&gt;                    &amp;quot;&amp;quot;&amp;quot;;&lt;br&gt;            // for EclipseLinks&lt;br&gt;            var query = em.createQuery(queryString);&lt;br&gt;            // for EclipseLinks&lt;br&gt;            query.setHint(QueryHints.RESULT_TYPE, ResultType.Map);&lt;br&gt;            List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; resultList = query.getResultList();&lt;br&gt;            LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size());&lt;br&gt;            resultList.forEach(data -&amp;gt; {&lt;br&gt;                data.forEach((k, v) -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;field:{0}, value: {1}&amp;quot;, new Object[]{k, v}));&lt;br&gt;            });&lt;br&gt;        } catch (Exception ex) {&lt;br&gt;            fail(ex);&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test `EXTRACT` functions&amp;quot;)&lt;br&gt;    public void testExtractFunctions() throws Exception {&lt;br&gt;        var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;        em.persist(person);&lt;br&gt;        assertNotNull(person.getId());&lt;br&gt;        endTx();&lt;/pre&gt;&lt;pre&gt;        startTx();&lt;br&gt;        try {&lt;br&gt;            var queryString = &amp;quot;&amp;quot;&amp;quot;&lt;br&gt;                    SELECT p.name as name,&lt;br&gt;                    EXTRACT(YEAR FROM p.birthDate) as year,&lt;br&gt;                    EXTRACT(QUARTER FROM p.birthDate) as quarter,&lt;br&gt;                    EXTRACT(MONTH FROM p.birthDate) as month,&lt;br&gt;                    EXTRACT(WEEK FROM p.birthDate) as week,&lt;br&gt;                    EXTRACT(DAY FROM p.birthDate) as day,&lt;br&gt;                    EXTRACT(HOUR FROM p.birthDate) as hour,&lt;br&gt;                    EXTRACT(MINUTE FROM p.birthDate) as minute,&lt;br&gt;                    EXTRACT(SECOND FROM p.birthDate) as second&lt;br&gt;                    FROM Person p&lt;br&gt;                    &amp;quot;&amp;quot;&amp;quot;;&lt;br&gt;            var query = em.createQuery(queryString);&lt;br&gt;            // for EclipseLinks&lt;br&gt;            query.setHint(QueryHints.RESULT_TYPE, ResultType.Map);&lt;br&gt;            List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; resultList = query.getResultList();&lt;br&gt;            LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size());&lt;br&gt;            resultList.forEach(data -&amp;gt; {&lt;br&gt;                data.forEach((k, v) -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;field:{0}, value: {1}&amp;quot;, new Object[]{k, v}));&lt;br&gt;            });&lt;br&gt;        } catch (Exception ex) {&lt;br&gt;            fail(ex);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Alternatively, create a test to verify the Criteria APIs.&lt;/p&gt;&lt;pre&gt;@ExtendWith(ArquillianExtension.class)&lt;br&gt;public class JPQLCriteriaBuilderTest {&lt;/pre&gt;&lt;pre&gt;    private final static Logger LOGGER = Logger.getLogger(JPQLCriteriaBuilderTest.class.getName());&lt;/pre&gt;&lt;pre&gt;    @Deployment&lt;br&gt;    public static WebArchive createDeployment() {&lt;br&gt;        return ShrinkWrap.create(WebArchive.class)&lt;br&gt;                .addClasses(Person.class, Gender.class)&lt;br&gt;                .addAsResource(&amp;quot;test-persistence.xml&amp;quot;, &amp;quot;META-INF/persistence.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @PersistenceContext&lt;br&gt;    private EntityManager em;&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    UserTransaction ux;&lt;/pre&gt;&lt;pre&gt;    @BeforeEach&lt;br&gt;    public void before() throws Exception {&lt;br&gt;        clearPersons();&lt;br&gt;        startTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void clearPersons() throws Exception {&lt;br&gt;        startTx();&lt;br&gt;        var builder = em.getCriteriaBuilder();&lt;br&gt;        var deletePersonQuery = builder.createCriteriaDelete(Person.class);&lt;br&gt;        var deletedPersons = em.createQuery(deletePersonQuery).executeUpdate();&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;Deleted {0} persons&amp;quot;, deletedPersons);&lt;br&gt;        endTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void startTx() throws Exception {&lt;br&gt;        ux.begin();&lt;br&gt;        em.joinTransaction();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @AfterEach&lt;br&gt;    public void after() throws Exception {&lt;br&gt;        endTx();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private void endTx() throws Exception {&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;Transaction status: {0}&amp;quot;, ux.getStatus());&lt;br&gt;        try {&lt;br&gt;            if (ux.getStatus() == Status.STATUS_ACTIVE) {&lt;br&gt;                ux.commit();&lt;br&gt;            }&lt;br&gt;        } catch (Exception e) {&lt;br&gt;            ux.rollback();&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;)&lt;br&gt;    public void testNumericFunctions() throws Exception {&lt;br&gt;        var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;        em.persist(person);&lt;br&gt;        var id = person.getId();&lt;br&gt;        assertNotNull(id);&lt;br&gt;        endTx();&lt;/pre&gt;&lt;pre&gt;        startTx();&lt;br&gt;        try {&lt;br&gt;            var cb = em.getCriteriaBuilder();&lt;br&gt;            var query = cb.createTupleQuery();&lt;br&gt;            var root = query.from(Person.class);&lt;/pre&gt;&lt;pre&gt;            query.multiselect(root.get(&amp;quot;name&amp;quot;),&lt;br&gt;                    cb.ceiling(root.get(&amp;quot;salary&amp;quot;)),&lt;br&gt;                    cb.floor(root.get(&amp;quot;salary&amp;quot;)),&lt;br&gt;                    cb.round(root.get(&amp;quot;salary&amp;quot;), 1),&lt;br&gt;                    cb.exp(root.get(&amp;quot;yearsWorked&amp;quot;)),&lt;br&gt;                    cb.ln(root.get(&amp;quot;yearsWorked&amp;quot;)),&lt;br&gt;                    cb.power(root.get(&amp;quot;yearsWorked&amp;quot;), 2),&lt;br&gt;                    cb.sign(root.get(&amp;quot;yearsWorked&amp;quot;))&lt;br&gt;            );&lt;br&gt;            query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id));&lt;/pre&gt;&lt;pre&gt;            var resultList = em.createQuery(query).getResultList();&lt;br&gt;            LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size());&lt;br&gt;            resultList.forEach(result -&amp;gt;&lt;br&gt;                    LOGGER.log(&lt;br&gt;                            Level.INFO,&lt;br&gt;                            // see: &lt;a href=&quot;https://github.com/eclipse-ee4j/eclipselink/issues/1593&quot;&gt;https://github.com/eclipse-ee4j/eclipselink/issues/1593&lt;/a&gt;&lt;br&gt;                            // John,12,345,12,345,12,345,7.389,0.693,4,1&lt;br&gt;                            &amp;quot;tuple data :{0},{1},{2},{3},{4},{5},{6},{7}&amp;quot;,&lt;br&gt;                            new Object[]{&lt;br&gt;                                    result.get(0, String.class),&lt;br&gt;                                    result.get(1, BigDecimal.class), // it should return BigDecimal&lt;br&gt;                                    result.get(2, BigDecimal.class),&lt;br&gt;                                    result.get(3, BigDecimal.class),&lt;br&gt;                                    result.get(4, Double.class),&lt;br&gt;                                    result.get(5, Double.class),&lt;br&gt;                                    result.get(6, Double.class),&lt;br&gt;                                    result.get(7, Integer.class)&lt;br&gt;                            }&lt;br&gt;                    )&lt;br&gt;            );&lt;br&gt;        } catch (Exception ex) {&lt;br&gt;            fail(ex);&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test nen datetime functions&amp;quot;)&lt;br&gt;    public void testDateTimeFunctions() throws Exception {&lt;br&gt;        var person = new Person(&amp;quot;John&amp;quot;, 30);&lt;br&gt;        em.persist(person);&lt;br&gt;        var id = person.getId();&lt;br&gt;        assertNotNull(id);&lt;br&gt;        endTx();&lt;/pre&gt;&lt;pre&gt;        startTx();&lt;br&gt;        try {&lt;br&gt;            var cb = em.getCriteriaBuilder();&lt;br&gt;            var query = cb.createTupleQuery();&lt;br&gt;            var root = query.from(Person.class);&lt;/pre&gt;&lt;pre&gt;            query.multiselect(root.get(&amp;quot;name&amp;quot;),&lt;br&gt;                    cb.localTime(),&lt;br&gt;                    cb.localDateTime(),&lt;br&gt;                    cb.localDate()&lt;br&gt;            );&lt;br&gt;            query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id));&lt;/pre&gt;&lt;pre&gt;            var resultList = em.createQuery(query).getResultList();&lt;br&gt;            LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size());&lt;br&gt;            resultList.forEach(data -&amp;gt;&lt;br&gt;                    LOGGER.log(&lt;br&gt;                            Level.INFO,&lt;br&gt;                            &amp;quot;tuple data :{0},{1},{2},{3}&amp;quot;,&lt;br&gt;                            new Object[]{&lt;br&gt;                                    data.get(0, String.class),&lt;br&gt;                                    data.get(1, java.time.LocalTime.class),&lt;br&gt;                                    data.get(2, java.time.LocalDateTime.class),&lt;br&gt;                                    data.get(3, java.time.LocalDate.class)&lt;br&gt;                            }&lt;br&gt;                    )&lt;br&gt;            );&lt;br&gt;        } catch (Exception ex) {&lt;br&gt;            fail(ex);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;But unfortunately, there is a bug in the GlassFish 7.0.0-M9 will fail the test JPQLFunctionsTest, more details please check Github issues &lt;a href=&quot;https://github.com/eclipse-ee4j/glassfish/issues/24120&quot;&gt;GlassFish #24120&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Check the sample codes of &lt;a href=&quot;https://github.com/hantsy/jakartaee10-sandbox/tree/master/hibernate&quot;&gt;Hibernate&lt;/a&gt; and &lt;a href=&quot;https://github.com/hantsy/jakartaee10-sandbox/tree/master/jpa&quot;&gt;Jakarta Persistence&lt;/a&gt; from my github.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81b292e8b3a4&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/whats-new-in-jakarta-persistence-3-1-by-examples-81b292e8b3a4&quot;&gt;What’s New in Jakarta Persistence 3.1 By Examples&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">Jakarta Persistence(aka JPA) 3.1 brings a collection of improvements.The UUID class now is treated as Basic Java Type. To support UUID type ID in Entity class, JPA introduces a new UUID generator.Several numeric functions and date/time specific functions are added in JPQL and type-safe Criteria API.More details please read What’s New in Jakarta Persistence 3.1.Next let’s explore these features by writing some real example codes.Photo by &amp;lt;a href=”https://unsplash.com/@lin_alessio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&amp;quot;&amp;gt;Alessio Lin&amp;lt;/a&amp;gt; on &amp;lt;a href=”https://unsplash.com/s/photos/china-building?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&amp;quot;&amp;gt;Unsplash&amp;lt;/a&amp;gt;Hibernate 6.1Generate a simple Java application project via Maven Quickstart archetype.mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4There are some interactive steps to guide you setup the project info, such as groupId, artifact, version etc. In this example project, we use com.example as groupId, and demo as artifactId. Then confirm and begin to generate the project source codes.After it is done, open the project in a Java IDE such as IntelliJ IDEA(Community Edition is free), or Eclipse Java/Java EE bundle, or NetBeans IDE, or a simple text editor, eg. VS Code.Modify the pom.xml in the project root folder, add Hibernate 6.1, and JUnit etc. into project dependencies, and setup Maven compiler plugin to use Java 17 to compile the source codes.The final pom.xml looks like the following.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate6&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakartaee10-sandbox-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;relativePath&amp;gt;..&amp;lt;/relativePath&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;name&amp;gt;hibernate6&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Jakarta EE 10 Sandbox: Hibernate 6/JPA 3.1 example&amp;lt;/description&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;maven.compiler.release&amp;gt;17&amp;lt;/maven.compiler.release&amp;gt; &amp;lt;!-- requires 6.1.2.Final or higher --&amp;gt; &amp;lt;hibernate.version&amp;gt;6.1.4.Final&amp;lt;/hibernate.version&amp;gt; &amp;lt;h2.version&amp;gt;2.1.214&amp;lt;/h2.version&amp;gt; &amp;lt;!-- test deps --&amp;gt; &amp;lt;junit-jupiter.version&amp;gt;5.9.1&amp;lt;/junit-jupiter.version&amp;gt; &amp;lt;assertj-core.version&amp;gt;3.23.1&amp;lt;/assertj-core.version&amp;gt; &amp;lt;slf4j.version&amp;gt;2.0.3&amp;lt;/slf4j.version&amp;gt; &amp;lt;logback.version&amp;gt;1.4.4&amp;lt;/logback.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate.orm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.persistence&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.persistence-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- H2 Database --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${h2.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- logging with logback --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jcl-over-slf4j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;logback-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${logback.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${logback.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- test dependencies --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-jupiter.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.assertj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;assertj-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${assertj-core.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate.orm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-testing&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.10.1&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.0-M7&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;&amp;lt;/project&amp;gt;NOTE: To share common resources for all feature-based projects, create a parent POM to centralize the common configurations in one place, check the parent pom.xml file.In this example project, we use H2 embedded database for test purpose. Hibernate 6.1 implements the features of Jakarta Persistence 3.1, but it includes a Jakarta Persistence 3.0 API in the transitive dependency tree.To use Jakarta Persistence 3.1 API, we have to add jakarta.persistence:jakarta.persistence-api 3.1 explicitly.In the src/main/resources/META-INF, add a new file named persistence.xml.&amp;lt;persistence xmlns=&amp;quot;https://jakarta.ee/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_1.xsd&amp;quot; version=&amp;quot;3.1&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;defaultPU&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt; &amp;lt;description&amp;gt;Hibernate test case template Persistence Unit&amp;lt;/description&amp;gt; &amp;lt;provider&amp;gt;org.hibernate.jpa.HibernatePersistenceProvider&amp;lt;/provider&amp;gt; &amp;lt;exclude-unlisted-classes&amp;gt;false&amp;lt;/exclude-unlisted-classes&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;hibernate.archive.autodetection&amp;quot; value=&amp;quot;class, hbm&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot; value=&amp;quot;org.hibernate.dialect.H2Dialect&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.connection.driver_class&amp;quot; value=&amp;quot;org.h2.Driver&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.connection.url&amp;quot; value=&amp;quot;jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.connection.username&amp;quot; value=&amp;quot;sa&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.connection.pool_size&amp;quot; value=&amp;quot;5&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.hbm2ddl.auto&amp;quot; value=&amp;quot;create-drop&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.max_fetch_depth&amp;quot; value=&amp;quot;5&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.cache.region_prefix&amp;quot; value=&amp;quot;hibernate.test&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.cache.region.factory_class&amp;quot; value=&amp;quot;org.hibernate.testing.cache.CachingRegionFactory&amp;quot;/&amp;gt; &amp;lt;!--NOTE: hibernate.jdbc.batch_versioned_data should be set to false when testing with Oracle--&amp;gt; &amp;lt;property name=&amp;quot;hibernate.jdbc.batch_versioned_data&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;jakarta.persistence.validation.mode&amp;quot; value=&amp;quot;NONE&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.service.allow_crawling&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.session.events.log&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/persistence-unit&amp;gt;&amp;lt;/persistence&amp;gt;We use logback as the logging framework in this project. In the src/main/resources, add a logback.xml to configure logback.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;configuration&amp;gt; &amp;lt;property name=&amp;quot;LOGS&amp;quot; value=&amp;quot;./logs&amp;quot;/&amp;gt; &amp;lt;appender name=&amp;quot;Console&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt; &amp;lt;layout class=&amp;quot;ch.qos.logback.classic.PatternLayout&amp;quot;&amp;gt; &amp;lt;Pattern&amp;gt; %green(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable &amp;lt;/Pattern&amp;gt; &amp;lt;/layout&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;appender name=&amp;quot;RollingFile&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt; &amp;lt;file&amp;gt;${LOGS}/app.log&amp;lt;/file&amp;gt; &amp;lt;encoder class=&amp;quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&amp;quot;&amp;gt; &amp;lt;Pattern&amp;gt;%d %p %C{1.} [%t] %m%n&amp;lt;/Pattern&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;quot;&amp;gt; &amp;lt;!-- rollover daily and when the file reaches 10 MegaBytes --&amp;gt; &amp;lt;fileNamePattern&amp;gt;${LOGS}/archived/app-%d{yyyy-MM-dd}.%i.log &amp;lt;/fileNamePattern&amp;gt; &amp;lt;timeBasedFileNamingAndTriggeringPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&amp;quot;&amp;gt; &amp;lt;maxFileSize&amp;gt;10MB&amp;lt;/maxFileSize&amp;gt; &amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt; &amp;lt;/rollingPolicy&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;!-- LOG everything at INFO level --&amp;gt; &amp;lt;root level=&amp;quot;info&amp;quot;&amp;gt; &amp;lt;appender-ref ref=&amp;quot;RollingFile&amp;quot;/&amp;gt; &amp;lt;appender-ref ref=&amp;quot;Console&amp;quot;/&amp;gt; &amp;lt;/root&amp;gt; &amp;lt;!-- Debug hibernate SQL, see: https://thorben-janssen.com/hibernate-logging-guide/ --&amp;gt; &amp;lt;logger name=&amp;quot;org.hibernate.SQL&amp;quot; level=&amp;quot;DEBUG&amp;quot;/&amp;gt; &amp;lt;logger name=&amp;quot;org.hibernate.type.descriptor.sql&amp;quot; level=&amp;quot;trace&amp;quot;/&amp;gt; &amp;lt;!-- Custom debug level for the application code --&amp;gt; &amp;lt;logger name=&amp;quot;com.example&amp;quot; level=&amp;quot;debug&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt; &amp;lt;appender-ref ref=&amp;quot;RollingFile&amp;quot;/&amp;gt; &amp;lt;appender-ref ref=&amp;quot;Console&amp;quot;/&amp;gt; &amp;lt;/logger&amp;gt;&amp;lt;/configuration&amp;gt;We set org.hibernate.SQL logging level to DEBUG and org.hibernate.type.descriptor.sql to trace, it will help you to dig into the Hibernate generated sql at runtime.UUID Basic Type SupportJPA 3.1 allows to use UUID as basic Java type, especially it add a UUID ID generator.Create a simple Entity.@Entitypublic class Person { @Id @Column(name = &amp;quot;id&amp;quot;, nullable = false) @GeneratedValue(strategy = GenerationType.UUID) private UUID id; private String name; private int age = 30; public Person() { } public Person(String name, int age) { assert age &amp;gt; 0; this.name = name; this.age = age; this.birthDate = LocalDateTime.now().minusYears(this.age); } // getters and setters // override equals and hashCode}An entity class is annotated with an @Entity, optionally you can specify the entity name and add table definition with an extra @Table annotation.Here we defined a UUID type ID, and use a UUID generation strategy.JPA requires an Entity should includes a no-arguments constructor, if you declare another constructor with a few arguments, you should declare this no-arguments constructor explicitly.Create a simple JUnit test to verify if the UUID type working as expected.class PersonUUIDTest { private static final Logger log = LoggerFactory.getLogger(PersonUUIDTest.class); private EntityManagerFactory entityManagerFactory; @BeforeEach void setUp() { entityManagerFactory = Persistence.createEntityManagerFactory(&amp;quot;defaultPU&amp;quot;); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); var deleteFromPerson = entityManager.createQuery(&amp;quot;DELETE FROM Person&amp;quot;).executeUpdate(); log.debug(&amp;quot;Deleted {} persons&amp;quot;, deleteFromPerson); entityManager.getTransaction().commit(); entityManager.close(); } @Test @DisplayName(&amp;quot;insert person and verify person&amp;quot;) public void testInsertAndFindPerson() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); entityManager.persist(person); entityManager.getTransaction().commit(); var id = person.getId(); assertNotNull(id); try { var foundPerson = entityManager.find(Person.class, id); assertThat(foundPerson.getId()).isNotNull(); assertThat(foundPerson.getName()).isEqualTo(&amp;quot;John&amp;quot;); assertThat(foundPerson.getAge()).isEqualTo(30); } catch (Exception ex) { ex.printStackTrace(); } } @AfterEach void tearDown() { entityManagerFactory.close(); }}In the @BeforeEach method, we will create an EntityManagerFactory instance. And in the @AfterEach we call the EntityManagerFactory.close to release the resource.In the @BeforeEach we try to clean up the Person data.Now in the testInsertAndFindPerson test, we insert a new person, then utilize entityManager.find to find the inserted person.The person id is annotated with @ID and @GeneratedValue, when inserting a person into table, hibernate will generate an ID automatically. After it is persisted, the returned instance is filled with the generated id, it should not be a null.Numeric FunctionsJPA 3.1 adds a collection of new numeric functions in literal JPQL query and type-safe Criteria Builder API.Add some extra properties in the above Person class.public class Person{ private Integer yearsWorked = 2; private LocalDateTime birthDate = LocalDateTime.now().minusYears(30); private BigDecimal salary = new BigDecimal(&amp;quot;12345.678&amp;quot;); private BigDecimal hourlyRate = new BigDecimal(&amp;quot;34.56&amp;quot;); // setters and getters}Create a new test to verify the new numeric functions: ceiling, floor, round, exp, ln, power, sign.@Test@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;)public void testNumericFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); entityManager.persist(person); entityManager.getTransaction().commit(); var id = person.getId(); assertNotNull(id); try { var queryString = &amp;quot;&amp;quot;&amp;quot; SELECT p.name as name, CEILING(p.salary) as ceiling, FLOOR(p.salary) as floor, ROUND(p.salary, 1) as round, EXP(p.yearsWorked) as exp, LN(p.yearsWorked) as ln, POWER(p.yearsWorked,2) as power, SIGN(p.yearsWorked) as sign FROM Person p WHERE p.id=:id &amp;quot;&amp;quot;&amp;quot;; var query = entityManager.createQuery(queryString); query.setParameter(&amp;quot;id&amp;quot;, id); var resultList = query.getResultList(); log.debug(&amp;quot;Result list: {}&amp;quot;, resultList); resultList.forEach(result -&amp;gt; log.debug(&amp;quot;result: {}&amp;quot;, result)); } catch (Exception ex) { ex.printStackTrace(); }}Next, let’s have a look at how to use them in the Criteria APIs.@Test@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;)public void testNumericFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); entityManager.persist(person); entityManager.getTransaction().commit(); var id = person.getId(); assertNotNull(id); try { // see: https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user/topic/New.20functions.20in.20JPA.203.2E1/near/289429903 var cb = (HibernateCriteriaBuilder) entityManager.getCriteriaBuilder(); var query = cb.createTupleQuery(); var root = query.from(Person.class); query.multiselect(root.get(&amp;quot;name&amp;quot;), cb.ceiling(root.get(&amp;quot;salary&amp;quot;)), cb.floor(root.get(&amp;quot;salary&amp;quot;)), cb.round(root.get(&amp;quot;salary&amp;quot;), 1), cb.exp(root.get(&amp;quot;yearsWorked&amp;quot;)), cb.ln(root.get(&amp;quot;yearsWorked&amp;quot;)), // see: https://hibernate.atlassian.net/browse/HHH-15395 cb.power(root.get(&amp;quot;yearsWorked&amp;quot;), 2), cb.sign(root.get(&amp;quot;yearsWorked&amp;quot;)) ); query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id)); var resultList = entityManager.createQuery(query).getResultList(); log.debug(&amp;quot;Result list: {}&amp;quot;, resultList); resultList.forEach(result -&amp;gt; log.debug( &amp;quot;result: ({},{},{},{},{},{},{},{})&amp;quot;, result.get(0, String.class), result.get(1, BigDecimal.class), result.get(2, BigDecimal.class), result.get(3, BigDecimal.class), result.get(4, Double.class), result.get(5, Double.class), result.get(6, Double.class), result.get(7, Integer.class) ) ); } catch (Exception ex) { fail(ex); }}Note, when using Hibernate 6.1, we have to cast CriteriaBuilder to HibernateCriteriaBuilder to experience the new numeric functions. Hibernate 6.2 will align to JPA 3.1 and fix the issue.DateTime FunctionsJPA 3.1 add a series of datetime functions and ease the usage of Java 8 DateTime APIs.@Test@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test datetime functions&amp;quot;)public void testDateTimeFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); entityManager.persist(person); entityManager.getTransaction().commit(); var id = person.getId(); assertNotNull(id); try { var queryString = &amp;quot;&amp;quot;&amp;quot; SELECT p.name as name, LOCAL TIME as localTime, LOCAL DATETIME as localDateTime, LOCAL DATE as localDate FROM Person p &amp;quot;&amp;quot;&amp;quot;; var query = entityManager.createQuery(queryString); var resultList = query.getResultList(); log.debug(&amp;quot;Result list: {}&amp;quot;, resultList); resultList.forEach(result -&amp;gt; log.debug(&amp;quot;result: {}&amp;quot;, result)); } catch (Exception ex) { ex.printStackTrace(); }}The LOCAL TIME, LOCAL DATETIME, LOCAL DATE query result will be treated as Java 8 LocalTime, LocalDateTime, LocalDate directly.Let’s have a look at the usage in the CriteriaBuilder APIs.@Test@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test datetime functions&amp;quot;)public void testDateTimeFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); entityManager.persist(person); entityManager.getTransaction().commit(); var id = person.getId(); assertNotNull(id); try { var cb = (HibernateCriteriaBuilder) entityManager.getCriteriaBuilder(); var query = cb.createTupleQuery(); var root = query.from(Person.class); query.multiselect(root.get(&amp;quot;name&amp;quot;), cb.localTime(), cb.localDateTime(), cb.localDate() ); query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id)); var resultList = entityManager.createQuery(query).getResultList(); log.debug(&amp;quot;Result list: {}&amp;quot;, resultList); resultList.forEach(result -&amp;gt; log.debug( &amp;quot;result: ({},{},{},{})&amp;quot;, result.get(0, String.class), result.get(1, LocalTime.class), result.get(2, LocalDateTime.class), result.get(3, LocalDate.class) ) ); } catch (Exception ex) { fail(ex); }}EXTRACT functionJPA 3.1 introduces a extract function to decode fragments from a datetime value.@Test@DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test `EXTRACT` functions&amp;quot;)public void testExtractFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); var entityManager = entityManagerFactory.createEntityManager(); entityManager.getTransaction().begin(); entityManager.persist(person); entityManager.getTransaction().commit(); var id = person.getId(); assertNotNull(id); try { var queryString = &amp;quot;&amp;quot;&amp;quot; SELECT p.name as name, EXTRACT(YEAR FROM p.birthDate) as year, EXTRACT(QUARTER FROM p.birthDate) as quarter, EXTRACT(MONTH FROM p.birthDate) as month, EXTRACT(WEEK FROM p.birthDate) as week, EXTRACT(DAY FROM p.birthDate) as day, EXTRACT(HOUR FROM p.birthDate) as hour, EXTRACT(MINUTE FROM p.birthDate) as minute, EXTRACT(SECOND FROM p.birthDate) as second FROM Person p &amp;quot;&amp;quot;&amp;quot;; var query = entityManager.createQuery(queryString); var resultList = query.getResultList(); log.debug(&amp;quot;Result list: {}&amp;quot;, resultList); resultList.forEach(result -&amp;gt; log.debug(&amp;quot;result: {}&amp;quot;, result)); } catch (Exception ex) { ex.printStackTrace(); }}Use the new extract function, we can read the year, quarter, month, week, day, hour, minute, second values from a Java 8 DateTime type property in the JPQL query.Note, there is no mapped extract function in the CriteriaBuilder APIs, for more details, check issue: jakartaee/persistence#356JakartaEE RuntimeNext let’s go to the Jakarta EE 10 compatible products to experience the new features of JPA 3.1.Firstly we will prepare a Jakarta EE 10 web application.Simply generate a web application skeleton via Maven Webapp Archetype.mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4Then add Jakarta EE 10 dependency into the project pom.xml. Let’s have a look at the modified pom.xml.&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jpa-examples&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakartaee10-sandbox-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;relativePath&amp;gt;..&amp;lt;/relativePath&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;name&amp;gt;jpa-examples&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Jakarta EE 10 Sandbox: Persistence 3.1 Examples&amp;lt;/description&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.platform&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.jakartaee-api&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.persistence&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;org.eclipse.persistence.jpa.modelgen.processor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.junit5&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-junit5-container&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- see: https://github.com/arquillian/arquillian-core/issues/248 --&amp;gt; &amp;lt;!-- and https://github.com/arquillian/arquillian-core/pull/246/files --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.protocol&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-protocol-servlet-jakarta&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/project&amp;gt;In the above pom.xml, we also add JUnit 5 and Arquillian related dependencies in test scope. Through the container specific Aquillian adapter, we can run the tests in Jakarta EE application servers.In this project, we reuse the the Person entity we have introduced in the Hibernate section.Now let’s move to persistence configuration. Create a persistence.xml in the src/main/resources/META-INFO folder.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;persistence version=&amp;quot;3.0&amp;quot; xmlns=&amp;quot;https://jakarta.ee/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;defaultPU&amp;quot; transaction-type=&amp;quot;JTA&amp;quot;&amp;gt; &amp;lt;jta-data-source&amp;gt;java:comp/DefaultDataSource&amp;lt;/jta-data-source&amp;gt; &amp;lt;exclude-unlisted-classes&amp;gt;false&amp;lt;/exclude-unlisted-classes&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;jakarta.persistence.schema-generation.database.action&amp;quot; value=&amp;quot;drop-and-create&amp;quot;/&amp;gt; &amp;lt;!-- for Glassfish/Payara/EclipseLink --&amp;gt; &amp;lt;property name=&amp;quot;eclipselink.logging.level.sql&amp;quot; value=&amp;quot;FINE&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;eclipselink.logging.level&amp;quot; value=&amp;quot;FINE&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;eclipselink.logging.parameters&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;!-- for WildFly/Hibernate --&amp;gt; &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/persistence-unit&amp;gt;&amp;lt;/persistence&amp;gt;The configuration is a little different from the one we introduced in the Hibernate section.In a container environment, we would like choose JTA as transaction-type.We do not setup database connection info, instead we configure a built-in DataSource. The java:comp/DefaultDataSource is the default DataSource for all Jakarta EE compatible products.Creating Jakarta EE Sample ApplicationTo interact with our backend database, we will create a simple complete JAXRS application, including:A EJB @Stateless bean to read data from databaseAnd expose data via a simple JAXRS resourceOK, let’s create class PersonRepository which is annotated with @Stateless. In this class, inject a EntityManager bean with an annotation @PersistenceContext, and add a new method getAllResource to execute a JPQL query to retrieve all persons.@Statelesspublic class PersonRepository { @PersistenceContext EntityManager entityManager; public List&amp;lt;Person&amp;gt; getAllPersons() { return entityManager.createQuery(&amp;quot;select p from Person p&amp;quot;, Person.class) .getResultList(); }}Next, create a PersonResource to expose persons to client.@RequestScoped@Path(&amp;quot;/persons&amp;quot;)public class PersonResource { @Inject PersonRepository personRepository; @Path(&amp;quot;&amp;quot;) @GET @Produces(MediaType.APPLICATION_JSON) public Response allPersons() { var data = personRepository.getAllPersons(); return Response.ok(data).build(); }}The PersonResource is annotated with RequestScoped, it is a CDI bean, the @Path on the class define the root path of all subresources in this class. The allPersons will produces all persons to client in JSON format when HTTP Client request matches HTTP GET method, and URI is /persons and HTTP Header Accept is compatible with application/json.To activate JAXRS feature, create a class to extend the JAXRS Application, add @ApplicationPath to specify the root context path of all JAXRS resources.@ApplicationPath(&amp;quot;/rest&amp;quot;)public class RestActivator extends Application {}Let’s create a bean to add some sample data at the application startup.@Startup@Singletonpublic class DataInitializer { @PersistenceContext EntityManager entityManager; @PostConstruct public void init() { List .of( new Person(&amp;quot;Jack&amp;quot;, 20), new Person(&amp;quot;Rose&amp;quot;, 18) ) .forEach(entityManager::persist); }}Deploying to Jakarta EE ContainersBuild and package the application into a war archive. Open a terminal, switch to the project root folder, and execute the following command.mvn clean package -DskipTests -D&amp;quot;maven.test.skip=true&amp;quot;When it is done, there is war package is ready in the path target/jpa-examples.war.GlassFish 7.0Download the latest GlassFish 7.0, extract files to a location, eg. D:\glassfish7, mark as GlassFish_install.To start GlassFish and Derby, open a terminal, enter GlassFish_install/bin, run asadmin start-database and asadmin start-domain domain1.Copy the above war package to Glassfish_install/glassfish/domains/domain1/autodeploy folder.Open GlassFish_install/glassfish/domains/domain1/logs/server.log, and wait the deployment is completed.Open another terminal window, execute curl http://localhost:8080/jpa-examples/rest/persons. You will the following response in the console.[{“age”:18,”birthDate”:”2004–11–06T14:54:05.4504678&amp;quot;,”gender”:”MALE”,”hourlyRate”:34.56,”id”:”d8552d71-ff7f-4650-b5a0-ce1c5fb3fe0b”,”name”:”Rose”,”salary”:12345.678,”yearsWorked”:2},{“age”:20,”birthDate”:”2002–11–06T14:54:05.4504678&amp;quot;,”gender”:”MALE”,”hourlyRate”:34.56,”id”:”cdf94cdc-21b3–492c-b1b5–06bc8cae9947&amp;quot;,”name”:”Jack”,”salary”:12345.678,”yearsWorked”:2}]To stop GlassFish and Derby, run asadmin stop-database and asadmin stop-domain domain1WildFly Preview 27Download the latest WildFly Preview, extract files to a location, eg. D:\wildfly-preview-27.0.0.Beta1, mark as WildFly_install.Open a terminal, enter WildFly_install/bin, run standalone to start WildFly with the default standalone profile configuration.Copy the built war to WildFly_install/standalone/deployments.Wait the deployment progress is done, you can use the curl in GlassFish section to verify the application.Send a CTLR+C keys combination in the original WildFly startup console to stop WildFly.Deploying Application via Maven PluginDeploying to GlassFish via Cargo PluginThe GlassFish project does not include an official Maven plugin to manage GlassFish server. There is a Maven plugin named cargo-maven3-plugin which can be used to manage all popular Jakarta EE application servers and web servers.Add the following profile section to use cargo plugin to manage the lifecycle of GlassFish server.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;glassfish&amp;lt;/id&amp;gt; &amp;lt;activation&amp;gt; &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt; &amp;lt;/activation&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;cargo.zipUrlInstaller.downloadDir&amp;gt;${project.basedir}/../installs&amp;lt;/cargo.zipUrlInstaller.downloadDir&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.cargo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cargo-maven3-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;container&amp;gt; &amp;lt;containerId&amp;gt;glassfish7x&amp;lt;/containerId&amp;gt; &amp;lt;!-- &amp;lt;artifactInstaller&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.main.distributions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;glassfish&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${glassfish.version}&amp;lt;/version&amp;gt; &amp;lt;/artifactInstaller&amp;gt; --&amp;gt; &amp;lt;zipUrlInstaller&amp;gt; &amp;lt;url&amp;gt;https://github.com/eclipse-ee4j/glassfish/releases/download/${glassfish.version}/glassfish-${glassfish.version}.zip&amp;lt;/url&amp;gt; &amp;lt;downloadDir&amp;gt;${cargo.zipUrlInstaller.downloadDir}&amp;lt;/downloadDir&amp;gt; &amp;lt;/zipUrlInstaller&amp;gt; &amp;lt;/container&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!-- the configuration used to deploy --&amp;gt; &amp;lt;home&amp;gt;${project.build.directory}/glassfish7x-home&amp;lt;/home&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;cargo.remote.password&amp;gt;&amp;lt;/cargo.remote.password&amp;gt; &amp;lt;cargo.glassfish.removeDefaultDatasource&amp;gt;true&amp;lt;/cargo.glassfish.removeDefaultDatasource&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;datasources&amp;gt; &amp;lt;datasource&amp;gt; &amp;lt;driverClass&amp;gt;org.apache.derby.jdbc.EmbeddedDriver&amp;lt;/driverClass&amp;gt; &amp;lt;url&amp;gt;jdbc:derby:derbyDB;create=true&amp;lt;/url&amp;gt; &amp;lt;jndiName&amp;gt;jdbc/__default&amp;lt;/jndiName&amp;gt; &amp;lt;username&amp;gt;APP&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;nonemptypassword&amp;lt;/password&amp;gt; &amp;lt;/datasource&amp;gt; &amp;lt;/datasources&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;&amp;lt;/profile&amp;gt;Unlike the approach in NetBeans IDE or Eclipse IDE with GlassFish Pack, where starting GlassFish it will start the built-in Derby at the same time. Cargo does not start the built-in Derby as expected, to use the default DataSource in our project, clear the default DataSource and add a new default DataSource based on the embedded Derby.Run the following command. It will compile the project source codes and package the application into a war archive, then start the managed GlassFish server(with a new cargo-domain), and then deploy the package into this running server.mvn clean package cargo:run -DskipTests -Dmaven.test.skip=trueNote, when you run this command at the first time, it will spend some time to download a copy of the GlassFish redistribution, and extract the files into the build folder.In another terminal window, execute curl http://localhost:8080/jpa-examples/rest/persons to verify the endpoint.To stop the server, just send a CTRL+C in the original GlassFish running console.Deploying to WildFly via WildFly PluginThe WildFly project itself provides an official WildFly Maven plugin, we will configure it in a new Maven profile.Cargo maven plugin also supports WildFly, check Cargo WildFly docs.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;wildfly&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;!-- Wildfly server --&amp;gt; &amp;lt;wildfly.artifactId&amp;gt;wildfly-preview-dist&amp;lt;/wildfly.artifactId&amp;gt; &amp;lt;jboss-as.home&amp;gt;${project.build.directory}/wildfly-preview-${wildfly.version}&amp;lt;/jboss-as.home&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;!-- unpack a copy of WildFly--&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-dependency-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;unpack&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;process-classes&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;unpack&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;artifactItems&amp;gt; &amp;lt;artifactItem&amp;gt; &amp;lt;groupId&amp;gt;org.wildfly&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;${wildfly.artifactId}&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${wildfly.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;zip&amp;lt;/type&amp;gt; &amp;lt;overWrite&amp;gt;false&amp;lt;/overWrite&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.build.directory}&amp;lt;/outputDirectory&amp;gt; &amp;lt;/artifactItem&amp;gt; &amp;lt;/artifactItems&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;!-- The WildFly plugin deploys your war to a local running WildFly container --&amp;gt; &amp;lt;!-- To use, run: mvn package wildfly:deploy --&amp;gt; &amp;lt;!-- For Jakarta EE 9, use `wildfly-preview-dist` as artifactId instead to start and deploy applications--&amp;gt; &amp;lt;!-- Run: mvn clean wildfly:run -PWildfly -Dwildfly.artifactId=wildfly-preview-dist -Dwildfly.version=22.0.0.Alpha1 --&amp;gt; &amp;lt;!-- or set the `jboss-as.home` to run: mvn clean wildfly:run -PWildfly -Djboss-as.home=D:\appsvr\wildfly-preview-22.0.0.Alpha1--&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.wildfly.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;wildfly-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${wildfly-maven-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;opensaml&amp;lt;/id&amp;gt; &amp;lt;url&amp;gt;https://build.shibboleth.net/nexus/content/repositories/releases/&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt;&amp;lt;/profile&amp;gt;With the WildFly plugin, we can deploy applications into an embedded WildFly, a managed WildFly server or a remote running WildFly server.mvn clean wildfly:run -Pwildfly -DskipTests -Dmaven.test.skip=trueBy default, if we do not setup a jboss-as.home or remote host connection info, it will bootstrap an embedded WildFly and run the application with the embedded server.Here we configure Maven dependency plugin to download a copy of WildFly, extract the files to the project build directory, and setup a jboss-as.home property, the value is the WildFly location. The WildFly plugin will manage the whole WildFly lifecycle - start the WildFly server, deploy applications into the running server, (use CTRL+C hotkey) stop the server.Testing JPA FeaturesHere I assume you are familiar with JUnit and Arquillian before.For the developers new to Arqullian framework, please read the official Arquillian Guides to start your first step. Note, these tutorials are available in several languages, including Simplified Chinese.Go to my Jakarta EE 8 starter boilerplate project and Jakarta EE 9 starter boilerplate project to update your Arquilian knowledge.Since Jakarta EE 9, it uses the new jakarta namespace, Arquillian 1.7.0.x starts to support these changes.In the next steps, we will configure a managed GlassFish Arquillian Adapter to run the testing codes.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;arq-glassfish-managed&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;skip.unit.tests&amp;gt;true&amp;lt;/skip.unit.tests&amp;gt; &amp;lt;skip.integration.tests&amp;gt;false&amp;lt;/skip.integration.tests&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- Jersey --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-media-sse&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-media-json-binding&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.inject&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-hk2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.hantsy.arquillian-container-glassfish-jakarta&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-glassfish-managed-jakarta&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${arquillian-glassfish-jakarta.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;testResources&amp;gt; &amp;lt;testResource&amp;gt; &amp;lt;directory&amp;gt;src/test/resources&amp;lt;/directory&amp;gt; &amp;lt;/testResource&amp;gt; &amp;lt;testResource&amp;gt; &amp;lt;directory&amp;gt;src/test/arq-glassfish-managed&amp;lt;/directory&amp;gt; &amp;lt;/testResource&amp;gt; &amp;lt;/testResources&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-dependency-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-dependency-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;unpack&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;pre-integration-test&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;unpack&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;artifactItems&amp;gt; &amp;lt;artifactItem&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.main.distributions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;glassfish&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${glassfish.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;zip&amp;lt;/type&amp;gt; &amp;lt;overWrite&amp;gt;false&amp;lt;/overWrite&amp;gt; &amp;lt;outputDirectory&amp;gt;${project.build.directory}&amp;lt;/outputDirectory&amp;gt; &amp;lt;/artifactItem&amp;gt; &amp;lt;/artifactItems&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-failsafe-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;environmentVariables&amp;gt; &amp;lt;GLASSFISH_HOME&amp;gt;${project.build.directory}/glassfish7&amp;lt;/GLASSFISH_HOME&amp;gt; &amp;lt;/environmentVariables&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;&amp;lt;/profile&amp;gt;In the above configuration, we add com.github.hantsy.arquillian-container-glassfish-jakarta:arquillian-glassfish-managed-jakarta, which is my fork of the official Arquillian Container GlassFish project.We preapre a copy of the latest GlassFish 7.0 in the pre-integration-test phase. The Arquillian tests will be exectued in the integretion-test phase.Let’s create a simple Arquillian tests to verify the UUID basic type feature in JPA 3.1.@ExtendWith(ArquillianExtension.class)public class UUIDStrategyTest { private final static Logger LOGGER = Logger.getLogger(UUIDStrategyTest.class.getName()); @Deployment public static WebArchive createDeployment() { return ShrinkWrap.create(WebArchive.class) .addClasses(Person.class, Gender.class) .addAsResource(&amp;quot;test-persistence.xml&amp;quot;, &amp;quot;META-INF/persistence.xml&amp;quot;) .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;); } @PersistenceContext private EntityManager em; @Inject UserTransaction ux; @BeforeEach public void before() throws Exception { startTx(); } private void startTx() throws Exception { ux.begin(); em.joinTransaction(); } @AfterEach public void after() throws Exception { endTx(); } private void endTx() throws Exception { try { if( ux.getStatus() == Status.STATUS_ACTIVE ) { ux.commit(); } } catch (Exception e) { ux.rollback(); } } @Test public void testPersistingPersons() throws Exception { final Person person = new Person(); person.setName(&amp;quot;Hantsy Bai&amp;quot;); em.persist(person); endTx(); startTx(); final Person foundPerson = em.find(Person.class, person.getId()); assertNotNull(foundPerson.getId()); LOGGER.log(Level.INFO, &amp;quot;Found person: {0}&amp;quot;, foundPerson); }}The @ExtendWith(ArquillianExtension.class) annotation on a test class to support Arquillian test lifecycle.The @Deployment annotated static method defines the resources that will be packaged into the test archive and deployed into the manged GlassFish server. It is easy to use shrinkwrap to create a fine-grined deploymen unit.You can inject EntityManager and UserTransaction beans in an Arquillian test like what you do in a simple CDI bean.In this test class, we setup @BeforeEach and @AfterEach hooks to start a transacation and end the transaction.The test method testPersistingPersons looks no difference from a plain JUnit test. Firstly we persist a person entity, and commit the transaction to ensure it will be flushed into the database as expected. Then exectuing a simple JPA query to verify the persisted data.Execute the following command to run the tests.mvn clean verify -Parq-glassfish-managedSimiliarly, create a test to verify the new numeric functions and datetime functions in Jakarta rumtimes.@ExtendWith(ArquillianExtension.class)public class JPQLFunctionsTest { private final static Logger LOGGER = Logger.getLogger(JPQLFunctionsTest.class.getName()); @Deployment public static WebArchive createDeployment() { return ShrinkWrap.create(WebArchive.class) .addClasses(Person.class, Gender.class) .addAsResource(&amp;quot;test-persistence.xml&amp;quot;, &amp;quot;META-INF/persistence.xml&amp;quot;) .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;); } @PersistenceContext private EntityManager em; @Inject UserTransaction ux; @BeforeEach public void before() throws Exception { clearPersons(); startTx(); } private void clearPersons() throws Exception { startTx(); var builder = em.getCriteriaBuilder(); var deletePersonQuery = builder.createCriteriaDelete(Person.class); var deletedPersons = em.createQuery(deletePersonQuery).executeUpdate(); LOGGER.log(Level.INFO, &amp;quot;Deleted {0} persons&amp;quot;, deletedPersons); endTx(); } private void startTx() throws Exception { ux.begin(); em.joinTransaction(); } @AfterEach public void after() throws Exception { endTx(); } private void endTx() throws Exception { LOGGER.log(Level.INFO, &amp;quot;Transaction status: {0}&amp;quot;, ux.getStatus()); try { if (ux.getStatus() == Status.STATUS_ACTIVE) { ux.commit(); } } catch (Exception e) { ux.rollback(); } } @Test @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;) public void testNumericFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); em.persist(person); var id = person.getId(); assertNotNull(id); endTx(); startTx(); try { var queryString = &amp;quot;&amp;quot;&amp;quot; SELECT p.name, CEILING(p.salary), FLOOR(p.salary), ROUND(p.salary, 1), EXP(p.yearsWorked), LN(p.yearsWorked), POWER(p.yearsWorked,2), SIGN(p.yearsWorked) FROM Person p WHERE p.id=:id &amp;quot;&amp;quot;&amp;quot;; var query = em.createQuery(queryString); query.setParameter(&amp;quot;id&amp;quot;, id); // for EclipseLinks query.setHint(QueryHints.RESULT_TYPE, ResultType.Map); List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; resultList = query.getResultList(); LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size()); resultList.forEach(data -&amp;gt; { data.forEach((k, v) -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;field:{0}, value: {1}&amp;quot;, new Object[]{k, v})); }); } catch (Exception ex) { fail(ex); } } @Test @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test nen datetime functions&amp;quot;) public void testDateTimeFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); em.persist(person); assertNotNull(person.getId()); endTx(); startTx(); try { var queryString = &amp;quot;&amp;quot;&amp;quot; SELECT p.name as name, LOCAL TIME as localTime, LOCAL DATETIME as localDateTime, LOCAL DATE as localDate FROM Person p &amp;quot;&amp;quot;&amp;quot;; // for EclipseLinks var query = em.createQuery(queryString); // for EclipseLinks query.setHint(QueryHints.RESULT_TYPE, ResultType.Map); List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; resultList = query.getResultList(); LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size()); resultList.forEach(data -&amp;gt; { data.forEach((k, v) -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;field:{0}, value: {1}&amp;quot;, new Object[]{k, v})); }); } catch (Exception ex) { fail(ex); } } @Test @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test `EXTRACT` functions&amp;quot;) public void testExtractFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); em.persist(person); assertNotNull(person.getId()); endTx(); startTx(); try { var queryString = &amp;quot;&amp;quot;&amp;quot; SELECT p.name as name, EXTRACT(YEAR FROM p.birthDate) as year, EXTRACT(QUARTER FROM p.birthDate) as quarter, EXTRACT(MONTH FROM p.birthDate) as month, EXTRACT(WEEK FROM p.birthDate) as week, EXTRACT(DAY FROM p.birthDate) as day, EXTRACT(HOUR FROM p.birthDate) as hour, EXTRACT(MINUTE FROM p.birthDate) as minute, EXTRACT(SECOND FROM p.birthDate) as second FROM Person p &amp;quot;&amp;quot;&amp;quot;; var query = em.createQuery(queryString); // for EclipseLinks query.setHint(QueryHints.RESULT_TYPE, ResultType.Map); List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; resultList = query.getResultList(); LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size()); resultList.forEach(data -&amp;gt; { data.forEach((k, v) -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;field:{0}, value: {1}&amp;quot;, new Object[]{k, v})); }); } catch (Exception ex) { fail(ex); } }}Alternatively, create a test to verify the Criteria APIs.@ExtendWith(ArquillianExtension.class)public class JPQLCriteriaBuilderTest { private final static Logger LOGGER = Logger.getLogger(JPQLCriteriaBuilderTest.class.getName()); @Deployment public static WebArchive createDeployment() { return ShrinkWrap.create(WebArchive.class) .addClasses(Person.class, Gender.class) .addAsResource(&amp;quot;test-persistence.xml&amp;quot;, &amp;quot;META-INF/persistence.xml&amp;quot;) .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;); } @PersistenceContext private EntityManager em; @Inject UserTransaction ux; @BeforeEach public void before() throws Exception { clearPersons(); startTx(); } private void clearPersons() throws Exception { startTx(); var builder = em.getCriteriaBuilder(); var deletePersonQuery = builder.createCriteriaDelete(Person.class); var deletedPersons = em.createQuery(deletePersonQuery).executeUpdate(); LOGGER.log(Level.INFO, &amp;quot;Deleted {0} persons&amp;quot;, deletedPersons); endTx(); } private void startTx() throws Exception { ux.begin(); em.joinTransaction(); } @AfterEach public void after() throws Exception { endTx(); } private void endTx() throws Exception { LOGGER.log(Level.INFO, &amp;quot;Transaction status: {0}&amp;quot;, ux.getStatus()); try { if (ux.getStatus() == Status.STATUS_ACTIVE) { ux.commit(); } } catch (Exception e) { ux.rollback(); } } @Test @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test numeric functions&amp;quot;) public void testNumericFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); em.persist(person); var id = person.getId(); assertNotNull(id); endTx(); startTx(); try { var cb = em.getCriteriaBuilder(); var query = cb.createTupleQuery(); var root = query.from(Person.class); query.multiselect(root.get(&amp;quot;name&amp;quot;), cb.ceiling(root.get(&amp;quot;salary&amp;quot;)), cb.floor(root.get(&amp;quot;salary&amp;quot;)), cb.round(root.get(&amp;quot;salary&amp;quot;), 1), cb.exp(root.get(&amp;quot;yearsWorked&amp;quot;)), cb.ln(root.get(&amp;quot;yearsWorked&amp;quot;)), cb.power(root.get(&amp;quot;yearsWorked&amp;quot;), 2), cb.sign(root.get(&amp;quot;yearsWorked&amp;quot;)) ); query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id)); var resultList = em.createQuery(query).getResultList(); LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size()); resultList.forEach(result -&amp;gt; LOGGER.log( Level.INFO, // see: https://github.com/eclipse-ee4j/eclipselink/issues/1593 // John,12,345,12,345,12,345,7.389,0.693,4,1 &amp;quot;tuple data :{0},{1},{2},{3},{4},{5},{6},{7}&amp;quot;, new Object[]{ result.get(0, String.class), result.get(1, BigDecimal.class), // it should return BigDecimal result.get(2, BigDecimal.class), result.get(3, BigDecimal.class), result.get(4, Double.class), result.get(5, Double.class), result.get(6, Double.class), result.get(7, Integer.class) } ) ); } catch (Exception ex) { fail(ex); } } @Test @DisplayName(&amp;quot;&amp;gt;&amp;gt;&amp;gt; test nen datetime functions&amp;quot;) public void testDateTimeFunctions() throws Exception { var person = new Person(&amp;quot;John&amp;quot;, 30); em.persist(person); var id = person.getId(); assertNotNull(id); endTx(); startTx(); try { var cb = em.getCriteriaBuilder(); var query = cb.createTupleQuery(); var root = query.from(Person.class); query.multiselect(root.get(&amp;quot;name&amp;quot;), cb.localTime(), cb.localDateTime(), cb.localDate() ); query.where(cb.equal(root.get(&amp;quot;id&amp;quot;), id)); var resultList = em.createQuery(query).getResultList(); LOGGER.log(Level.INFO, &amp;quot;result size:{0}&amp;quot;, resultList.size()); resultList.forEach(data -&amp;gt; LOGGER.log( Level.INFO, &amp;quot;tuple data :{0},{1},{2},{3}&amp;quot;, new Object[]{ data.get(0, String.class), data.get(1, java.time.LocalTime.class), data.get(2, java.time.LocalDateTime.class), data.get(3, java.time.LocalDate.class) } ) ); } catch (Exception ex) { fail(ex); } }}But unfortunately, there is a bug in the GlassFish 7.0.0-M9 will fail the test JPQLFunctionsTest, more details please check Github issues GlassFish #24120.Check the sample codes of Hibernate and Jakarta Persistence from my github.What’s New in Jakarta Persistence 3.1 By Examples was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Testing Jakarta EE 9 Web Application in Servlet Containers with Arquillian</title><link href="/blog/2022/testing-jakarta-ee-9-web-application-in-servlet-containers-with-arquillian/" rel="alternate" type="text/html" title="Testing Jakarta EE 9 Web Application in Servlet Containers with Arquillian" /><published>2022-08-01T00:00:00+00:00</published><updated>2022-08-01T00:00:00+00:00</updated><id>/blog/2022/testing-jakarta-ee-9-web-application-in-servlet-containers-with-arquillian</id><content type="html" xml:base="/blog/2022/testing-jakarta-ee-9-web-application-in-servlet-containers-with-arquillian/">&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dY00LOwrPkshDVnjDP-XwA.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &amp;lt;a href=”&lt;a href=&quot;https://unsplash.com/@whiterainforest?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;https://unsplash.com/@whiterainforest?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&lt;/a&gt;&amp;quot;&amp;gt;White.Rainforest ∙ 易雨白林.&amp;lt;/a&amp;gt; on &amp;lt;a href=”&lt;a href=&quot;https://unsplash.com/s/photos/china-mountain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;https://unsplash.com/s/photos/china-mountain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&lt;/a&gt;&amp;quot;&amp;gt;Unsplash&amp;lt;/a&amp;gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;In the last post &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate/blob/master/docs/build.md&quot;&gt;Building JakartaEE 9 Web Applicaiton with Servlet Container&lt;/a&gt;, we have described how to start a Jakarta EE 9 web application with the core Jakarta EE components, including CDI, Jakarta Faces, Jakarta Servlet, Jakarta Pages, Jakarta REST, etc and run it in a Jakarta EE 9 compatible Servlet container. In this post, we will discuss how to test these components in a Servlet Container with the Arquillian testing framework.&lt;/p&gt;&lt;p&gt;The Arquillian project provides official support for Apache Tomcat and Eclipse Jetty, for more information please go to &lt;a href=&quot;https://github.com/arquillian/arquillian-container-tomcat&quot;&gt;Arquillian Container Tomcat&lt;/a&gt; and &lt;a href=&quot;https://github.com/arquillian/arquillian-container-jetty&quot;&gt;Arquillian Container Jetty&lt;/a&gt;. Currently, both projects provide an &lt;em&gt;embedded&lt;/em&gt; container adapter that supports the latest Apache Tomcat 10 and Eclipse Jetty 11, but there is no managed and remote adapters available.&lt;/p&gt;&lt;p&gt;If you are new to Arquillian, please read the official &lt;a href=&quot;https://arquillian.org/guides/&quot;&gt;Getting Started Guides&lt;/a&gt; firstly, or explore my previous Arquillian articles on &lt;a href=&quot;https://hantsy.github.io/jakartaee8-starter-boilerplate/&quot;&gt;testing Jakarta EE 8 applications&lt;/a&gt; and &lt;a href=&quot;https://hantsy.github.io/jakartaee9-starter-boilerplate/&quot;&gt;Jakarta EE 9 applications&lt;/a&gt; to get to know the basic knowledge of Arquillian.&lt;/p&gt;&lt;h3&gt;Configuring Arquillian&lt;/h3&gt;&lt;p&gt;Firstly add Arquillian Core and JUnit &lt;em&gt;BOM&lt;/em&gt; to the &lt;em&gt;dependencyManagement&lt;/em&gt; section of the project &lt;em&gt;pom.xml&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependencyManagement&amp;gt;&lt;br&gt;    // ... &lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-bom&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${arquillian-bom.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;br&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.junit&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;junit-bom&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${junit-jupiter.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/pre&gt;&lt;p&gt;Add the following dependencies in the project &lt;em&gt;dependencies&lt;/em&gt; section.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependencies&amp;gt;&lt;br&gt;    //...&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.jboss.arquillian.protocol&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;arquillian-protocol-servlet-jakarta&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.jboss.shrinkwrap.resolver&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;shrinkwrap-resolver-impl-maven&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;/dependencies&amp;gt;&lt;/pre&gt;&lt;p&gt;You can also add the following testing utility libs to improve your testing codes.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependencies&amp;gt;&lt;br&gt;    //....&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;junit-jupiter-params&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;hamcrest&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;dependency&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.assertj&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;assertj-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;    &amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;/dependencies&amp;gt;&lt;/pre&gt;&lt;p&gt;Next, we will configure Arquillian Tomcat Embedded Adapter to run the testing codes against an embedded Apache Tomcat container.&lt;/p&gt;&lt;h3&gt;Configuring Arquillian Tomcat Embedded Adapter&lt;/h3&gt;&lt;p&gt;Create a new Maven profile to centralize all configurations of the Arquillian tomcat embedded adapter.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;arq-tomcat-embedded&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;skipTests&amp;gt;false&amp;lt;/skipTests&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-tomcat-embedded-10&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${arquillian-tomcat.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;tomcat-embed-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;tomcat-embed-websocket&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;Now we will write some testing codes.&lt;/p&gt;&lt;h3&gt;Testing Jakarta Components&lt;/h3&gt;&lt;p&gt;For simple POJOs, you can write a simple JUnit test to verify the functionality. For example, GreetingMessage is a simple POJO used to assemble a readable greeting message. We can write a simple JUnit test to check if it is working as expected.&lt;/p&gt;&lt;pre&gt;public class GreetingMessageTest {&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    public void testGreetingMessage() {&lt;br&gt;        var message = GreetingMessage.of(&amp;quot;Say Hello to JatartaEE&amp;quot;);&lt;br&gt;        assertThat(message.getMessage()).isEqualTo(&amp;quot;Say Hello to JatartaEE&amp;quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The GreetingService bean itself is just implementing a simple functionality that is used to build a greeting message using the buildGreetingMessage method that accepts an argument to set up the target of greeting. Just like the previous testing example, create a simple JUnit test to verify if it is functional as expected.&lt;/p&gt;&lt;pre&gt;public class GreetingServiceUnitTest {&lt;/pre&gt;&lt;pre&gt;    GreetingService service;&lt;/pre&gt;&lt;pre&gt;    @BeforeEach&lt;br&gt;    public void setup() {&lt;br&gt;        service = new GreetingService();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    public void testGreeting() {&lt;br&gt;        var message = service.buildGreetingMessage(&amp;quot;JakartaEE&amp;quot;);&lt;br&gt;        assertThat(message.getMessage()).startsWith(&amp;quot;Say Hello to JakartaEE&amp;quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The Hello bean depends on the GreetingService bean. To test the functionality of Hello in a Unit Test, we can use Mockito to isolate the dependency - GreetingService. In the following HelloTest, we created a mocked object of GreetingService in the tests.&lt;/p&gt;&lt;pre&gt;public class HelloTest {&lt;/pre&gt;&lt;pre&gt;    @ParameterizedTest&lt;br&gt;    @MethodSource(&amp;quot;provideQueryCriteria&amp;quot;)&lt;br&gt;    public void testCreateMessage(String name, String result) {&lt;br&gt;        var service = mock(GreetingService.class);&lt;br&gt;        given(service.buildGreetingMessage(name)).willReturn(GreetingMessage.of(&amp;quot;Say Hello to &amp;quot; + name));&lt;br&gt;        &lt;br&gt;        var hello = new Hello(service);&lt;br&gt;        &lt;br&gt;        hello.setName(name);&lt;br&gt;        hello.createMessage();&lt;br&gt;        assertThat(hello.getName()).isEqualTo(name);&lt;br&gt;        assertThat(hello.getMessage().getMessage()).isEqualTo(result);&lt;br&gt;        verify(service, times(1)).buildGreetingMessage(anyString());&lt;br&gt;        verifyNoMoreInteractions(service);&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    static Stream&amp;lt;Arguments&amp;gt; provideQueryCriteria() {&lt;br&gt;        return Stream.of(&lt;br&gt;                Arguments.of(&amp;quot;Tomcat&amp;quot;, &amp;quot;Say Hello to Tomcat&amp;quot;),&lt;br&gt;                Arguments.of(&amp;quot;JakartaEE&amp;quot;, &amp;quot;Say Hello to JakartaEE&amp;quot;)&lt;br&gt;        );&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;We have tested the simple POJOs in unit tests, for other Jakarta EE components, such as Servlet, Jakarta Pages, etc, we have to verify the functionality in a Servlet container, we will write integration tests using Arquillian for this scenario.&lt;/p&gt;&lt;p&gt;To run unit tests and integration tests in different phases, we can configure maven-surefire-plugin and maven-failsafe-plugin as the following, and make sure integration tests run in the integration-test phase.&lt;/p&gt;&lt;pre&gt;&amp;lt;plugins&amp;gt;&lt;br&gt;    //...&lt;br&gt;    &amp;lt;plugin&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;version&amp;gt;${maven-surefire-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;configuration&amp;gt;&lt;br&gt;            &amp;lt;skipTests&amp;gt;${skipTests}&amp;lt;/skipTests&amp;gt;&lt;br&gt;        &amp;lt;/configuration&amp;gt;&lt;br&gt;        &amp;lt;executions&amp;gt;&lt;br&gt;            &amp;lt;execution&amp;gt;&lt;br&gt;                &amp;lt;id&amp;gt;default-test&amp;lt;/id&amp;gt;&lt;br&gt;                &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt;&lt;br&gt;                &amp;lt;goals&amp;gt;&lt;br&gt;                    &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&lt;br&gt;                &amp;lt;/goals&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;excludes&amp;gt;&lt;br&gt;                        &amp;lt;exclude&amp;gt;**/it/**&amp;lt;/exclude&amp;gt;&lt;br&gt;                    &amp;lt;/excludes&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/execution&amp;gt;&lt;br&gt;        &amp;lt;/executions&amp;gt;&lt;br&gt;    &amp;lt;/plugin&amp;gt;&lt;br&gt;    &amp;lt;plugin&amp;gt;&lt;br&gt;        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;        &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;version&amp;gt;${maven-failsafe-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;configuration&amp;gt;&lt;br&gt;            &amp;lt;skipITs&amp;gt;${skipTests}&amp;lt;/skipITs&amp;gt;&lt;br&gt;        &amp;lt;/configuration&amp;gt;&lt;br&gt;        &amp;lt;executions&amp;gt;&lt;br&gt;            &amp;lt;execution&amp;gt;&lt;br&gt;                &amp;lt;id&amp;gt;integration-test&amp;lt;/id&amp;gt;&lt;br&gt;                &amp;lt;phase&amp;gt;integration-test&amp;lt;/phase&amp;gt;&lt;br&gt;                &amp;lt;goals&amp;gt;&lt;br&gt;                    &amp;lt;goal&amp;gt;integration-test&amp;lt;/goal&amp;gt;&lt;br&gt;                    &amp;lt;goal&amp;gt;verify&amp;lt;/goal&amp;gt;&lt;br&gt;                &amp;lt;/goals&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;includes&amp;gt;&lt;br&gt;                        &amp;lt;include&amp;gt;**/it/**&amp;lt;/include&amp;gt;&lt;br&gt;                    &amp;lt;/includes&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/execution&amp;gt;&lt;br&gt;        &amp;lt;/executions&amp;gt;&lt;br&gt;    &amp;lt;/plugin&amp;gt;&lt;br&gt;&amp;lt;/plugins&amp;gt;&lt;/pre&gt;&lt;p&gt;Firstly, let’s have a look at the GreetingServiceTest that is used for testing the simple CDI bean GreetingService.&lt;/p&gt;&lt;pre&gt;@ExtendWith(ArquillianExtension.class)&lt;br&gt;public class GreetingServiceTest {&lt;br&gt;    &lt;br&gt;    private final static Logger LOGGER = Logger.getLogger(GreetingServiceTest.class.getName());&lt;br&gt;    &lt;br&gt;    @Deployment&lt;br&gt;    public static WebArchive createDeployment() {&lt;br&gt;        var war = ShrinkWrap.create(WebArchive.class)&lt;br&gt;                .addClass(GreetingMessage.class)&lt;br&gt;                .addClass(GreetingService.class)&lt;br&gt;                .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(&amp;quot;test-web.xml&amp;quot;, &amp;quot;web.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(new File(&amp;quot;src/main/webapp/WEB-INF/jetty-env.xml&amp;quot;), &amp;quot;jetty-env.xml&amp;quot;);&lt;br&gt;        &lt;br&gt;        Deployments.addExtraJars(war);&lt;br&gt;        &lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;war deployment: {0}&amp;quot;, war.toString(true));&lt;br&gt;        return war;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    @Inject&lt;br&gt;    GreetingService service;&lt;br&gt;    &lt;br&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;testing buildGreetingMessage&amp;quot;)&lt;br&gt;    public void should_create_greeting() {&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot; Running test:: GreetingServiceTest#should_create_greeting ... &amp;quot;);&lt;br&gt;        var message = service.buildGreetingMessage(&amp;quot;Jakarta EE&amp;quot;);&lt;br&gt;        assertTrue(message.getMessage().startsWith(&amp;quot;Say Hello to Jakarta EE at &amp;quot;),&lt;br&gt;                &amp;quot;message should start with \&amp;quot;Say Hello to Jakarta EE at \&amp;quot;&amp;quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;As you see, an Arquillian integration test is annotated with @ExtendWith(ArquillianExtension.class), which is a standard JUnit 5 extension.&lt;/p&gt;&lt;p&gt;In an Arquillian test, you have to create a minimal deployment archive via a static @Deployment annotated method. In the @Deployment method, you can prepare the resource that will be packaged and deployed to the target runtime before running test cases.&lt;/p&gt;&lt;p&gt;In the test class, you can inject available beans like a CDI bean, for example, we inject GreetingService here, then in the test method, use the GreetingService bean to verify the functionality.&lt;/p&gt;&lt;p&gt;Open your terminal, and execute the following command to run GreetingServiceTest.&lt;/p&gt;&lt;pre&gt;mvn clean verify -Parq-tomcat-embeded -Dit.test=GreetingServiceTest&lt;/pre&gt;&lt;p&gt;When running an Arquillian test, it will package the deployment resources into a deployable archive, and deploy it to the target container, then run the test in the container, the JUnit client agent will gather the running result through a proxy that interacts with tests in the container.&lt;/p&gt;&lt;p&gt;Let’s move to test GreetingResource.&lt;/p&gt;&lt;pre&gt;@ExtendWith(ArquillianExtension.class)&lt;br&gt;public class GreetingResourceTest {&lt;br&gt;    &lt;br&gt;    private final static Logger LOGGER = Logger.getLogger(GreetingResourceTest.class.getName());&lt;br&gt;    &lt;br&gt;    @Deployment(testable = false)&lt;br&gt;    public static WebArchive createDeployment() {&lt;br&gt;        var war = ShrinkWrap.create(WebArchive.class)&lt;br&gt;                .addClass(GreetingMessage.class)&lt;br&gt;                .addClass(GreetingService.class)&lt;br&gt;                .addClasses(GreetingResource.class)&lt;br&gt;                .addClasses(RestActivator.class)&lt;br&gt;                // Enable CDI (Optional since Java EE 7.0)&lt;br&gt;                .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(&amp;quot;test-web.xml&amp;quot;, &amp;quot;web.xml&amp;quot;)&lt;br&gt;                .addAsWebInfResource(new File(&amp;quot;src/main/webapp/WEB-INF/jetty-env.xml&amp;quot;), &amp;quot;jetty-env.xml&amp;quot;);&lt;br&gt;        &lt;br&gt;        Deployments.addExtraJars(war);&lt;br&gt;        &lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;war deployment: {0}&amp;quot;, war.toString(true));&lt;br&gt;        return war;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    @ArquillianResource&lt;br&gt;    private URL base;&lt;br&gt;    &lt;br&gt;    private Client client;&lt;br&gt;    &lt;br&gt;    @BeforeEach&lt;br&gt;    public void setup() {&lt;br&gt;        LOGGER.info(&amp;quot;call BeforeEach&amp;quot;);&lt;br&gt;        this.client = ClientBuilder.newClient();&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    @AfterEach&lt;br&gt;    public void teardown() {&lt;br&gt;        LOGGER.info(&amp;quot;call AfterEach&amp;quot;);&lt;br&gt;        if (this.client != null) {&lt;br&gt;            this.client.close();&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;Given a name:`JakartaEE` should return `Say Hello to JakartaEE`&amp;quot;)&lt;br&gt;    public void should_create_greeting() throws MalformedURLException {&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot; client: {0}, baseURL: {1}&amp;quot;, new Object[]{client, base});&lt;br&gt;        final var greetingTarget = this.client.target(new URL(this.base, &amp;quot;api/greeting/JakartaEE&amp;quot;).toExternalForm());&lt;br&gt;        try (final Response greetingGetResponse = greetingTarget.request()&lt;br&gt;                .accept(MediaType.APPLICATION_JSON)&lt;br&gt;                .get()) {&lt;br&gt;            assertThat(greetingGetResponse.getStatus()).isEqualTo(200);&lt;br&gt;            assertThat(greetingGetResponse.readEntity(GreetingMessage.class).getMessage())&lt;br&gt;                    .startsWith(&amp;quot;Say Hello to JakartaEE&amp;quot;);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Unlike GreetingServiceTest, to test the functionality of `GreetingResource``, we use Jakarta REST Client API to interact with the HTTP APIs in a client view.&lt;/p&gt;&lt;p&gt;Adding a testable=false attribute in the @Deployment annotation means all tests will be run in client mode.&lt;/p&gt;&lt;p&gt;Alternatively, you can also add a single @RunAsClient on the test method to run it locally.&lt;/p&gt;&lt;p&gt;The @ArquillianResource will inject the base URL of the deployment archive in the container after it is deployed.&lt;/p&gt;&lt;p&gt;Execute the following command to run GreetingServiceTest.&lt;/p&gt;&lt;pre&gt;mvn clean verify -Parq-tomcat-embeded -Dit.test=GreetingResourceTest&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;If a &lt;/em&gt;&lt;em&gt;@Deployment(testable=true) is applied on the deployment method, thus all tests run as client mode, we can NOT inject beans in the test class as the previous example.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Similarly, we can create &lt;em&gt;client mode&lt;/em&gt; tests to verify the functionalities of simple Jakarta Servlet, Jakarta Faces, Jakarta Pages, etc. The complete codes can be found &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;To verify the HTML elements and Ajax interactions in the rendered HTML pages, please check &lt;/em&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-extension-drone&quot;&gt;&lt;em&gt;Arquillian Extension Drone&lt;/em&gt;&lt;/a&gt;&lt;em&gt; and &lt;/em&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-graphene&quot;&gt;&lt;em&gt;Arquillian Graphene&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/blockquote&gt;&lt;h3&gt;Configuring Jetty Embedded Adapter&lt;/h3&gt;&lt;p&gt;Add a new Maven profile for configuring Arquillian Jetty Embedded Adapter.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;arq-jetty-embedded&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;skipTests&amp;gt;false&amp;lt;/skipTests&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-jetty-embedded-11&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${arquillian-jetty.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-annotations&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-plus&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-deploy&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-cdi&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;            &amp;lt;!-- to remove when 11.0.10 released --&amp;gt;&lt;br&gt;            &amp;lt;!-- see &lt;a href=&quot;https://github.com/eclipse/jetty.project/pull/7991&quot;&gt;https://github.com/eclipse/jetty.project/pull/7991&lt;/a&gt; --&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jetty.version}&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty.websocket&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;websocket-jakarta-server&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;apache-jsp&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;1.7.36&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;!-- see: &lt;a href=&quot;https://github.com/arquillian/arquillian-container-jetty/pull/108&quot;&gt;https://github.com/arquillian/arquillian-container-jetty/pull/108&lt;/a&gt; --&amp;gt;&lt;br&gt;        &amp;lt;!--&amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian.testenricher&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-testenricher-cdi-jakarta&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;--&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;Run the previous tests against the arq-jetty-embedded profile, for example.&lt;/p&gt;&lt;pre&gt;mvn clean verify -Parq-jetty-embeded -Dit.test=GreetingResourceTest&lt;/pre&gt;&lt;h3&gt;Configuring Arquillian Weld Embedded&lt;/h3&gt;&lt;p&gt;Arquillian project provides an official extension to test CDI beans in an embedded Weld container.&lt;/p&gt;&lt;p&gt;Create a new Maven profile to configure Arquillian Weld Embedded Adapter, and use maven-failsafe-plugin to filter out the tests of Jakarta Servlet, Jakarta Faces, etc.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;arq-weld&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;properties&amp;gt;&lt;br&gt;        &amp;lt;skipTests&amp;gt;false&amp;lt;/skipTests&amp;gt;&lt;br&gt;    &amp;lt;/properties&amp;gt;&lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;arquillian-weld-embedded&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${arquillian-weld-embedded.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.jboss.weld&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;weld-core-impl&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${weld.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;version&amp;gt;${maven-failsafe-plugin.version}&amp;lt;/version&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;systemPropertyVariables&amp;gt;&lt;br&gt;                        &amp;lt;arquillian.launch&amp;gt;arq-weld&amp;lt;/arquillian.launch&amp;gt;&lt;br&gt;                    &amp;lt;/systemPropertyVariables&amp;gt;&lt;br&gt;                    &amp;lt;excludes&amp;gt;&lt;br&gt;                        &amp;lt;exclude&amp;gt;**/it/GreetingResourceTest*&amp;lt;/exclude&amp;gt;&lt;br&gt;                        &amp;lt;exclude&amp;gt;**/it/GreetingServletTest*&amp;lt;/exclude&amp;gt;&lt;br&gt;                    &amp;lt;/excludes&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;Execute the following command to run the GreetingServiceTest.&lt;/p&gt;&lt;pre&gt;mvn clean verify -Parq-weld -Dit.test=GreetingServiceTest&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;The testing codes of Jakarta Servlet, Jakarta Pages and Jakarta Faces require a Servlet container.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Get the &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate&quot;&gt;complete source codes&lt;/a&gt; from my Github account.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ec2d42947cd&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/testing-jakarta-ee-9-web-application-in-a-servlet-container-with-arquillian-ec2d42947cd&quot;&gt;Testing Jakarta EE 9 Web Application in Servlet Containers with Arquillian&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">Photo by &amp;lt;a href=”https://unsplash.com/@whiterainforest?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&amp;quot;&amp;gt;White.Rainforest ∙ 易雨白林.&amp;lt;/a&amp;gt; on &amp;lt;a href=”https://unsplash.com/s/photos/china-mountain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&amp;quot;&amp;gt;Unsplash&amp;lt;/a&amp;gt;In the last post Building JakartaEE 9 Web Applicaiton with Servlet Container, we have described how to start a Jakarta EE 9 web application with the core Jakarta EE components, including CDI, Jakarta Faces, Jakarta Servlet, Jakarta Pages, Jakarta REST, etc and run it in a Jakarta EE 9 compatible Servlet container. In this post, we will discuss how to test these components in a Servlet Container with the Arquillian testing framework.The Arquillian project provides official support for Apache Tomcat and Eclipse Jetty, for more information please go to Arquillian Container Tomcat and Arquillian Container Jetty. Currently, both projects provide an embedded container adapter that supports the latest Apache Tomcat 10 and Eclipse Jetty 11, but there is no managed and remote adapters available.If you are new to Arquillian, please read the official Getting Started Guides firstly, or explore my previous Arquillian articles on testing Jakarta EE 8 applications and Jakarta EE 9 applications to get to know the basic knowledge of Arquillian.Configuring ArquillianFirstly add Arquillian Core and JUnit BOM to the dependencyManagement section of the project pom.xml file.&amp;lt;dependencyManagement&amp;gt; // ... &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${arquillian-bom.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-jupiter.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/dependencyManagement&amp;gt;Add the following dependencies in the project dependencies section.&amp;lt;dependencies&amp;gt; //... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.protocol&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-protocol-servlet-jakarta&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.shrinkwrap.resolver&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shrinkwrap-resolver-impl-maven&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;You can also add the following testing utility libs to improve your testing codes.&amp;lt;dependencies&amp;gt; //.... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter-params&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hamcrest&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hamcrest&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.assertj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;assertj-core&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;Next, we will configure Arquillian Tomcat Embedded Adapter to run the testing codes against an embedded Apache Tomcat container.Configuring Arquillian Tomcat Embedded AdapterCreate a new Maven profile to centralize all configurations of the Arquillian tomcat embedded adapter.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;arq-tomcat-embedded&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;skipTests&amp;gt;false&amp;lt;/skipTests&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-tomcat-embedded-10&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${arquillian-tomcat.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-embed-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-embed-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/profile&amp;gt;Now we will write some testing codes.Testing Jakarta ComponentsFor simple POJOs, you can write a simple JUnit test to verify the functionality. For example, GreetingMessage is a simple POJO used to assemble a readable greeting message. We can write a simple JUnit test to check if it is working as expected.public class GreetingMessageTest { @Test public void testGreetingMessage() { var message = GreetingMessage.of(&amp;quot;Say Hello to JatartaEE&amp;quot;); assertThat(message.getMessage()).isEqualTo(&amp;quot;Say Hello to JatartaEE&amp;quot;); }}The GreetingService bean itself is just implementing a simple functionality that is used to build a greeting message using the buildGreetingMessage method that accepts an argument to set up the target of greeting. Just like the previous testing example, create a simple JUnit test to verify if it is functional as expected.public class GreetingServiceUnitTest { GreetingService service; @BeforeEach public void setup() { service = new GreetingService(); } @Test public void testGreeting() { var message = service.buildGreetingMessage(&amp;quot;JakartaEE&amp;quot;); assertThat(message.getMessage()).startsWith(&amp;quot;Say Hello to JakartaEE&amp;quot;); }}The Hello bean depends on the GreetingService bean. To test the functionality of Hello in a Unit Test, we can use Mockito to isolate the dependency - GreetingService. In the following HelloTest, we created a mocked object of GreetingService in the tests.public class HelloTest { @ParameterizedTest @MethodSource(&amp;quot;provideQueryCriteria&amp;quot;) public void testCreateMessage(String name, String result) { var service = mock(GreetingService.class); given(service.buildGreetingMessage(name)).willReturn(GreetingMessage.of(&amp;quot;Say Hello to &amp;quot; + name)); var hello = new Hello(service); hello.setName(name); hello.createMessage(); assertThat(hello.getName()).isEqualTo(name); assertThat(hello.getMessage().getMessage()).isEqualTo(result); verify(service, times(1)).buildGreetingMessage(anyString()); verifyNoMoreInteractions(service); } static Stream&amp;lt;Arguments&amp;gt; provideQueryCriteria() { return Stream.of( Arguments.of(&amp;quot;Tomcat&amp;quot;, &amp;quot;Say Hello to Tomcat&amp;quot;), Arguments.of(&amp;quot;JakartaEE&amp;quot;, &amp;quot;Say Hello to JakartaEE&amp;quot;) ); }}We have tested the simple POJOs in unit tests, for other Jakarta EE components, such as Servlet, Jakarta Pages, etc, we have to verify the functionality in a Servlet container, we will write integration tests using Arquillian for this scenario.To run unit tests and integration tests in different phases, we can configure maven-surefire-plugin and maven-failsafe-plugin as the following, and make sure integration tests run in the integration-test phase.&amp;lt;plugins&amp;gt; //... &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-surefire-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;skipTests&amp;gt;${skipTests}&amp;lt;/skipTests&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;default-test&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;exclude&amp;gt;**/it/**&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-failsafe-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;skipITs&amp;gt;${skipTests}&amp;lt;/skipITs&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;integration-test&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;integration-test&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;integration-test&amp;lt;/goal&amp;gt; &amp;lt;goal&amp;gt;verify&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/it/**&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt;&amp;lt;/plugins&amp;gt;Firstly, let’s have a look at the GreetingServiceTest that is used for testing the simple CDI bean GreetingService.@ExtendWith(ArquillianExtension.class)public class GreetingServiceTest { private final static Logger LOGGER = Logger.getLogger(GreetingServiceTest.class.getName()); @Deployment public static WebArchive createDeployment() { var war = ShrinkWrap.create(WebArchive.class) .addClass(GreetingMessage.class) .addClass(GreetingService.class) .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;) .addAsWebInfResource(&amp;quot;test-web.xml&amp;quot;, &amp;quot;web.xml&amp;quot;) .addAsWebInfResource(new File(&amp;quot;src/main/webapp/WEB-INF/jetty-env.xml&amp;quot;), &amp;quot;jetty-env.xml&amp;quot;); Deployments.addExtraJars(war); LOGGER.log(Level.INFO, &amp;quot;war deployment: {0}&amp;quot;, war.toString(true)); return war; } @Inject GreetingService service; @Test @DisplayName(&amp;quot;testing buildGreetingMessage&amp;quot;) public void should_create_greeting() { LOGGER.log(Level.INFO, &amp;quot; Running test:: GreetingServiceTest#should_create_greeting ... &amp;quot;); var message = service.buildGreetingMessage(&amp;quot;Jakarta EE&amp;quot;); assertTrue(message.getMessage().startsWith(&amp;quot;Say Hello to Jakarta EE at &amp;quot;), &amp;quot;message should start with \&amp;quot;Say Hello to Jakarta EE at \&amp;quot;&amp;quot;); }}As you see, an Arquillian integration test is annotated with @ExtendWith(ArquillianExtension.class), which is a standard JUnit 5 extension.In an Arquillian test, you have to create a minimal deployment archive via a static @Deployment annotated method. In the @Deployment method, you can prepare the resource that will be packaged and deployed to the target runtime before running test cases.In the test class, you can inject available beans like a CDI bean, for example, we inject GreetingService here, then in the test method, use the GreetingService bean to verify the functionality.Open your terminal, and execute the following command to run GreetingServiceTest.mvn clean verify -Parq-tomcat-embeded -Dit.test=GreetingServiceTestWhen running an Arquillian test, it will package the deployment resources into a deployable archive, and deploy it to the target container, then run the test in the container, the JUnit client agent will gather the running result through a proxy that interacts with tests in the container.Let’s move to test GreetingResource.@ExtendWith(ArquillianExtension.class)public class GreetingResourceTest { private final static Logger LOGGER = Logger.getLogger(GreetingResourceTest.class.getName()); @Deployment(testable = false) public static WebArchive createDeployment() { var war = ShrinkWrap.create(WebArchive.class) .addClass(GreetingMessage.class) .addClass(GreetingService.class) .addClasses(GreetingResource.class) .addClasses(RestActivator.class) // Enable CDI (Optional since Java EE 7.0) .addAsWebInfResource(EmptyAsset.INSTANCE, &amp;quot;beans.xml&amp;quot;) .addAsWebInfResource(&amp;quot;test-web.xml&amp;quot;, &amp;quot;web.xml&amp;quot;) .addAsWebInfResource(new File(&amp;quot;src/main/webapp/WEB-INF/jetty-env.xml&amp;quot;), &amp;quot;jetty-env.xml&amp;quot;); Deployments.addExtraJars(war); LOGGER.log(Level.INFO, &amp;quot;war deployment: {0}&amp;quot;, war.toString(true)); return war; } @ArquillianResource private URL base; private Client client; @BeforeEach public void setup() { LOGGER.info(&amp;quot;call BeforeEach&amp;quot;); this.client = ClientBuilder.newClient(); } @AfterEach public void teardown() { LOGGER.info(&amp;quot;call AfterEach&amp;quot;); if (this.client != null) { this.client.close(); } } @Test @DisplayName(&amp;quot;Given a name:`JakartaEE` should return `Say Hello to JakartaEE`&amp;quot;) public void should_create_greeting() throws MalformedURLException { LOGGER.log(Level.INFO, &amp;quot; client: {0}, baseURL: {1}&amp;quot;, new Object[]{client, base}); final var greetingTarget = this.client.target(new URL(this.base, &amp;quot;api/greeting/JakartaEE&amp;quot;).toExternalForm()); try (final Response greetingGetResponse = greetingTarget.request() .accept(MediaType.APPLICATION_JSON) .get()) { assertThat(greetingGetResponse.getStatus()).isEqualTo(200); assertThat(greetingGetResponse.readEntity(GreetingMessage.class).getMessage()) .startsWith(&amp;quot;Say Hello to JakartaEE&amp;quot;); } }}Unlike GreetingServiceTest, to test the functionality of `GreetingResource``, we use Jakarta REST Client API to interact with the HTTP APIs in a client view.Adding a testable=false attribute in the @Deployment annotation means all tests will be run in client mode.Alternatively, you can also add a single @RunAsClient on the test method to run it locally.The @ArquillianResource will inject the base URL of the deployment archive in the container after it is deployed.Execute the following command to run GreetingServiceTest.mvn clean verify -Parq-tomcat-embeded -Dit.test=GreetingResourceTestIf a @Deployment(testable=true) is applied on the deployment method, thus all tests run as client mode, we can NOT inject beans in the test class as the previous example.Similarly, we can create client mode tests to verify the functionalities of simple Jakarta Servlet, Jakarta Faces, Jakarta Pages, etc. The complete codes can be found here.To verify the HTML elements and Ajax interactions in the rendered HTML pages, please check Arquillian Extension Drone and Arquillian Graphene.Configuring Jetty Embedded AdapterAdd a new Maven profile for configuring Arquillian Jetty Embedded Adapter.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;arq-jetty-embedded&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;skipTests&amp;gt;false&amp;lt;/skipTests&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-jetty-embedded-11&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${arquillian-jetty.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-annotations&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-plus&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-deploy&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-cdi&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;!-- to remove when 11.0.10 released --&amp;gt; &amp;lt;!-- see https://github.com/eclipse/jetty.project/pull/7991 --&amp;gt; &amp;lt;version&amp;gt;${jetty.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty.websocket&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;websocket-jakarta-server&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;apache-jsp&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.36&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- see: https://github.com/arquillian/arquillian-container-jetty/pull/108 --&amp;gt; &amp;lt;!--&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.testenricher&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-testenricher-cdi-jakarta&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;--&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/profile&amp;gt;Run the previous tests against the arq-jetty-embedded profile, for example.mvn clean verify -Parq-jetty-embeded -Dit.test=GreetingResourceTestConfiguring Arquillian Weld EmbeddedArquillian project provides an official extension to test CDI beans in an embedded Weld container.Create a new Maven profile to configure Arquillian Weld Embedded Adapter, and use maven-failsafe-plugin to filter out the tests of Jakarta Servlet, Jakarta Faces, etc.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;arq-weld&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;skipTests&amp;gt;false&amp;lt;/skipTests&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.arquillian.container&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;arquillian-weld-embedded&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${arquillian-weld-embedded.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.weld&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;weld-core-impl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${weld.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-failsafe-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;systemPropertyVariables&amp;gt; &amp;lt;arquillian.launch&amp;gt;arq-weld&amp;lt;/arquillian.launch&amp;gt; &amp;lt;/systemPropertyVariables&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;exclude&amp;gt;**/it/GreetingResourceTest*&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;**/it/GreetingServletTest*&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;&amp;lt;/profile&amp;gt;Execute the following command to run the GreetingServiceTest.mvn clean verify -Parq-weld -Dit.test=GreetingServiceTestThe testing codes of Jakarta Servlet, Jakarta Pages and Jakarta Faces require a Servlet container.Get the complete source codes from my Github account.Testing Jakarta EE 9 Web Application in Servlet Containers with Arquillian was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Building Jakarta EE 9 Web application with Servlet Containers</title><link href="/blog/2022/building-jakarta-ee-9-web-application-with-servlet-containers/" rel="alternate" type="text/html" title="Building Jakarta EE 9 Web application with Servlet Containers" /><published>2022-06-12T00:00:00+00:00</published><updated>2022-06-12T00:00:00+00:00</updated><id>/blog/2022/building-jakarta-ee-9-web-application-with-servlet-containers</id><content type="html" xml:base="/blog/2022/building-jakarta-ee-9-web-application-with-servlet-containers/">&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*HVdOerzrVL2J9vXxELre0w.jpeg&quot; /&gt;&lt;/figure&gt;&lt;p&gt;In Jakarta EE world, a lot of Java developers have built Java Web applications, but instead of using a full-fledged Application Servers, such as Payara, WildFly and WebLogic as production environments, they preferred to deploy into and run on a light-weight Servlet container, such as Apache Tomcat, Eclipse Jetty.&lt;/p&gt;&lt;p&gt;In the past years I have prepared &lt;a href=&quot;https://github.com/hantsy/jakartaee8-starter-boilerplate&quot;&gt;jakartaee8-starter-boilerplate&lt;/a&gt; and &lt;a href=&quot;https://github.com/hantsy/jakartaee9-starter-boilerplate&quot;&gt;jakartaee9-starter-boilerplate&lt;/a&gt; to help develpers to start a new Jakarta EE project and deploy into the popular application servers. The newly created &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate&quot;&gt;jakartaee9-servlet-starter-boilerplate&lt;/a&gt; project provides a template to create Jakarta EE web applications and deploy to the popular Servlet containers, esp. Apache Tomcat 10.x and Eclipse Jetty 11.x. In this project, I have integrated the following popular Jakarta EE compoenents.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CDI 3.0 (Weld 4.0)&lt;/li&gt;&lt;li&gt;Jakarta REST 3.0(Jersey 3.0)&lt;/li&gt;&lt;li&gt;Jakarta Server Faces 3.0(Mojarra 3.0)&lt;/li&gt;&lt;li&gt;And transitive dependencies of above features, incuding Jakarta EL, Jarkarta Json Processing, Jakarta Json Binding, Jakarta Validation(Hibernate Validator), etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Nowadays the most popular Servlet containers, such as Apache Tomcat, Eclipse Jetty, etc. have built-in Jakarta Servlet, Jakarta Server Pages, JSTL, Jakarta EL and Jakarta WebSocket supports.&lt;/p&gt;&lt;h3&gt;Prerequisites&lt;/h3&gt;&lt;p&gt;Make sure you have installed the following softwares.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;JDK 11 or 17&lt;/li&gt;&lt;li&gt;Apache Maven 3.8&lt;/li&gt;&lt;li&gt;Apache Tomcat 10.x and Eclipse Jetty 11.x&lt;/li&gt;&lt;li&gt;Intellij IDEA Communnity Edition or VSCode + Java Pack&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let’s explore the integrated features in the &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate&quot;&gt;jakartaee9-servlet-starter-boilerplate&lt;/a&gt; repository.&lt;/p&gt;&lt;h3&gt;Configuration&lt;/h3&gt;&lt;p&gt;To prepare a project used in the next stpes, clone the source codes of &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate&quot;&gt;jakartaee9-servlet-starter-boilerplate&lt;/a&gt; repository or create a new Maven webapp through &lt;a href=&quot;https://maven.apache.org/archetypes/maven-archetype-webapp/&quot;&gt;Maven Webapp Archetype&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Jakarta Servlet 5.0&lt;/h3&gt;&lt;p&gt;Apache Tomcat and Eclipse Jetty has built-in Jakarta Servlet, Jakarta Pages, Jakarta WebSocket implementation in the distribution bundle.&lt;/p&gt;&lt;p&gt;But in the development stage, you could use these APIs in your project codes.&lt;/p&gt;&lt;p&gt;Delcare jakarta.jakartaee-bom in the the dependencyManagement section.&lt;/p&gt;&lt;pre&gt;&amp;lt;!-- &lt;a href=&quot;https://mvnrepository.com/artifact/jakarta.platform/jakarta.jakartaee-bom&quot;&gt;https://mvnrepository.com/artifact/jakarta.platform/jakarta.jakartaee-bom&lt;/a&gt; --&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;jakarta.platform&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.jakartaee-bom&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;9.1.0&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;And add the following dependencies in the project dependencies section.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;jakarta.servlet&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.servlet-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;5.0.0&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.el&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${jakarta.el.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt; &amp;lt;!-- Optional, only when &amp;lt;f:websocket&amp;gt; is used. --&amp;gt;&lt;br&gt;&amp;lt;!-- dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.json&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${jakarta.json.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency --&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;!-- Optional, only when &amp;lt;f:validateBean&amp;gt; or &amp;lt;f:validateWholeBean&amp;gt; is used. --&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.hibernate.validator&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${hibernate-validator.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;The jakarta.json and hibernate-validator are optional, add them when they are required.&lt;/p&gt;&lt;p&gt;Create an empty &lt;em&gt;src/main/webapp/WEB-INF/web.xml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;web-app version=&amp;quot;5.0&amp;quot;&lt;br&gt;         xmlns=&amp;quot;https://jakarta.ee/xml/ns/jakartaee&amp;quot;&lt;br&gt;         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;         xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&amp;quot;&amp;gt;&lt;br&gt;&amp;lt;/web-app&amp;gt;&lt;/pre&gt;&lt;p&gt;Note the XML namespace are updated to use [https://jakarta.ee/xml/ns/jakartaee](https://jakarta.ee/xml/ns/jakartaee) in Jakarta EE 9.&lt;/p&gt;&lt;h3&gt;CDI 3.0&lt;/h3&gt;&lt;p&gt;Weld 4.0 is compatable with CDI 3.0 specification, and Weld works with Apache Tomcat and Eclipse Jetty.&lt;/p&gt;&lt;p&gt;Add the following dependency.&lt;/p&gt;&lt;pre&gt;&amp;lt;!-- Weld for CDI support --&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.jboss.weld.servlet&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;weld-servlet-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${weld.version}&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;exclusions&amp;gt;&lt;br&gt;        &amp;lt;exclusion&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;        &amp;lt;/exclusion&amp;gt;&lt;br&gt;    &amp;lt;/exclusions&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;Create an empty &lt;em&gt;src/main/webapp/WEB-INF/beans.xml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;beans xmlns=&amp;quot;https://jakarta.ee/xml/ns/jakartaee&amp;quot;&lt;br&gt;       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;       xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd&amp;quot;&lt;br&gt;       version=&amp;quot;3.0&amp;quot;&amp;gt;&lt;br&gt;&amp;lt;/beans&amp;gt;&lt;/pre&gt;&lt;p&gt;To make BeanManager avaiable via JNDI lookup. For Apache Tomcat, create a Resource in the application &lt;em&gt;context.xml&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Create a src/main/webapp/META-INF/context.xml.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;Context path=&amp;quot;/jakartaee9-servlet-starter-boilerplate&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;Resource name=&amp;quot;BeanManager&amp;quot;&lt;br&gt;            auth=&amp;quot;Container&amp;quot;&lt;br&gt;            type=&amp;quot;jakarta.enterprise.inject.spi.BeanManager&amp;quot;&lt;br&gt;            factory=&amp;quot;org.jboss.weld.resources.ManagerObjectFactory&amp;quot;/&amp;gt;&lt;br&gt;&amp;lt;/Context&amp;gt;&lt;/pre&gt;&lt;p&gt;The path is the application context path at runtime. Here it creates a Resource BeanManager.&lt;/p&gt;&lt;p&gt;For Eclipse Jetty, create a &lt;em&gt;src/main/webapp/WEB-INF/jetty-env.xml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;!DOCTYPE Configure PUBLIC &amp;quot;-//Jetty//Configure//EN&amp;quot; &amp;quot;https://www.eclipse.org/jetty/configure_10_0.dtd&amp;quot;&amp;gt;&lt;br&gt;&amp;lt;Configure id=&amp;quot;wac&amp;quot; class=&amp;quot;org.eclipse.jetty.webapp.WebAppContext&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;New id=&amp;quot;BeanManager&amp;quot; class=&amp;quot;org.eclipse.jetty.plus.jndi.Resource&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;Arg&amp;gt;&lt;br&gt;            &amp;lt;Ref refid=&amp;quot;wac&amp;quot;/&amp;gt;&lt;br&gt;        &amp;lt;/Arg&amp;gt;&lt;br&gt;        &amp;lt;Arg&amp;gt;BeanManager&amp;lt;/Arg&amp;gt;&lt;br&gt;        &amp;lt;Arg&amp;gt;&lt;br&gt;            &amp;lt;New class=&amp;quot;javax.naming.Reference&amp;quot;&amp;gt;&lt;br&gt;                &amp;lt;Arg&amp;gt;jakarta.enterprise.inject.spi.BeanManager&amp;lt;/Arg&amp;gt;&lt;br&gt;                &amp;lt;Arg&amp;gt;org.jboss.weld.resources.ManagerObjectFactory&amp;lt;/Arg&amp;gt;&lt;br&gt;                &amp;lt;Arg/&amp;gt;&lt;br&gt;            &amp;lt;/New&amp;gt;&lt;br&gt;        &amp;lt;/Arg&amp;gt;&lt;br&gt;    &amp;lt;/New&amp;gt;&lt;br&gt;&amp;lt;/Configure&amp;gt;&lt;/pre&gt;&lt;p&gt;Add resource reference in the &lt;em&gt;web.xml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;resource-env-ref&amp;gt;&lt;br&gt;    &amp;lt;resource-env-ref-name&amp;gt;BeanManager&amp;lt;/resource-env-ref-name&amp;gt;&lt;br&gt;    &amp;lt;resource-env-ref-type&amp;gt;&lt;br&gt;        jakarta.enterprise.inject.spi.BeanManager&lt;br&gt;    &amp;lt;/resource-env-ref-type&amp;gt;&lt;br&gt;&amp;lt;/resource-env-ref&amp;gt;&lt;/pre&gt;&lt;h3&gt;Jakarta Rest(Jaxrs) 3.0&lt;/h3&gt;&lt;p&gt;Jersey was the default JAX-RS implementation in Glassfish, now it is a standalone projet under Eclipse EE4J project. Besides, other popular JAX-RS implementations including Apache CXF, JBoss RestEasy, etc.&lt;/p&gt;&lt;p&gt;Add jersey-bom in the dependencyManagement section.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-bom&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt;&lt;br&gt;    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;br&gt;    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;Add the following dependencies.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey.inject&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-hk2&amp;lt;/artifactId&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;!-- see: &lt;a href=&quot;https://github.com/eclipse-ee4j/jersey/blob/3.x/examples/cdi-webapp/pom.xml#L142&quot;&gt;https://github.com/eclipse-ee4j/jersey/blob/3.x/examples/cdi-webapp/pom.xml#L142&lt;/a&gt; --&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext.cdi&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-cdi1x&amp;lt;/artifactId&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext.cdi&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-cdi1x-servlet&amp;lt;/artifactId&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext.cdi&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-cdi1x-ban-custom-hk2-binding&amp;lt;/artifactId&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jersey-media-json-binding&amp;lt;/artifactId&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;Jersey 3.0 is still dependent on HK2 which a small IOC container, and jersey-media-json-binding provides JSON searialzation and desearialization through Jakarta JSON binding.&lt;/p&gt;&lt;p&gt;The Jersey support will be initialized when the Servlet container is starting up.&lt;/p&gt;&lt;p&gt;Similar to a general Jakarta EE application, add a simple Application class to activate Jakarta REST.&lt;/p&gt;&lt;pre&gt;@ApplicationPath(&amp;quot;/api&amp;quot;)&lt;br&gt;public class RestActivator extends Application {&lt;br&gt;    @Override&lt;br&gt;    public Set&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; getClasses() {&lt;br&gt;        return Set.of(GreetingResource.class);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Jakarta Server Faces 4.0&lt;/h3&gt;&lt;p&gt;Mojarra is the most popular JSF implementation, another popular one is Apache MyFaces.&lt;/p&gt;&lt;pre&gt;&amp;lt;!-- Jakarta Faces --&amp;gt;&lt;br&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;jakarta.faces&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${jakarta.faces.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;Add an empty &lt;em&gt;/src/main/webapp/WEB-INF/faces-config.xml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;br&gt;&amp;lt;faces-config&lt;br&gt;        xmlns=&amp;quot;https://jakarta.ee/xml/ns/jakartaee&amp;quot;&lt;br&gt;        xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;        xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-facesconfig_3_0.xsd&amp;quot;&lt;br&gt;        version=&amp;quot;3.0&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;!-- Put any faces config here. --&amp;gt;&lt;br&gt;&amp;lt;/faces-config&amp;gt;&lt;/pre&gt;&lt;p&gt;Since JSF 2.3, it add some CDI compatible features, such as the new scopes, etc. To enable the new features, create a simple configuration class to activate it.&lt;/p&gt;&lt;pre&gt;@FacesConfig(version = Version.JSF_2_3)&lt;br&gt;@ApplicationScoped&lt;br&gt;public class FacesCdiActivator {&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Examples&lt;/h3&gt;&lt;p&gt;Next let’s explore some examples of these specifications.&lt;/p&gt;&lt;h3&gt;Jakarta CDI Example&lt;/h3&gt;&lt;p&gt;The following example is a simple CDI bean to build a greeting messsage.&lt;/p&gt;&lt;pre&gt;@ApplicationScoped&lt;br&gt;public class GreetingService {&lt;br&gt;    private static final Logger LOGGER = Logger.getLogger(GreetingService.class.getName());&lt;br&gt;    &lt;br&gt;    public GreetingMessage buildGreetingMessage(String name) {&lt;br&gt;        var message = GreetingMessage.of(&amp;quot;Say Hello to &amp;quot; + name + &amp;quot; at &amp;quot; + LocalDateTime.now());&lt;br&gt;        LOGGER.log(Level.INFO, &amp;quot;build message: {0}&amp;quot;, message);&lt;br&gt;        return message;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The GreetingMessage is a POJO class.&lt;/p&gt;&lt;pre&gt;@SuppressWarnings(&amp;quot;serial&amp;quot;)&lt;br&gt;public class GreetingMessage implements Serializable {&lt;/pre&gt;&lt;pre&gt;    private String message;&lt;/pre&gt;&lt;pre&gt;    public static GreetingMessage of(String s) {&lt;br&gt;        final var message = new GreetingMessage();&lt;br&gt;        message.setMessage(s);&lt;br&gt;        return message;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public String getMessage() {&lt;br&gt;        return message;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public void setMessage(String message) {&lt;br&gt;        this.message = message;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    @Override&lt;br&gt;    public String toString() {&lt;br&gt;        return &amp;quot;GreetingMessage{&amp;quot; +&lt;br&gt;                &amp;quot;message=&amp;#39;&amp;quot; + message + &amp;#39;\&amp;#39;&amp;#39; +&lt;br&gt;                &amp;#39;}&amp;#39;;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Jakarta Servlet Example&lt;/h3&gt;&lt;p&gt;In this Servlet class, we injected the existing GreetingService to handle the message.&lt;/p&gt;&lt;pre&gt;@WebServlet(urlPatterns = &amp;quot;/GreetingServlet&amp;quot;)&lt;br&gt;public class GreetingServlet extends HttpServlet {&lt;br&gt;    private static final String PAGE_HEADER = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Jakarta Servlet Example&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot;;&lt;br&gt;    private static final String PAGE_FOOTER = &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;;&lt;br&gt;    &lt;br&gt;    @Inject&lt;br&gt;    private GreetingService greetingService;&lt;br&gt;    &lt;br&gt;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {&lt;br&gt;        var name = req.getParameter(&amp;quot;name&amp;quot;);&lt;br&gt;        resp.setContentType(&amp;quot;text/html&amp;quot;);&lt;br&gt;        var writer = resp.getWriter();&lt;br&gt;        writer.println(PAGE_HEADER);&lt;br&gt;        &lt;br&gt;        // write message to http response&lt;br&gt;        writer.println(&amp;quot;&amp;lt;h1&amp;gt; Hello Servlet &amp;lt;/h1&amp;gt;&amp;quot;);&lt;br&gt;        writer.println(&amp;quot;&amp;lt;p&amp;gt;&amp;quot; + greetingService.buildGreetingMessage(name) + &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;);&lt;br&gt;        &lt;br&gt;        writer.println(PAGE_FOOTER);&lt;br&gt;        writer.close();&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Jakarta Servlet and Pages Example&lt;/h3&gt;&lt;p&gt;Refactor the above the example, split page view part into a standalone Pages file.&lt;/p&gt;&lt;pre&gt;@WebServlet(urlPatterns = &amp;quot;/GreetingPagesServlet&amp;quot;)&lt;br&gt;public class GreetingPagesServlet extends HttpServlet {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    private GreetingService greetingService;&lt;/pre&gt;&lt;pre&gt;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {&lt;br&gt;        var name = req.getParameter(&amp;quot;name&amp;quot;);&lt;br&gt;        var message = greetingService.buildGreetingMessage(name);&lt;br&gt;        req.setAttribute(&amp;quot;hello&amp;quot;, message);&lt;br&gt;        req.getRequestDispatcher(&amp;quot;/hello-pages.jspx&amp;quot;).forward(req, resp);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Put the message object into request attribute, in the pages view, it can be read from requestScope directive.&lt;/p&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;br&gt;&amp;lt;jsp:root xmlns:jsp=&amp;quot;http://java.sun.com/JSP/Page&amp;quot;&lt;br&gt;          xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;br&gt;          version=&amp;quot;2.0&amp;quot;&amp;gt;&lt;br&gt;    &amp;lt;jsp:directive.page contentType=&amp;quot;text/html; charset=UTF-8&amp;quot;&lt;br&gt;                        pageEncoding=&amp;quot;UTF-8&amp;quot;&lt;br&gt;                        session=&amp;quot;false&amp;quot;/&amp;gt;&lt;br&gt;    &amp;lt;jsp:output omit-xml-declaration=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;    &amp;lt;!-- make it HTML 5 declaration compatiable --&amp;gt;&lt;br&gt;    &amp;lt;![CDATA[&amp;lt;!DOCTYPE html&amp;gt;]]&amp;gt;&lt;br&gt;    &amp;lt;html&amp;gt;&lt;br&gt;    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Jakarta Server Pages Example&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;br&gt;    &amp;lt;body&amp;gt;&lt;br&gt;        &amp;lt;h1&amp;gt;Hello Pages&amp;lt;/h1&amp;gt;&lt;br&gt;        &amp;lt;p&amp;gt;${requestScope.hello.message}&amp;lt;/p&amp;gt;&lt;br&gt;    &amp;lt;/body&amp;gt;&lt;br&gt;    &amp;lt;/html&amp;gt;&lt;br&gt;&amp;lt;/jsp:root&amp;gt;&lt;/pre&gt;&lt;h3&gt;Jakarta Faces Example&lt;/h3&gt;&lt;p&gt;Create a Jakarta Faces backend bean, it is a CDI bean.&lt;/p&gt;&lt;pre&gt;@Named&lt;br&gt;@RequestScoped&lt;br&gt;public class Hello {&lt;br&gt;    &lt;br&gt;    private String name;&lt;br&gt;    private GreetingMessage message;&lt;br&gt;    &lt;br&gt;    @Inject&lt;br&gt;    private GreetingService greetingService;&lt;br&gt;    &lt;br&gt;    public Hello() {&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    public Hello(GreetingService greetingService) {&lt;br&gt;        this.greetingService = greetingService;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    public void createMessage() {&lt;br&gt;        message = greetingService.buildGreetingMessage(name);&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    public String getName() {&lt;br&gt;        return name;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    public void setName(String name) {&lt;br&gt;        this.name = name;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    public GreetingMessage getMessage() {&lt;br&gt;        return message;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Let’s have a look at the &lt;em&gt;hello.xhtml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&lt;br&gt;      xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;br&gt;      xmlns:f=&amp;quot;http://xmlns.jcp.org/jsf/core&amp;quot;&lt;br&gt;      xmlns:jsf=&amp;quot;http://xmlns.jcp.org/jsf&amp;quot;&lt;br&gt;      xmlns:h=&amp;quot;http://xmlns.jcp.org/jsf/html&amp;quot;&amp;gt;&lt;br&gt;&amp;lt;f:view&amp;gt;&lt;br&gt;    &amp;lt;h:head&amp;gt;&lt;br&gt;        &amp;lt;title&amp;gt;Hello, World!&amp;lt;/title&amp;gt;&lt;br&gt;    &amp;lt;/h:head&amp;gt;&lt;br&gt;    &amp;lt;h:body&amp;gt;&lt;br&gt;        &amp;lt;h:form prependId=&amp;quot;false&amp;quot;&amp;gt;&lt;br&gt;            &amp;lt;label jsf:for=&amp;quot;name&amp;quot; jsf:required=&amp;quot;true&amp;quot;&amp;gt;Enter your name:&amp;lt;/label&amp;gt;&lt;br&gt;            &amp;lt;input type=&amp;quot;text&amp;quot;&lt;br&gt;                   jsf:id=&amp;quot;name&amp;quot;&lt;br&gt;                   jsf:value=&amp;quot;#{hello.name}&amp;quot;&lt;br&gt;                   jsf:required=&amp;quot;true&amp;quot;&lt;br&gt;                   jsf:requiredMessage=&amp;quot;Name is required.&amp;quot;&lt;br&gt;                   placeholder=&amp;quot;Type your name here...&amp;quot;&lt;br&gt;            /&amp;gt;&lt;br&gt;            &amp;lt;h:message for=&amp;quot;name&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;br/&amp;gt;&lt;br&gt;            &amp;lt;input type=&amp;quot;submit&amp;quot; jsf:id=&amp;quot;submit&amp;quot; value=&amp;quot;Say Hello&amp;quot;  jsf:action=&amp;quot;#{hello.createMessage()}&amp;quot;&amp;gt;&lt;br&gt;                &amp;lt;f:ajax execute=&amp;quot;@form&amp;quot; render=&amp;quot;@form&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;/input&amp;gt;&lt;br&gt;            &amp;lt;br/&amp;gt;&lt;br&gt;            &amp;lt;p id=&amp;quot;message&amp;quot;&amp;gt;#{hello.message}&amp;lt;/p&amp;gt;&lt;br&gt;        &amp;lt;/h:form&amp;gt;&lt;br&gt;    &amp;lt;/h:body&amp;gt;&lt;br&gt;&amp;lt;/f:view&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;h3&gt;Jakarta REST Example&lt;/h3&gt;&lt;p&gt;In this example, we reuse the GreetingService bean to handle the greeting message.&lt;/p&gt;&lt;pre&gt;@Path(&amp;quot;greeting&amp;quot;)&lt;br&gt;@RequestScoped&lt;br&gt;public class GreetingResource {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    private GreetingService greetingService;&lt;/pre&gt;&lt;pre&gt;    @GET&lt;br&gt;    @Path(&amp;quot;{name}&amp;quot;)&lt;br&gt;    @Produces(MediaType.APPLICATION_JSON)&lt;br&gt;    public Response greeting(@PathParam(&amp;quot;name&amp;quot;) String name) {&lt;br&gt;        return ok(this.greetingService.buildGreetingMessage(name)).build();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Deploy and Run the application&lt;/h3&gt;&lt;p&gt;To deploy an application to the production environment, firstly we can package the built files into a war archive, and put it into a deployable folder under the servlet container. Then start up the servlet container, the war file will be detected and deployed into the servlet container.&lt;/p&gt;&lt;p&gt;To simplify the deployment in the development stage, we use maven plugins to complete the work.&lt;/p&gt;&lt;h3&gt;Deploying to Apache Tomcat&lt;/h3&gt;&lt;p&gt;To deploy the application into Apache Tomcat, we use cargo-maven3-plugin.&lt;/p&gt;&lt;pre&gt;&amp;lt;build&amp;gt;&lt;br&gt;    &amp;lt;plugins&amp;gt;&lt;br&gt;        ...&lt;br&gt;        &amp;lt;plugin&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.codehaus.cargo&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;cargo-maven3-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;configuration&amp;gt;&lt;br&gt;                &amp;lt;container&amp;gt;&lt;br&gt;                    &amp;lt;containerId&amp;gt;tomcat10x&amp;lt;/containerId&amp;gt;&lt;br&gt;                    &amp;lt;artifactInstaller&amp;gt;&lt;br&gt;                        &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt;&lt;br&gt;                        &amp;lt;artifactId&amp;gt;tomcat&amp;lt;/artifactId&amp;gt;&lt;br&gt;                        &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt;&lt;br&gt;                    &amp;lt;/artifactInstaller&amp;gt;&lt;br&gt;                &amp;lt;/container&amp;gt;&lt;/pre&gt;&lt;pre&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;properties&amp;gt;&lt;br&gt;                        &amp;lt;!-- &amp;lt;cargo.servlet.port&amp;gt;8080&amp;lt;/cargo.servlet.port&amp;gt;--&amp;gt;&lt;br&gt;                        &amp;lt;cargo.logging&amp;gt;low&amp;lt;/cargo.logging&amp;gt;&lt;br&gt;                    &amp;lt;/properties&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/configuration&amp;gt;&lt;br&gt;        &amp;lt;/plugin&amp;gt;&lt;br&gt;    &amp;lt;/plugins&amp;gt;&lt;br&gt;&amp;lt;/build&amp;gt;&lt;/pre&gt;&lt;p&gt;The cargo-maven3-plugin controls the lifecyle of Tomcat starting and stopping.&lt;/p&gt;&lt;p&gt;Run the following command to run application on Tomcat.&lt;/p&gt;&lt;pre&gt;mvn clean package cargo:run&lt;/pre&gt;&lt;p&gt;When it is started, open your browser, check the examples we have created above.&lt;/p&gt;&lt;p&gt;Go to &lt;a href=&quot;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/GreetingServlet?name=Hantsy&quot;&gt;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/GreetingServlet?name=Hantsy&lt;/a&gt; to view the Servlet example.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/863/0*fm3DjmDLkCHgu4GI.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Open &lt;a href=&quot;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/GreetingPagesServlet?name=Hantsy&quot;&gt;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/GreetingPagesServlet?name=Hantsy&lt;/a&gt; to see the result of Jakarta Server Pages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/930/0*B3rCzV3FDWT9Md1Z.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Navigate to &lt;a href=&quot;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/hello.xhtml&quot;&gt;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/hello.xhtml&lt;/a&gt; and input name, and click the Greeting button, you will see the following result.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/773/0*7dItPMcjb1WayHOG.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Access &lt;a href=&quot;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/api/greeting/Hantsy&quot;&gt;http://localhost:8080/jakartaee9-servlet-starter-boilerplate/api/greeting/Hantsy&lt;/a&gt; in your browser or using curl command, you will see the following result.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/755/0*ptupU9sXJxnmKUQq.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Similarly, we can also configure cargo to use Eclipse Jetty as servlet container. But Eclipse Jetty provides an official maven plugin for deploying applications into Jetty servers.&lt;/p&gt;&lt;h3&gt;Deploying to Eclipse Jetty&lt;/h3&gt;&lt;p&gt;In Jetty 11.x, Jetty maven plugin was refactored, and provides 3 deploy modes in the new pluign.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;EMBED&lt;/li&gt;&lt;li&gt;FORKED&lt;/li&gt;&lt;li&gt;EXTERNAL&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The default mode is EMBED which is similar to running the simplest jetty:run goal in the previous version.&lt;/p&gt;&lt;p&gt;The FORKED mode uses a forked thread to run the application.&lt;/p&gt;&lt;p&gt;The EXTERNAL mode runs the application on an external standalone Jetty server.&lt;/p&gt;&lt;h4&gt;Deploying to an Embedded Jetty Server&lt;/h4&gt;&lt;p&gt;Configure jetty maven plugin and use EMBED mode.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;jetty-embed&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;deployMode&amp;gt;EMBED&amp;lt;/deployMode&amp;gt;&lt;br&gt;                    &amp;lt;useProvidedScope&amp;gt;true&amp;lt;/useProvidedScope&amp;gt;&lt;br&gt;                    &amp;lt;httpConnector&amp;gt;&lt;br&gt;                        &amp;lt;port&amp;gt;9090&amp;lt;/port&amp;gt;&lt;br&gt;                    &amp;lt;/httpConnector&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.json&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jakarta.json.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-plus&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-annotations&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jetty-cdi&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jetty.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;1.7.36&amp;lt;/version&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;There is useProvidedScope option. When it is true, it will add Maven &lt;em&gt;provided&lt;/em&gt; scoped dependencies to the container classpath and run the application, else it will use a isolated application classpath to run the application.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Here we have to set it to true, if it is false, it will fail to run our application.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Run the following command to deploy the application into an embedded Jetty.&lt;/p&gt;&lt;pre&gt;mvn clean jetty:run -Pjetty-embed&lt;/pre&gt;&lt;p&gt;You will see a lot of warning of duplicated classes, due to some duplicated artifacts in the containter classpath.&lt;/p&gt;&lt;h4&gt;Deploying to an External Jetty Server&lt;/h4&gt;&lt;p&gt;Create a new Maven profile for this purpose.&lt;/p&gt;&lt;pre&gt;&amp;lt;profile&amp;gt;&lt;br&gt;    &amp;lt;id&amp;gt;jetty-external&amp;lt;/id&amp;gt;&lt;br&gt;    &amp;lt;build&amp;gt;&lt;br&gt;        &amp;lt;plugins&amp;gt;&lt;br&gt;            &amp;lt;plugin&amp;gt;&lt;br&gt;                &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&lt;br&gt;                &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br&gt;                &amp;lt;configuration&amp;gt;&lt;br&gt;                    &amp;lt;deployMode&amp;gt;EXTERNAL&amp;lt;/deployMode&amp;gt;&lt;br&gt;                    &amp;lt;webApp&amp;gt;&lt;br&gt;                        &amp;lt;contextPath&amp;gt;/${project.artifactId}&amp;lt;/contextPath&amp;gt;&lt;br&gt;                    &amp;lt;/webApp&amp;gt;&lt;br&gt;                    &amp;lt;jettyHome&amp;gt;${env.JETTY_HOME}&amp;lt;/jettyHome&amp;gt;&lt;br&gt;                    &amp;lt;modules&amp;gt;jdni,jsp,servlet,glassfish-jstl,websocket-jakarta,cdi-decorate&amp;lt;/modules&amp;gt;&lt;br&gt;                &amp;lt;/configuration&amp;gt;&lt;br&gt;            &amp;lt;/plugin&amp;gt;&lt;br&gt;        &amp;lt;/plugins&amp;gt;&lt;br&gt;    &amp;lt;/build&amp;gt;&lt;br&gt;    &amp;lt;dependencies&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.json&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;${jakarta.json.version}&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;        &amp;lt;dependency&amp;gt;&lt;br&gt;            &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt;&lt;br&gt;            &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt;&lt;br&gt;            &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt;&lt;br&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br&gt;        &amp;lt;/dependency&amp;gt;&lt;br&gt;    &amp;lt;/dependencies&amp;gt;&lt;br&gt;&amp;lt;/profile&amp;gt;&lt;/pre&gt;&lt;p&gt;Make sure you have downloaded a copy of Eclipse Jetty, and create an system environment variable JETTY_HOME and set it to the location of Eclipse Jetty root folder.&lt;/p&gt;&lt;p&gt;Run the following command to deploy the application into the standalone Jetty server.&lt;/p&gt;&lt;pre&gt;mvn clean jetty:run -Pjetty-external&lt;/pre&gt;&lt;p&gt;Check &lt;a href=&quot;https://github.com/hantsy/jakartaee9-servlet-starter-boilerplate&quot;&gt;the complete example codes&lt;/a&gt; from My Github.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b3acc50c8464&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/building-jakarta-ee-9-web-application-with-servlet-containers-b3acc50c8464&quot;&gt;Building Jakarta EE 9 Web application with Servlet Containers&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">In Jakarta EE world, a lot of Java developers have built Java Web applications, but instead of using a full-fledged Application Servers, such as Payara, WildFly and WebLogic as production environments, they preferred to deploy into and run on a light-weight Servlet container, such as Apache Tomcat, Eclipse Jetty.In the past years I have prepared jakartaee8-starter-boilerplate and jakartaee9-starter-boilerplate to help develpers to start a new Jakarta EE project and deploy into the popular application servers. The newly created jakartaee9-servlet-starter-boilerplate project provides a template to create Jakarta EE web applications and deploy to the popular Servlet containers, esp. Apache Tomcat 10.x and Eclipse Jetty 11.x. In this project, I have integrated the following popular Jakarta EE compoenents.CDI 3.0 (Weld 4.0)Jakarta REST 3.0(Jersey 3.0)Jakarta Server Faces 3.0(Mojarra 3.0)And transitive dependencies of above features, incuding Jakarta EL, Jarkarta Json Processing, Jakarta Json Binding, Jakarta Validation(Hibernate Validator), etc.Nowadays the most popular Servlet containers, such as Apache Tomcat, Eclipse Jetty, etc. have built-in Jakarta Servlet, Jakarta Server Pages, JSTL, Jakarta EL and Jakarta WebSocket supports.PrerequisitesMake sure you have installed the following softwares.JDK 11 or 17Apache Maven 3.8Apache Tomcat 10.x and Eclipse Jetty 11.xIntellij IDEA Communnity Edition or VSCode + Java PackLet’s explore the integrated features in the jakartaee9-servlet-starter-boilerplate repository.ConfigurationTo prepare a project used in the next stpes, clone the source codes of jakartaee9-servlet-starter-boilerplate repository or create a new Maven webapp through Maven Webapp Archetype.Jakarta Servlet 5.0Apache Tomcat and Eclipse Jetty has built-in Jakarta Servlet, Jakarta Pages, Jakarta WebSocket implementation in the distribution bundle.But in the development stage, you could use these APIs in your project codes.Delcare jakarta.jakartaee-bom in the the dependencyManagement section.&amp;lt;!-- https://mvnrepository.com/artifact/jakarta.platform/jakarta.jakartaee-bom --&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.platform&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.jakartaee-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;9.1.0&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&amp;lt;/dependency&amp;gt;And add the following dependencies in the project dependencies section.&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.el&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.el.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt; &amp;lt;!-- Optional, only when &amp;lt;f:websocket&amp;gt; is used. --&amp;gt;&amp;lt;!-- dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.json&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.json.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency --&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;!-- Optional, only when &amp;lt;f:validateBean&amp;gt; or &amp;lt;f:validateWholeBean&amp;gt; is used. --&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate.validator&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hibernate-validator.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;The jakarta.json and hibernate-validator are optional, add them when they are required.Create an empty src/main/webapp/WEB-INF/web.xml.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;web-app version=&amp;quot;5.0&amp;quot; xmlns=&amp;quot;https://jakarta.ee/xml/ns/jakartaee&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&amp;quot;&amp;gt;&amp;lt;/web-app&amp;gt;Note the XML namespace are updated to use [https://jakarta.ee/xml/ns/jakartaee](https://jakarta.ee/xml/ns/jakartaee) in Jakarta EE 9.CDI 3.0Weld 4.0 is compatable with CDI 3.0 specification, and Weld works with Apache Tomcat and Eclipse Jetty.Add the following dependency.&amp;lt;!-- Weld for CDI support --&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.weld.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;weld-servlet-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${weld.version}&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt;&amp;lt;/dependency&amp;gt;Create an empty src/main/webapp/WEB-INF/beans.xml.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;beans xmlns=&amp;quot;https://jakarta.ee/xml/ns/jakartaee&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd&amp;quot; version=&amp;quot;3.0&amp;quot;&amp;gt;&amp;lt;/beans&amp;gt;To make BeanManager avaiable via JNDI lookup. For Apache Tomcat, create a Resource in the application context.xml.Create a src/main/webapp/META-INF/context.xml.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;Context path=&amp;quot;/jakartaee9-servlet-starter-boilerplate&amp;quot;&amp;gt; &amp;lt;Resource name=&amp;quot;BeanManager&amp;quot; auth=&amp;quot;Container&amp;quot; type=&amp;quot;jakarta.enterprise.inject.spi.BeanManager&amp;quot; factory=&amp;quot;org.jboss.weld.resources.ManagerObjectFactory&amp;quot;/&amp;gt;&amp;lt;/Context&amp;gt;The path is the application context path at runtime. Here it creates a Resource BeanManager.For Eclipse Jetty, create a src/main/webapp/WEB-INF/jetty-env.xml.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;!DOCTYPE Configure PUBLIC &amp;quot;-//Jetty//Configure//EN&amp;quot; &amp;quot;https://www.eclipse.org/jetty/configure_10_0.dtd&amp;quot;&amp;gt;&amp;lt;Configure id=&amp;quot;wac&amp;quot; class=&amp;quot;org.eclipse.jetty.webapp.WebAppContext&amp;quot;&amp;gt; &amp;lt;New id=&amp;quot;BeanManager&amp;quot; class=&amp;quot;org.eclipse.jetty.plus.jndi.Resource&amp;quot;&amp;gt; &amp;lt;Arg&amp;gt; &amp;lt;Ref refid=&amp;quot;wac&amp;quot;/&amp;gt; &amp;lt;/Arg&amp;gt; &amp;lt;Arg&amp;gt;BeanManager&amp;lt;/Arg&amp;gt; &amp;lt;Arg&amp;gt; &amp;lt;New class=&amp;quot;javax.naming.Reference&amp;quot;&amp;gt; &amp;lt;Arg&amp;gt;jakarta.enterprise.inject.spi.BeanManager&amp;lt;/Arg&amp;gt; &amp;lt;Arg&amp;gt;org.jboss.weld.resources.ManagerObjectFactory&amp;lt;/Arg&amp;gt; &amp;lt;Arg/&amp;gt; &amp;lt;/New&amp;gt; &amp;lt;/Arg&amp;gt; &amp;lt;/New&amp;gt;&amp;lt;/Configure&amp;gt;Add resource reference in the web.xml.&amp;lt;resource-env-ref&amp;gt; &amp;lt;resource-env-ref-name&amp;gt;BeanManager&amp;lt;/resource-env-ref-name&amp;gt; &amp;lt;resource-env-ref-type&amp;gt; jakarta.enterprise.inject.spi.BeanManager &amp;lt;/resource-env-ref-type&amp;gt;&amp;lt;/resource-env-ref&amp;gt;Jakarta Rest(Jaxrs) 3.0Jersey was the default JAX-RS implementation in Glassfish, now it is a standalone projet under Eclipse EE4J project. Besides, other popular JAX-RS implementations including Apache CXF, JBoss RestEasy, etc.Add jersey-bom in the dependencyManagement section.&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jersey.version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&amp;lt;/dependency&amp;gt;Add the following dependencies.&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.containers&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-container-servlet&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.inject&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-hk2&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;!-- see: https://github.com/eclipse-ee4j/jersey/blob/3.x/examples/cdi-webapp/pom.xml#L142 --&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext.cdi&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-cdi1x&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext.cdi&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-cdi1x-servlet&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.ext.cdi&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-cdi1x-ban-custom-hk2-binding&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-media-json-binding&amp;lt;/artifactId&amp;gt;&amp;lt;/dependency&amp;gt;Jersey 3.0 is still dependent on HK2 which a small IOC container, and jersey-media-json-binding provides JSON searialzation and desearialization through Jakarta JSON binding.The Jersey support will be initialized when the Servlet container is starting up.Similar to a general Jakarta EE application, add a simple Application class to activate Jakarta REST.@ApplicationPath(&amp;quot;/api&amp;quot;)public class RestActivator extends Application { @Override public Set&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; getClasses() { return Set.of(GreetingResource.class); }}Jakarta Server Faces 4.0Mojarra is the most popular JSF implementation, another popular one is Apache MyFaces.&amp;lt;!-- Jakarta Faces --&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.faces&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.faces.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;Add an empty /src/main/webapp/WEB-INF/faces-config.xml.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;lt;faces-config xmlns=&amp;quot;https://jakarta.ee/xml/ns/jakartaee&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-facesconfig_3_0.xsd&amp;quot; version=&amp;quot;3.0&amp;quot;&amp;gt; &amp;lt;!-- Put any faces config here. --&amp;gt;&amp;lt;/faces-config&amp;gt;Since JSF 2.3, it add some CDI compatible features, such as the new scopes, etc. To enable the new features, create a simple configuration class to activate it.@FacesConfig(version = Version.JSF_2_3)@ApplicationScopedpublic class FacesCdiActivator {}ExamplesNext let’s explore some examples of these specifications.Jakarta CDI ExampleThe following example is a simple CDI bean to build a greeting messsage.@ApplicationScopedpublic class GreetingService { private static final Logger LOGGER = Logger.getLogger(GreetingService.class.getName()); public GreetingMessage buildGreetingMessage(String name) { var message = GreetingMessage.of(&amp;quot;Say Hello to &amp;quot; + name + &amp;quot; at &amp;quot; + LocalDateTime.now()); LOGGER.log(Level.INFO, &amp;quot;build message: {0}&amp;quot;, message); return message; }}The GreetingMessage is a POJO class.@SuppressWarnings(&amp;quot;serial&amp;quot;)public class GreetingMessage implements Serializable { private String message; public static GreetingMessage of(String s) { final var message = new GreetingMessage(); message.setMessage(s); return message; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } @Override public String toString() { return &amp;quot;GreetingMessage{&amp;quot; + &amp;quot;message=&amp;#39;&amp;quot; + message + &amp;#39;\&amp;#39;&amp;#39; + &amp;#39;}&amp;#39;; }}Jakarta Servlet ExampleIn this Servlet class, we injected the existing GreetingService to handle the message.@WebServlet(urlPatterns = &amp;quot;/GreetingServlet&amp;quot;)public class GreetingServlet extends HttpServlet { private static final String PAGE_HEADER = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Jakarta Servlet Example&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot;; private static final String PAGE_FOOTER = &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;; @Inject private GreetingService greetingService; protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException { var name = req.getParameter(&amp;quot;name&amp;quot;); resp.setContentType(&amp;quot;text/html&amp;quot;); var writer = resp.getWriter(); writer.println(PAGE_HEADER); // write message to http response writer.println(&amp;quot;&amp;lt;h1&amp;gt; Hello Servlet &amp;lt;/h1&amp;gt;&amp;quot;); writer.println(&amp;quot;&amp;lt;p&amp;gt;&amp;quot; + greetingService.buildGreetingMessage(name) + &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;); writer.println(PAGE_FOOTER); writer.close(); } }Jakarta Servlet and Pages ExampleRefactor the above the example, split page view part into a standalone Pages file.@WebServlet(urlPatterns = &amp;quot;/GreetingPagesServlet&amp;quot;)public class GreetingPagesServlet extends HttpServlet { @Inject private GreetingService greetingService; protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException { var name = req.getParameter(&amp;quot;name&amp;quot;); var message = greetingService.buildGreetingMessage(name); req.setAttribute(&amp;quot;hello&amp;quot;, message); req.getRequestDispatcher(&amp;quot;/hello-pages.jspx&amp;quot;).forward(req, resp); }}Put the message object into request attribute, in the pages view, it can be read from requestScope directive.&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&amp;lt;jsp:root xmlns:jsp=&amp;quot;http://java.sun.com/JSP/Page&amp;quot; xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; version=&amp;quot;2.0&amp;quot;&amp;gt; &amp;lt;jsp:directive.page contentType=&amp;quot;text/html; charset=UTF-8&amp;quot; pageEncoding=&amp;quot;UTF-8&amp;quot; session=&amp;quot;false&amp;quot;/&amp;gt; &amp;lt;jsp:output omit-xml-declaration=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;!-- make it HTML 5 declaration compatiable --&amp;gt; &amp;lt;![CDATA[&amp;lt;!DOCTYPE html&amp;gt;]]&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Jakarta Server Pages Example&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello Pages&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;${requestScope.hello.message}&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;&amp;lt;/jsp:root&amp;gt;Jakarta Faces ExampleCreate a Jakarta Faces backend bean, it is a CDI bean.@Named@RequestScopedpublic class Hello { private String name; private GreetingMessage message; @Inject private GreetingService greetingService; public Hello() { } public Hello(GreetingService greetingService) { this.greetingService = greetingService; } public void createMessage() { message = greetingService.buildGreetingMessage(name); } public String getName() { return name; } public void setName(String name) { this.name = name; } public GreetingMessage getMessage() { return message; } }Let’s have a look at the hello.xhtml.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&amp;quot;en&amp;quot; xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xmlns:f=&amp;quot;http://xmlns.jcp.org/jsf/core&amp;quot; xmlns:jsf=&amp;quot;http://xmlns.jcp.org/jsf&amp;quot; xmlns:h=&amp;quot;http://xmlns.jcp.org/jsf/html&amp;quot;&amp;gt;&amp;lt;f:view&amp;gt; &amp;lt;h:head&amp;gt; &amp;lt;title&amp;gt;Hello, World!&amp;lt;/title&amp;gt; &amp;lt;/h:head&amp;gt; &amp;lt;h:body&amp;gt; &amp;lt;h:form prependId=&amp;quot;false&amp;quot;&amp;gt; &amp;lt;label jsf:for=&amp;quot;name&amp;quot; jsf:required=&amp;quot;true&amp;quot;&amp;gt;Enter your name:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; jsf:id=&amp;quot;name&amp;quot; jsf:value=&amp;quot;#{hello.name}&amp;quot; jsf:required=&amp;quot;true&amp;quot; jsf:requiredMessage=&amp;quot;Name is required.&amp;quot; placeholder=&amp;quot;Type your name here...&amp;quot; /&amp;gt; &amp;lt;h:message for=&amp;quot;name&amp;quot;/&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; jsf:id=&amp;quot;submit&amp;quot; value=&amp;quot;Say Hello&amp;quot; jsf:action=&amp;quot;#{hello.createMessage()}&amp;quot;&amp;gt; &amp;lt;f:ajax execute=&amp;quot;@form&amp;quot; render=&amp;quot;@form&amp;quot;/&amp;gt; &amp;lt;/input&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;p id=&amp;quot;message&amp;quot;&amp;gt;#{hello.message}&amp;lt;/p&amp;gt; &amp;lt;/h:form&amp;gt; &amp;lt;/h:body&amp;gt;&amp;lt;/f:view&amp;gt;&amp;lt;/html&amp;gt;Jakarta REST ExampleIn this example, we reuse the GreetingService bean to handle the greeting message.@Path(&amp;quot;greeting&amp;quot;)@RequestScopedpublic class GreetingResource { @Inject private GreetingService greetingService; @GET @Path(&amp;quot;{name}&amp;quot;) @Produces(MediaType.APPLICATION_JSON) public Response greeting(@PathParam(&amp;quot;name&amp;quot;) String name) { return ok(this.greetingService.buildGreetingMessage(name)).build(); }}Deploy and Run the applicationTo deploy an application to the production environment, firstly we can package the built files into a war archive, and put it into a deployable folder under the servlet container. Then start up the servlet container, the war file will be detected and deployed into the servlet container.To simplify the deployment in the development stage, we use maven plugins to complete the work.Deploying to Apache TomcatTo deploy the application into Apache Tomcat, we use cargo-maven3-plugin.&amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; ... &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.cargo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cargo-maven3-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;container&amp;gt; &amp;lt;containerId&amp;gt;tomcat10x&amp;lt;/containerId&amp;gt; &amp;lt;artifactInstaller&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${tomcat.version}&amp;lt;/version&amp;gt; &amp;lt;/artifactInstaller&amp;gt; &amp;lt;/container&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;!-- &amp;lt;cargo.servlet.port&amp;gt;8080&amp;lt;/cargo.servlet.port&amp;gt;--&amp;gt; &amp;lt;cargo.logging&amp;gt;low&amp;lt;/cargo.logging&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;The cargo-maven3-plugin controls the lifecyle of Tomcat starting and stopping.Run the following command to run application on Tomcat.mvn clean package cargo:runWhen it is started, open your browser, check the examples we have created above.Go to http://localhost:8080/jakartaee9-servlet-starter-boilerplate/GreetingServlet?name=Hantsy to view the Servlet example.Open http://localhost:8080/jakartaee9-servlet-starter-boilerplate/GreetingPagesServlet?name=Hantsy to see the result of Jakarta Server Pages.Navigate to http://localhost:8080/jakartaee9-servlet-starter-boilerplate/hello.xhtml and input name, and click the Greeting button, you will see the following result.Access http://localhost:8080/jakartaee9-servlet-starter-boilerplate/api/greeting/Hantsy in your browser or using curl command, you will see the following result.Similarly, we can also configure cargo to use Eclipse Jetty as servlet container. But Eclipse Jetty provides an official maven plugin for deploying applications into Jetty servers.Deploying to Eclipse JettyIn Jetty 11.x, Jetty maven plugin was refactored, and provides 3 deploy modes in the new pluign.EMBEDFORKEDEXTERNALThe default mode is EMBED which is similar to running the simplest jetty:run goal in the previous version.The FORKED mode uses a forked thread to run the application.The EXTERNAL mode runs the application on an external standalone Jetty server.Deploying to an Embedded Jetty ServerConfigure jetty maven plugin and use EMBED mode.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;jetty-embed&amp;lt;/id&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;deployMode&amp;gt;EMBED&amp;lt;/deployMode&amp;gt; &amp;lt;useProvidedScope&amp;gt;true&amp;lt;/useProvidedScope&amp;gt; &amp;lt;httpConnector&amp;gt; &amp;lt;port&amp;gt;9090&amp;lt;/port&amp;gt; &amp;lt;/httpConnector&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.json&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.json.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-plus&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-annotations&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-cdi&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jetty.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.36&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/profile&amp;gt;There is useProvidedScope option. When it is true, it will add Maven provided scoped dependencies to the container classpath and run the application, else it will use a isolated application classpath to run the application.Here we have to set it to true, if it is false, it will fail to run our application.Run the following command to deploy the application into an embedded Jetty.mvn clean jetty:run -Pjetty-embedYou will see a lot of warning of duplicated classes, due to some duplicated artifacts in the containter classpath.Deploying to an External Jetty ServerCreate a new Maven profile for this purpose.&amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;jetty-external&amp;lt;/id&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;deployMode&amp;gt;EXTERNAL&amp;lt;/deployMode&amp;gt; &amp;lt;webApp&amp;gt; &amp;lt;contextPath&amp;gt;/${project.artifactId}&amp;lt;/contextPath&amp;gt; &amp;lt;/webApp&amp;gt; &amp;lt;jettyHome&amp;gt;${env.JETTY_HOME}&amp;lt;/jettyHome&amp;gt; &amp;lt;modules&amp;gt;jdni,jsp,servlet,glassfish-jstl,websocket-jakarta,cdi-decorate&amp;lt;/modules&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.servlet.jsp.jstl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.servlet.jsp.jstl.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.json&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jakarta.json.version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;jakarta.el&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.el-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.0.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/profile&amp;gt;Make sure you have downloaded a copy of Eclipse Jetty, and create an system environment variable JETTY_HOME and set it to the location of Eclipse Jetty root folder.Run the following command to deploy the application into the standalone Jetty server.mvn clean jetty:run -Pjetty-externalCheck the complete example codes from My Github.Building Jakarta EE 9 Web application with Servlet Containers was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Using Enum in Symfony</title><link href="/blog/2022/using-enum-in-symfony/" rel="alternate" type="text/html" title="Using Enum in Symfony" /><published>2022-02-27T00:00:00+00:00</published><updated>2022-02-27T00:00:00+00:00</updated><id>/blog/2022/using-enum-in-symfony</id><content type="html" xml:base="/blog/2022/using-enum-in-symfony/">&lt;p&gt;PHP 8.1 introduces the official &lt;em&gt;Enum&lt;/em&gt; support. &lt;a href=&quot;https://www.doctrine-project.org/2022/01/11/orm-2.11.html&quot;&gt;Doctrine brought Enum type support in its ORM framework&lt;/a&gt;, and &lt;a href=&quot;https://symfony.com/blog/new-in-symfony-5-4-php-enumerations-support&quot;&gt;Symfony added serialization and deserialization support of a Enum type&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*zM0-IX7pIVhjXuP1aJtb4w.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kakachen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;te chan&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;It is time to migrate your projects to use PHP Enum if you are using 3rd-party enumeration solutions.&lt;/p&gt;&lt;p&gt;To use PHP &lt;em&gt;Enum&lt;/em&gt;, you have to upgrade to PHP 8.1, and set the PHP version to 8.1 in the project composer file.&lt;/p&gt;&lt;pre&gt;{&lt;br&gt;    //...&lt;br&gt;    &amp;quot;require&amp;quot;: {&lt;br&gt;        &amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=8.1&amp;quot;,&lt;br&gt;        //...&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Creating Enum Class&lt;/h3&gt;&lt;p&gt;For example, we will add a Status to the Post entity, and defined several fixed values of the post status.&lt;/p&gt;&lt;pre&gt;&amp;lt;?php&lt;/pre&gt;&lt;pre&gt;namespace App\Entity;&lt;/pre&gt;&lt;pre&gt;enum Status: string&lt;br&gt;{&lt;br&gt;    case Draft = &amp;quot;DRAFT&amp;quot;;&lt;br&gt;    case PendingModerated = &amp;quot;PENDING_MODERATED&amp;quot;;&lt;br&gt;    case Published = &amp;quot;PUBLISHED&amp;quot;;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Here we use a &lt;em&gt;string&lt;/em&gt; backed enum, add a field in the Post class.&lt;/p&gt;&lt;pre&gt;#[Column(type: &amp;quot;string&amp;quot;, enumType: Status::class)]&lt;br&gt;private Status $status;&lt;/pre&gt;&lt;p&gt;Note, set the &lt;em&gt;enumType&lt;/em&gt; as the Status class. It will store the status value as a string in the database tables.&lt;/p&gt;&lt;p&gt;In the Post constructor, assign a default value to the status.&lt;/p&gt;&lt;pre&gt;public function __construct()&lt;br&gt;{&lt;br&gt;    $this-&amp;gt;status = Status::Draft;&lt;br&gt;    //...&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Now everything is ok.&lt;/p&gt;&lt;h3&gt;Creating HttpMethod&lt;/h3&gt;&lt;p&gt;When we setup the Route attribute on the Controller class, we use a literal value to set up the HTTP method.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;/pre&gt;&lt;p&gt;For the &lt;em&gt;methods&lt;/em&gt; value, there are only several options available to choose. Obviously, if introducing &lt;em&gt;Enum&lt;/em&gt;, it will provide a &lt;em&gt;type-safe&lt;/em&gt; way to setup the values and decrease the typo errors.&lt;/p&gt;&lt;p&gt;Create an Enum named HttpMethod.&lt;/p&gt;&lt;pre&gt;&amp;lt;?php&lt;/pre&gt;&lt;pre&gt;namespace App\Annotation;&lt;/pre&gt;&lt;pre&gt;enum HttpMethod&lt;br&gt;{&lt;br&gt;    case GET;&lt;br&gt;    case POST;&lt;br&gt;    case HEAD;&lt;br&gt;    case OPTIONS;&lt;br&gt;    case PATCH;&lt;br&gt;    case PUT;&lt;br&gt;    case DELETE;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Then refactor the Route attribute and create a series of attributes(Get, Post, Put, Delete, etc.) that are mapped to different HTTP methods.&lt;/p&gt;&lt;pre&gt;//file : src/Annotation/Get.php&lt;br&gt;#[Attribute]&lt;br&gt;class Get extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::GET-&amp;gt;name];&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;pre&gt;//file : src/Annotation/Head.php&lt;br&gt;#[Attribute]&lt;br&gt;class Head extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::HEAD-&amp;gt;name];&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;pre&gt;//file : src/Annotation/Options.php&lt;br&gt;#[Attribute]&lt;br&gt;class Options extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::OPTIONS-&amp;gt;name];&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;pre&gt;//file : src/Annotation/Patch.php&lt;br&gt;#[Attribute]&lt;br&gt;class Patch extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::PATCH-&amp;gt;name];&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;//file : src/Annotation/Post.php&lt;br&gt;#[Attribute]&lt;br&gt;class Post extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::POST-&amp;gt;name];&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;//file : src/Annotation/Put.php&lt;br&gt;#[Attribute]&lt;br&gt;class Put extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::PUT-&amp;gt;name];&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;//file : src/Annotation/Delete.php&lt;br&gt;#[Attribute]&lt;br&gt;class Delete extends Route&lt;br&gt;{&lt;br&gt;    public function getMethods()&lt;br&gt;    {&lt;br&gt;        return [HttpMethod::DELETE-&amp;gt;name];&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Now you can polish the PostController, use these attributes instead. As you see, the naming of the new attributes literally look more clear.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;/posts&amp;quot;, name: &amp;quot;posts_&amp;quot;)]&lt;br&gt;class PostController extends AbstractController&lt;br&gt;{&lt;/pre&gt;&lt;pre&gt;    // constructor...&lt;/pre&gt;&lt;pre&gt;    // #[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    #[Get(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;)]&lt;br&gt;    public function all(#[QueryParam] string $keyword,&lt;br&gt;                        #[QueryParam] int $offset = 0,&lt;br&gt;                        #[QueryParam] int $limit = 20): Response&lt;br&gt;    {&lt;br&gt;        //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    // #[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    #[Get(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;)]&lt;br&gt;    public function getById(Uuid $id): Response&lt;br&gt;    {&lt;br&gt;       //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    //#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;create&amp;quot;, methods: [&amp;quot;POST&amp;quot;])]&lt;br&gt;    #[Post(path: &amp;quot;&amp;quot;, name: &amp;quot;create&amp;quot;)]&lt;br&gt;    public function create(#[Body] CreatePostDto $data): Response&lt;br&gt;    {&lt;br&gt;        //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    //#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;update&amp;quot;, methods: [&amp;quot;PUT&amp;quot;])]&lt;br&gt;    #[Put(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;update&amp;quot;)]&lt;br&gt;    public function update(Uuid $id, #[Body] UpdatePostDto $data): Response&lt;br&gt;    {&lt;br&gt;        //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    // #[Route(path: &amp;quot;/{id}/status&amp;quot;, name: &amp;quot;update_status&amp;quot;, methods: [&amp;quot;PUT&amp;quot;])]&lt;br&gt;    #[Put(path: &amp;quot;/{id}/status&amp;quot;, name: &amp;quot;update_status&amp;quot;)]&lt;br&gt;    public function updateStatus(Uuid $id, #[Body] UpdatePostStatusDto $data): Response&lt;br&gt;    {&lt;br&gt;       //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    //#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;delete&amp;quot;, methods: [&amp;quot;DELETE&amp;quot;])]&lt;br&gt;    #[Delete(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;delete&amp;quot;)]&lt;br&gt;    public function deleteById(Uuid $id): Response&lt;br&gt;    {&lt;br&gt;        //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    // comments sub resources.&lt;br&gt;    //#[Route(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;commentByPostId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    #[GET(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;commentByPostId&amp;quot;)]&lt;br&gt;    public function getComments(Uuid $id): Response&lt;br&gt;    {&lt;br&gt;      //...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    //#[Route(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;addComments&amp;quot;, methods: [&amp;quot;POST&amp;quot;])]&lt;br&gt;    #[Post(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;addComments&amp;quot;)]&lt;br&gt;    public function addComment(Uuid $id, Request $request): Response&lt;br&gt;    {&lt;br&gt;		//...&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Run the application again to make sure it works.&lt;/p&gt;&lt;h4&gt;Get &lt;a href=&quot;https://github.com/hantsy/symfony-rest-sample&quot;&gt;the source codes&lt;/a&gt; from my Github.&lt;/h4&gt;&lt;h4&gt;BTW, I have updated my original Symfony posts into a step-by-step guide, read it online: &lt;a href=&quot;https://hantsy.github.io/symfony-rest-sample/&quot;&gt;https://hantsy.github.io/symfony-rest-sample/&lt;/a&gt;&lt;/h4&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8f32d9cfaa0f&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/using-enum-in-symfony-8f32d9cfaa0f&quot;&gt;Using Enum in Symfony&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">PHP 8.1 introduces the official Enum support. Doctrine brought Enum type support in its ORM framework, and Symfony added serialization and deserialization support of a Enum type.Photo by te chan on UnsplashIt is time to migrate your projects to use PHP Enum if you are using 3rd-party enumeration solutions.To use PHP Enum, you have to upgrade to PHP 8.1, and set the PHP version to 8.1 in the project composer file.{ //... &amp;quot;require&amp;quot;: { &amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=8.1&amp;quot;, //... }}Creating Enum ClassFor example, we will add a Status to the Post entity, and defined several fixed values of the post status.&amp;lt;?phpnamespace App\Entity;enum Status: string{ case Draft = &amp;quot;DRAFT&amp;quot;; case PendingModerated = &amp;quot;PENDING_MODERATED&amp;quot;; case Published = &amp;quot;PUBLISHED&amp;quot;;}Here we use a string backed enum, add a field in the Post class.#[Column(type: &amp;quot;string&amp;quot;, enumType: Status::class)]private Status $status;Note, set the enumType as the Status class. It will store the status value as a string in the database tables.In the Post constructor, assign a default value to the status.public function __construct(){ $this-&amp;gt;status = Status::Draft; //...}Now everything is ok.Creating HttpMethodWhen we setup the Route attribute on the Controller class, we use a literal value to set up the HTTP method.#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]For the methods value, there are only several options available to choose. Obviously, if introducing Enum, it will provide a type-safe way to setup the values and decrease the typo errors.Create an Enum named HttpMethod.&amp;lt;?phpnamespace App\Annotation;enum HttpMethod{ case GET; case POST; case HEAD; case OPTIONS; case PATCH; case PUT; case DELETE;}Then refactor the Route attribute and create a series of attributes(Get, Post, Put, Delete, etc.) that are mapped to different HTTP methods.//file : src/Annotation/Get.php#[Attribute]class Get extends Route{ public function getMethods() { return [HttpMethod::GET-&amp;gt;name]; }}//file : src/Annotation/Head.php#[Attribute]class Head extends Route{ public function getMethods() { return [HttpMethod::HEAD-&amp;gt;name]; }}//file : src/Annotation/Options.php#[Attribute]class Options extends Route{ public function getMethods() { return [HttpMethod::OPTIONS-&amp;gt;name]; }}//file : src/Annotation/Patch.php#[Attribute]class Patch extends Route{ public function getMethods() { return [HttpMethod::PATCH-&amp;gt;name]; }}//file : src/Annotation/Post.php#[Attribute]class Post extends Route{ public function getMethods() { return [HttpMethod::POST-&amp;gt;name]; }}//file : src/Annotation/Put.php#[Attribute]class Put extends Route{ public function getMethods() { return [HttpMethod::PUT-&amp;gt;name]; }}//file : src/Annotation/Delete.php#[Attribute]class Delete extends Route{ public function getMethods() { return [HttpMethod::DELETE-&amp;gt;name]; }}Now you can polish the PostController, use these attributes instead. As you see, the naming of the new attributes literally look more clear.#[Route(path: &amp;quot;/posts&amp;quot;, name: &amp;quot;posts_&amp;quot;)]class PostController extends AbstractController{ // constructor... // #[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] #[Get(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;)] public function all(#[QueryParam] string $keyword, #[QueryParam] int $offset = 0, #[QueryParam] int $limit = 20): Response { //... } // #[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] #[Get(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;)] public function getById(Uuid $id): Response { //... } //#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;create&amp;quot;, methods: [&amp;quot;POST&amp;quot;])] #[Post(path: &amp;quot;&amp;quot;, name: &amp;quot;create&amp;quot;)] public function create(#[Body] CreatePostDto $data): Response { //... } //#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;update&amp;quot;, methods: [&amp;quot;PUT&amp;quot;])] #[Put(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;update&amp;quot;)] public function update(Uuid $id, #[Body] UpdatePostDto $data): Response { //... } // #[Route(path: &amp;quot;/{id}/status&amp;quot;, name: &amp;quot;update_status&amp;quot;, methods: [&amp;quot;PUT&amp;quot;])] #[Put(path: &amp;quot;/{id}/status&amp;quot;, name: &amp;quot;update_status&amp;quot;)] public function updateStatus(Uuid $id, #[Body] UpdatePostStatusDto $data): Response { //... } //#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;delete&amp;quot;, methods: [&amp;quot;DELETE&amp;quot;])] #[Delete(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;delete&amp;quot;)] public function deleteById(Uuid $id): Response { //... } // comments sub resources. //#[Route(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;commentByPostId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] #[GET(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;commentByPostId&amp;quot;)] public function getComments(Uuid $id): Response { //... } //#[Route(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;addComments&amp;quot;, methods: [&amp;quot;POST&amp;quot;])] #[Post(path: &amp;quot;/{id}/comments&amp;quot;, name: &amp;quot;addComments&amp;quot;)] public function addComment(Uuid $id, Request $request): Response { //... }}Run the application again to make sure it works.Get the source codes from my Github.BTW, I have updated my original Symfony posts into a step-by-step guide, read it online: https://hantsy.github.io/symfony-rest-sample/Using Enum in Symfony was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Building Micronaut applications with Micronaut Mongo Reative</title><link href="/blog/2022/building-micronaut-applications-with-micronaut-mongo-reative/" rel="alternate" type="text/html" title="Building Micronaut applications with Micronaut Mongo Reative" /><published>2022-02-05T00:00:00+00:00</published><updated>2022-02-05T00:00:00+00:00</updated><id>/blog/2022/building-micronaut-applications-with-micronaut-mongo-reative</id><content type="html" xml:base="/blog/2022/building-micronaut-applications-with-micronaut-mongo-reative/">&lt;p&gt;In this post, we will explore the Micronaut Mongo Reactive feature. Unlike the Data JPA and R2dbc, the Mongo Reactive feature is not part of the Micronaut Data project. Micronaut Mongo Reactive is a light-weight wrapper of the official Mongo Java Drivers, and provides autoconfiguration of MongoClient from application properties.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;Photo by &amp;lt;a href=”https://unsplash.com/@fabianmardi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&amp;quot;&amp;gt;Fabian Mardi&amp;lt;/a&amp;gt; on &amp;lt;a href=”https://unsplash.com/s/photos/snow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&amp;quot;&amp;gt;Unsplash&amp;lt;/a&amp;gt;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*HcHUQFoIAU88lHg24zJINA.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@fabianmardi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Fabian Mardi&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/snow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Getting Started&lt;/h3&gt;&lt;p&gt;Open your browser and navigate to &lt;a href=&quot;https://micronaut.io/launch&quot;&gt;Micronaut Launch&lt;/a&gt; to generate a new project skeleton for this post. Select the following items on this page.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java version: &lt;strong&gt;17&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Language: &lt;strong&gt;Java&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Build tool: &lt;strong&gt;Gradle&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Test framework: &lt;strong&gt;Spock&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Included Features: &lt;strong&gt;mongo-reactive&lt;/strong&gt; etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Click &lt;strong&gt;GENERATE PROJECT&lt;/strong&gt; button to generate a project archive, download it and extract the files into disk, and import to your IDE, such as IDEA.&lt;/p&gt;&lt;p&gt;In the previous examples, we used JUnit and Kotest as testing framework, in this example, we switched to use Spock and Groovy to write tests.&lt;/p&gt;&lt;p&gt;Create a Mongo document entity class.&lt;/p&gt;&lt;pre&gt;@Data&lt;br&gt;@Builder&lt;br&gt;@NoArgsConstructor&lt;br&gt;@AllArgsConstructor(staticName = &amp;quot;of&amp;quot;)&lt;br&gt;public class Customer {&lt;br&gt;    private ObjectId id;&lt;br&gt;    private String name;&lt;br&gt;    private int age;&lt;br&gt;    private Address address;&lt;/pre&gt;&lt;pre&gt;    public static Customer of(String name, int age, Address address) {&lt;br&gt;        return Customer.of(null, name, age, address);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The Address is an embedded Document in a Customer Document.&lt;/p&gt;&lt;pre&gt;@Data&lt;br&gt;@Builder&lt;br&gt;@NoArgsConstructor&lt;br&gt;@AllArgsConstructor(staticName = &amp;quot;of&amp;quot;)&lt;br&gt;public class Address {&lt;br&gt;    private String street;&lt;br&gt;    private String city;&lt;br&gt;    private String zip;&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Create a Repository class to perform CRUD operations on Customer.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;@Slf4j&lt;br&gt;public class CustomerRepository {&lt;br&gt;    private final MongoClient mongoClient;&lt;br&gt;    private final DefaultMongoConfiguration mongoConfiguration;&lt;/pre&gt;&lt;pre&gt;    public Flux&amp;lt;Customer&amp;gt; findAll() {&lt;br&gt;        return Flux.from(customersCollection().find());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;Customer&amp;gt; findById(ObjectId id) {&lt;br&gt;        return Mono.from(customersCollection().find(Filters.eq(id)));&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;ObjectId&amp;gt; insertOne(Customer data) {&lt;br&gt;        return Mono.from(customersCollection().insertOne(data, new InsertOneOptions().bypassDocumentValidation(false)))&lt;br&gt;                .mapNotNull(result -&amp;gt; result.getInsertedId().asObjectId().getValue());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;Map&amp;lt;Integer, BsonValue&amp;gt;&amp;gt; insertMany(List&amp;lt;Customer&amp;gt; data) {&lt;br&gt;        return Mono.from(customersCollection().insertMany(data, new InsertManyOptions().bypassDocumentValidation(false).ordered(true)))&lt;br&gt;                .map(InsertManyResult::getInsertedIds);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;Long&amp;gt; deleteById(ObjectId id) {&lt;br&gt;        return Mono.from(customersCollection().deleteOne(Filters.eq(id), new DeleteOptions()))&lt;br&gt;                .map(DeleteResult::getDeletedCount);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public void init() {&lt;br&gt;        var people = List.of(&lt;br&gt;                Customer.of(&amp;quot;Charles Babbage&amp;quot;, 45, Address.of(&amp;quot;5 Devonshire Street&amp;quot;, &amp;quot;London&amp;quot;, &amp;quot;W11&amp;quot;)),&lt;br&gt;                Customer.of(&amp;quot;Alan Turing&amp;quot;, 28, Address.of(&amp;quot;Bletchley Hall&amp;quot;, &amp;quot;Bletchley Park&amp;quot;, &amp;quot;MK12&amp;quot;)),&lt;br&gt;                Customer.of(&amp;quot;Timothy Berners-Lee&amp;quot;, 61, Address.of(&amp;quot;Colehill&amp;quot;, &amp;quot;Wimborne&amp;quot;, null))&lt;br&gt;        );&lt;br&gt;        Mono.from(customersCollection().drop())&lt;br&gt;                .then()&lt;br&gt;                .thenMany(this.insertMany(people))&lt;br&gt;                .subscribe(&lt;br&gt;                        result -&amp;gt; result.forEach((key, value) -&amp;gt; log.debug(&amp;quot;saved key: {}, value: {}&amp;quot;, key, value)),&lt;br&gt;                        error -&amp;gt; log.debug(&amp;quot;initialization failed: {}&amp;quot;, error),&lt;br&gt;                        () -&amp;gt; log.debug(&amp;quot;done&amp;quot;)&lt;br&gt;                );&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;Long&amp;gt; deleteAll() {&lt;br&gt;        return Mono.from(customersCollection().deleteMany(Filters.empty(), new DeleteOptions()))&lt;br&gt;                .map(DeleteResult::getDeletedCount);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private MongoCollection&amp;lt;Customer&amp;gt; customersCollection() {&lt;br&gt;        return mongoClient&lt;br&gt;                .getDatabase(&amp;quot;userdb&amp;quot;)&lt;br&gt;                .getCollection(&amp;quot;customers&amp;quot;, Customer.class);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;When a mongo.uri is set in the &lt;em&gt;application.yml&lt;/em&gt;, there is a &lt;strong&gt;reactive&lt;/strong&gt; MongoClient bean is available.&lt;/p&gt;&lt;p&gt;In the above codes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The customersCollection() method defines a Mongo collection mapped to the Customer class. As you see, there is a ObjectId id field is defined in the Customer class, when saving a Customer instance, it will generate a new ObjectId for it and saving it to the &lt;em&gt;customers&lt;/em&gt; document _id in MongoDB automatically.&lt;/li&gt;&lt;li&gt;The MongoClient provides methods for CRUD operations, but it is based on the &lt;em&gt;Reactive Streams&lt;/em&gt; APIs. Here we use Reactor API in this project, we use Mono and Flux to wrap the operation result into Reactor friendly APIs.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now let’s create a test to test the CustomerRepository.&lt;/p&gt;&lt;pre&gt;@MicronautTest(startApplication = false)&lt;br&gt;@Slf4j&lt;br&gt;class CustomerRepositorySpec extends Specification {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    EmbeddedApplication&amp;lt;?&amp;gt; application&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    CustomerRepository customerRepository;&lt;/pre&gt;&lt;pre&gt;    def setup() {&lt;br&gt;        CountDownLatch latch = new CountDownLatch(1)&lt;br&gt;        customerRepository.deleteAll()&lt;br&gt;                .doOnTerminate(_ -&amp;gt; latch.countDown())&lt;br&gt;                .subscribe(it -&amp;gt; log.debug &amp;quot;deleted customers: {}&amp;quot;, it)&lt;br&gt;        latch.await(1000, TimeUnit.MILLISECONDS)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;application is not running&amp;#39;() {&lt;br&gt;        expect:&lt;br&gt;        !application.running&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;test findAll&amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        this.customerRepository.insertMany(List.of(Customer.of(&amp;quot;Jack&amp;quot;, 40, null)))&lt;br&gt;                .block(Duration.ofMillis(5000L))&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        def result = this.customerRepository.findAll()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        StepVerifier.create(result)&lt;br&gt;                .expectNextMatches(it -&amp;gt; it.name == &amp;quot;Jack&amp;quot;)&lt;br&gt;                .expectComplete()&lt;br&gt;                .verify()&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;To test the persistence layer, we do not need a running server. So add startApplication = false to the MicronautTest annotation.&lt;/p&gt;&lt;p&gt;Generally, a Spock test is called a Specfication, you can override the lifecycle methods in your tests, such as setup, setupSpec , etc. Every test follows the BDD pattern, aka the given/ when/ then patten.&lt;/p&gt;&lt;p&gt;In the above codes, we override the setup method and clear the data in the database. And then create a test to verify the insert and find operations, in the then block, we use StepVerify to assert the result in Reactive Streams.&lt;/p&gt;&lt;p&gt;If you want to start up a Testcontainers Docker to serve the required Mongo database, try to define a Mongo container instance with Shared and AutoCleanup annotation, and override setupSpec to start the Mongo service and ensure it is available for all tests in this specification.&lt;/p&gt;&lt;pre&gt;@Shared&lt;br&gt;@AutoCleanup&lt;br&gt;GenericContainer mongo = new GenericContainer(&amp;quot;mongo&amp;quot;)&lt;br&gt;    .withExposedPorts(27017)&lt;/pre&gt;&lt;pre&gt;def setupSpec() {        &lt;br&gt;    mongo.start()&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Like the previous examples, we can create a bean to listen a ServerStartupEvent to initialize some sample data for test purpose.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;@Requires(notEnv = &amp;quot;mock&amp;quot;)&lt;br&gt;@Slf4j&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;public class DataInitializer {&lt;br&gt;    private final CustomerRepository customerRepository;&lt;/pre&gt;&lt;pre&gt;    @EventListener&lt;br&gt;    public void onStart(ServerStartupEvent event) {&lt;br&gt;        log.debug(&amp;quot;starting data initialization...&amp;quot;);&lt;br&gt;        this.customerRepository.init();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Try to create a controller to expose the RESTful APIs.&lt;/p&gt;&lt;pre&gt;@Controller(&amp;quot;/customers&amp;quot;)&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;@Slf4j&lt;br&gt;public class CustomerController {&lt;br&gt;    private final CustomerRepository customerRepository;&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/&amp;quot;, produces = {MediaType.APPLICATION_JSON})&lt;br&gt;    public Flux&amp;lt;?&amp;gt; all() {&lt;br&gt;        return this.customerRepository.findAll();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/{id}&amp;quot;, produces = {MediaType.APPLICATION_JSON})&lt;br&gt;    public Mono&amp;lt;MutableHttpResponse&amp;lt;Customer&amp;gt;&amp;gt; byId(@PathVariable ObjectId id) {&lt;br&gt;        return this.customerRepository.findById(id)&lt;br&gt;                .map(HttpResponse::ok)&lt;br&gt;                .switchIfEmpty(Mono.just(notFound()));&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Post(uri = &amp;quot;/&amp;quot;, consumes = {MediaType.APPLICATION_JSON})&lt;br&gt;    public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; create(@Body Customer data) {&lt;br&gt;        return this.customerRepository.insertOne(data)&lt;br&gt;                .map(id -&amp;gt; created(URI.create(&amp;quot;/customers/&amp;quot; + id.toHexString())));&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Delete(uri = &amp;quot;/{id}&amp;quot;)&lt;br&gt;    public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; delete(@PathVariable ObjectId id) {&lt;br&gt;        return this.customerRepository.deleteById(id)&lt;br&gt;                .map(deleted -&amp;gt; {&lt;br&gt;                    if (deleted &amp;gt; 0) {&lt;br&gt;                        return noContent();&lt;br&gt;                    } else {&lt;br&gt;                        return notFound();&lt;br&gt;                    }&lt;br&gt;                });&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;To process the ObjectId in the request path, create a TypeConverter to convert id from String type to ObjectId.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;public class StringToObjectIdConverter implements TypeConverter&amp;lt;String, ObjectId&amp;gt; {&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public Optional&amp;lt;ObjectId&amp;gt; convert(String object, Class&amp;lt;ObjectId&amp;gt; targetType, ConversionContext context) {&lt;br&gt;        return Optional.of(new ObjectId(object));&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In order to serialize the id (ObjectId type) of Customer as a String in the HTTP response, create a JsonSerializer to customize the serialization process. When it is applied, the id field is serialized as a hex string instead of a JSON object.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;public class ObjectIdJsonSerializer extends JsonSerializer&amp;lt;ObjectId&amp;gt; {&lt;br&gt;    &lt;br&gt;    @Override&lt;br&gt;    public void serialize(ObjectId value, JsonGenerator gen, SerializerProvider serializers) throws IOException {&lt;br&gt;        gen.writeString(value.toHexString());&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Create a test for the CustomerController.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = [&amp;quot;mock&amp;quot;])&lt;br&gt;class CustomerControllerSpec extends Specification {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    EmbeddedApplication&amp;lt;?&amp;gt; application&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    @Client(&amp;quot;/&amp;quot;)&lt;br&gt;    ReactorHttpClient client&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    CustomerRepository customerRepository&lt;/pre&gt;&lt;pre&gt;    def &amp;#39;test it works&amp;#39;() {&lt;br&gt;        expect:&lt;br&gt;        application.running&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;get all customers&amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        1 * customerRepository.findAll() &amp;gt;&amp;gt; Flux.just(Customer.of(ObjectId.get(), &amp;quot;Jack&amp;quot;, 40, null), Customer.of(ObjectId.get(), &amp;quot;Rose&amp;quot;, 20, null))&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.GET(&amp;quot;/customers&amp;quot;), String).log()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        //1 * customers.findAll() &amp;gt;&amp;gt; Flux.just(Customer.of(ObjectId.get(), &amp;quot;Jack&amp;quot;, 40, null), Customer.of(ObjectId.get(), &amp;quot;Rose&amp;quot;, 20, null))&lt;br&gt;        StepVerifier.create(resFlux)&lt;br&gt;        //.expectNextCount(1)&lt;br&gt;                .consumeNextWith(s -&amp;gt; {&lt;br&gt;                    assert s.getStatus() == HttpStatus.OK&lt;br&gt;                    assert s.body().contains(&amp;#39;Jack&amp;#39;)&lt;br&gt;                })&lt;br&gt;                .expectComplete()&lt;br&gt;                .verify()&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;create a new customer&amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        def objId = ObjectId.get()&lt;br&gt;        1 * customerRepository.insertOne(_) &amp;gt;&amp;gt; Mono.just(objId)&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        def body = Customer.of(null, &amp;quot;Jack&amp;quot;, 40, null)&lt;br&gt;        Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.POST(&amp;quot;/customers&amp;quot;, body), String).log()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        StepVerifier.create(resFlux)&lt;br&gt;                .consumeNextWith(s -&amp;gt; {&lt;br&gt;                    assert s.getStatus() == HttpStatus.CREATED&lt;br&gt;                    assert s.header(&amp;quot;Location&amp;quot;) == &amp;#39;/customers/&amp;#39; + objId.toHexString()&lt;br&gt;                })&lt;br&gt;                .expectComplete()&lt;br&gt;                .verify()&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;get customer by id &amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        1 * customerRepository.findById(_) &amp;gt;&amp;gt; Mono.just(Customer.of(ObjectId.get(), &amp;quot;Jack&amp;quot;, 40, null))&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.GET(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        StepVerifier.create(resFlux)&lt;br&gt;                .consumeNextWith(s -&amp;gt; {&lt;br&gt;                    assert s.getStatus() == HttpStatus.OK&lt;br&gt;                    assert s.body().contains(&amp;#39;Jack&amp;#39;)&lt;br&gt;                })&lt;br&gt;                .expectComplete()&lt;br&gt;                .verify()&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;get customer by none-existing id &amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        1 * customerRepository.findById(_) &amp;gt;&amp;gt; Mono.empty()&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.GET(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        StepVerifier.create(resFlux)&lt;br&gt;                .consumeErrorWith(error -&amp;gt; {&lt;br&gt;                    assert error instanceof HttpClientResponseException&lt;br&gt;                    assert (error as HttpClientResponseException).status == HttpStatus.NOT_FOUND&lt;br&gt;                })&lt;br&gt;                .verify()&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;delete customer by id &amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        1 * customerRepository.deleteById(_) &amp;gt;&amp;gt; Mono.just(1L)&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.DELETE(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        StepVerifier.create(resFlux)&lt;br&gt;                .consumeNextWith(s -&amp;gt; {&lt;br&gt;                    assert s.getStatus() == HttpStatus.NO_CONTENT&lt;br&gt;                })&lt;br&gt;                .expectComplete()&lt;br&gt;                .verify()&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    void &amp;#39;delete customer by none-existing id &amp;#39;() {&lt;br&gt;        given:&lt;br&gt;        1 * customerRepository.deleteById(_) &amp;gt;&amp;gt; Mono.just(0L)&lt;/pre&gt;&lt;pre&gt;        when:&lt;br&gt;        Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.DELETE(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log()&lt;/pre&gt;&lt;pre&gt;        then:&lt;br&gt;        StepVerifier.create(resFlux)&lt;br&gt;                .consumeErrorWith(error -&amp;gt; {&lt;br&gt;                    assert error instanceof HttpClientResponseException&lt;br&gt;                    assert (error as HttpClientResponseException).status == HttpStatus.NOT_FOUND&lt;br&gt;                })&lt;br&gt;                .verify()&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @MockBean(CustomerRepository)&lt;br&gt;    CustomerRepository mockedCustomerRepository() {// must use explicit type declaration&lt;br&gt;        Mock(CustomerRepository)&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In this test, we create a mock bean for CustomerRepository, note you have to declare type explicitly. Note, in the given block, a little different from the Mockito, it setups the assumptions and assertions in a single place.&lt;/p&gt;&lt;p&gt;Another great feature of Mongo is the Gridfs support. For those home-use cloud applications it is a simple alternative of AWS S3 storage service.&lt;/p&gt;&lt;p&gt;Next we will create a simple upload and download endpoint to store binary data into Mongo Gridfs storage and retrieve it from the Gridfs storage.&lt;/p&gt;&lt;p&gt;Firstly declare a GridFSBucket bean.&lt;/p&gt;&lt;pre&gt;@Factory&lt;br&gt;public class GridFSConfig {&lt;/pre&gt;&lt;pre&gt;    @Bean&lt;br&gt;    GridFSBucket gridFSBucket(MongoClient client) {&lt;br&gt;        return GridFSBuckets.create(client.getDatabase(&amp;quot;photos&amp;quot;))&lt;br&gt;                .withChunkSizeBytes(4096)&lt;br&gt;                //.withReadConcern(ReadConcern.MAJORITY)&lt;br&gt;                .withWriteConcern(WriteConcern.MAJORITY);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Now create a controller to handle the file upload and download.&lt;/p&gt;&lt;pre&gt;@Controller(&amp;quot;/photos&amp;quot;)&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;@Slf4j&lt;br&gt;public class PhotoController {&lt;/pre&gt;&lt;pre&gt;    private final GridFSBucket bucket;&lt;/pre&gt;&lt;pre&gt;    @Post(uri = &amp;quot;/&amp;quot;, consumes = {MediaType.MULTIPART_FORM_DATA})&lt;br&gt;    public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; upload(StreamingFileUpload file) {&lt;br&gt;        var filename = file.getFilename();&lt;br&gt;        var name = file.getName();&lt;br&gt;        var contentType = file.getContentType();&lt;br&gt;        var size = file.getSize();&lt;br&gt;        log.debug(&amp;quot;uploading file...\n filename:{},\n name:{},\n contentType: {},\n size: {} &amp;quot;, filename, name, contentType, size);&lt;br&gt;        var options = new GridFSUploadOptions();&lt;br&gt;        contentType.ifPresent(c -&amp;gt; options.metadata(new Document(&amp;quot;contentType&amp;quot;, c)));&lt;br&gt;        return Mono.from(this.bucket.uploadFromPublisher(&lt;br&gt;                                filename,&lt;br&gt;                                Mono.from(file).mapNotNull(partData -&amp;gt; {&lt;br&gt;                                    try {&lt;br&gt;                                        return partData.getByteBuffer();&lt;br&gt;                                    } catch (IOException e) {&lt;br&gt;                                        e.printStackTrace();&lt;br&gt;                                    }&lt;br&gt;                                    return null;&lt;br&gt;                                }),&lt;br&gt;                                options&lt;br&gt;                        )&lt;br&gt;                )&lt;br&gt;                .map(ObjectId::toHexString)&lt;br&gt;                .map(id -&amp;gt; ok(Map.of(&amp;quot;id&amp;quot;, id)));&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/{id}&amp;quot;, produces = {MediaType.APPLICATION_OCTET_STREAM})&lt;br&gt;    public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; download(@PathVariable ObjectId id) {&lt;br&gt;        return Mono.from(this.bucket.downloadToPublisher(id))&lt;br&gt;                .map(HttpResponse::ok);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Delete(uri = &amp;quot;/{id}&amp;quot;)&lt;br&gt;    public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; delete(@PathVariable ObjectId id) {&lt;br&gt;        return Mono.from(this.bucket.delete(id))&lt;br&gt;                .map(v -&amp;gt; noContent());&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;To upload a file, use bucket.uploadFromPublisher to transfer the upload data into a Gridfs bucket. To download a file, call downloadToPublisher to read data into a ByteBuffer and send the HTTP response. To remove it from the bucket, just invoke the delete method.&lt;/p&gt;&lt;h4&gt;Get the complete &lt;a href=&quot;https://github.com/hantsy/micronaut-sandbox/tree/master/album-service&quot;&gt;source codes&lt;/a&gt; from my Github.&lt;/h4&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9c418b403bc1&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/building-micronaut-applications-with-micronaut-mongo-reative-9c418b403bc1&quot;&gt;Building Micronaut applications with Micronaut Mongo Reative&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this post, we will explore the Micronaut Mongo Reactive feature. Unlike the Data JPA and R2dbc, the Mongo Reactive feature is not part of the Micronaut Data project. Micronaut Mongo Reactive is a light-weight wrapper of the official Mongo Java Drivers, and provides autoconfiguration of MongoClient from application properties.Photo by Fabian Mardi on UnsplashGetting StartedOpen your browser and navigate to Micronaut Launch to generate a new project skeleton for this post. Select the following items on this page.Java version: 17Language: JavaBuild tool: GradleTest framework: SpockIncluded Features: mongo-reactive etc.Click GENERATE PROJECT button to generate a project archive, download it and extract the files into disk, and import to your IDE, such as IDEA.In the previous examples, we used JUnit and Kotest as testing framework, in this example, we switched to use Spock and Groovy to write tests.Create a Mongo document entity class.@Data@Builder@NoArgsConstructor@AllArgsConstructor(staticName = &amp;quot;of&amp;quot;)public class Customer { private ObjectId id; private String name; private int age; private Address address; public static Customer of(String name, int age, Address address) { return Customer.of(null, name, age, address); }}The Address is an embedded Document in a Customer Document.@Data@Builder@NoArgsConstructor@AllArgsConstructor(staticName = &amp;quot;of&amp;quot;)public class Address { private String street; private String city; private String zip;}Create a Repository class to perform CRUD operations on Customer.@Singleton@RequiredArgsConstructor@Slf4jpublic class CustomerRepository { private final MongoClient mongoClient; private final DefaultMongoConfiguration mongoConfiguration; public Flux&amp;lt;Customer&amp;gt; findAll() { return Flux.from(customersCollection().find()); } public Mono&amp;lt;Customer&amp;gt; findById(ObjectId id) { return Mono.from(customersCollection().find(Filters.eq(id))); } public Mono&amp;lt;ObjectId&amp;gt; insertOne(Customer data) { return Mono.from(customersCollection().insertOne(data, new InsertOneOptions().bypassDocumentValidation(false))) .mapNotNull(result -&amp;gt; result.getInsertedId().asObjectId().getValue()); } public Mono&amp;lt;Map&amp;lt;Integer, BsonValue&amp;gt;&amp;gt; insertMany(List&amp;lt;Customer&amp;gt; data) { return Mono.from(customersCollection().insertMany(data, new InsertManyOptions().bypassDocumentValidation(false).ordered(true))) .map(InsertManyResult::getInsertedIds); } public Mono&amp;lt;Long&amp;gt; deleteById(ObjectId id) { return Mono.from(customersCollection().deleteOne(Filters.eq(id), new DeleteOptions())) .map(DeleteResult::getDeletedCount); } public void init() { var people = List.of( Customer.of(&amp;quot;Charles Babbage&amp;quot;, 45, Address.of(&amp;quot;5 Devonshire Street&amp;quot;, &amp;quot;London&amp;quot;, &amp;quot;W11&amp;quot;)), Customer.of(&amp;quot;Alan Turing&amp;quot;, 28, Address.of(&amp;quot;Bletchley Hall&amp;quot;, &amp;quot;Bletchley Park&amp;quot;, &amp;quot;MK12&amp;quot;)), Customer.of(&amp;quot;Timothy Berners-Lee&amp;quot;, 61, Address.of(&amp;quot;Colehill&amp;quot;, &amp;quot;Wimborne&amp;quot;, null)) ); Mono.from(customersCollection().drop()) .then() .thenMany(this.insertMany(people)) .subscribe( result -&amp;gt; result.forEach((key, value) -&amp;gt; log.debug(&amp;quot;saved key: {}, value: {}&amp;quot;, key, value)), error -&amp;gt; log.debug(&amp;quot;initialization failed: {}&amp;quot;, error), () -&amp;gt; log.debug(&amp;quot;done&amp;quot;) ); } public Mono&amp;lt;Long&amp;gt; deleteAll() { return Mono.from(customersCollection().deleteMany(Filters.empty(), new DeleteOptions())) .map(DeleteResult::getDeletedCount); } private MongoCollection&amp;lt;Customer&amp;gt; customersCollection() { return mongoClient .getDatabase(&amp;quot;userdb&amp;quot;) .getCollection(&amp;quot;customers&amp;quot;, Customer.class); }}When a mongo.uri is set in the application.yml, there is a reactive MongoClient bean is available.In the above codes:The customersCollection() method defines a Mongo collection mapped to the Customer class. As you see, there is a ObjectId id field is defined in the Customer class, when saving a Customer instance, it will generate a new ObjectId for it and saving it to the customers document _id in MongoDB automatically.The MongoClient provides methods for CRUD operations, but it is based on the Reactive Streams APIs. Here we use Reactor API in this project, we use Mono and Flux to wrap the operation result into Reactor friendly APIs.Now let’s create a test to test the CustomerRepository.@MicronautTest(startApplication = false)@Slf4jclass CustomerRepositorySpec extends Specification { @Inject EmbeddedApplication&amp;lt;?&amp;gt; application @Inject CustomerRepository customerRepository; def setup() { CountDownLatch latch = new CountDownLatch(1) customerRepository.deleteAll() .doOnTerminate(_ -&amp;gt; latch.countDown()) .subscribe(it -&amp;gt; log.debug &amp;quot;deleted customers: {}&amp;quot;, it) latch.await(1000, TimeUnit.MILLISECONDS) } void &amp;#39;application is not running&amp;#39;() { expect: !application.running } void &amp;#39;test findAll&amp;#39;() { given: this.customerRepository.insertMany(List.of(Customer.of(&amp;quot;Jack&amp;quot;, 40, null))) .block(Duration.ofMillis(5000L)) when: def result = this.customerRepository.findAll() then: StepVerifier.create(result) .expectNextMatches(it -&amp;gt; it.name == &amp;quot;Jack&amp;quot;) .expectComplete() .verify() }}To test the persistence layer, we do not need a running server. So add startApplication = false to the MicronautTest annotation.Generally, a Spock test is called a Specfication, you can override the lifecycle methods in your tests, such as setup, setupSpec , etc. Every test follows the BDD pattern, aka the given/ when/ then patten.In the above codes, we override the setup method and clear the data in the database. And then create a test to verify the insert and find operations, in the then block, we use StepVerify to assert the result in Reactive Streams.If you want to start up a Testcontainers Docker to serve the required Mongo database, try to define a Mongo container instance with Shared and AutoCleanup annotation, and override setupSpec to start the Mongo service and ensure it is available for all tests in this specification.@Shared@AutoCleanupGenericContainer mongo = new GenericContainer(&amp;quot;mongo&amp;quot;) .withExposedPorts(27017)def setupSpec() { mongo.start()}Like the previous examples, we can create a bean to listen a ServerStartupEvent to initialize some sample data for test purpose.@Singleton@Requires(notEnv = &amp;quot;mock&amp;quot;)@Slf4j@RequiredArgsConstructorpublic class DataInitializer { private final CustomerRepository customerRepository; @EventListener public void onStart(ServerStartupEvent event) { log.debug(&amp;quot;starting data initialization...&amp;quot;); this.customerRepository.init(); }}Try to create a controller to expose the RESTful APIs.@Controller(&amp;quot;/customers&amp;quot;)@RequiredArgsConstructor@Slf4jpublic class CustomerController { private final CustomerRepository customerRepository; @Get(uri = &amp;quot;/&amp;quot;, produces = {MediaType.APPLICATION_JSON}) public Flux&amp;lt;?&amp;gt; all() { return this.customerRepository.findAll(); } @Get(uri = &amp;quot;/{id}&amp;quot;, produces = {MediaType.APPLICATION_JSON}) public Mono&amp;lt;MutableHttpResponse&amp;lt;Customer&amp;gt;&amp;gt; byId(@PathVariable ObjectId id) { return this.customerRepository.findById(id) .map(HttpResponse::ok) .switchIfEmpty(Mono.just(notFound())); } @Post(uri = &amp;quot;/&amp;quot;, consumes = {MediaType.APPLICATION_JSON}) public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; create(@Body Customer data) { return this.customerRepository.insertOne(data) .map(id -&amp;gt; created(URI.create(&amp;quot;/customers/&amp;quot; + id.toHexString()))); } @Delete(uri = &amp;quot;/{id}&amp;quot;) public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; delete(@PathVariable ObjectId id) { return this.customerRepository.deleteById(id) .map(deleted -&amp;gt; { if (deleted &amp;gt; 0) { return noContent(); } else { return notFound(); } }); }}To process the ObjectId in the request path, create a TypeConverter to convert id from String type to ObjectId.@Singletonpublic class StringToObjectIdConverter implements TypeConverter&amp;lt;String, ObjectId&amp;gt; { @Override public Optional&amp;lt;ObjectId&amp;gt; convert(String object, Class&amp;lt;ObjectId&amp;gt; targetType, ConversionContext context) { return Optional.of(new ObjectId(object)); }}In order to serialize the id (ObjectId type) of Customer as a String in the HTTP response, create a JsonSerializer to customize the serialization process. When it is applied, the id field is serialized as a hex string instead of a JSON object.@Singletonpublic class ObjectIdJsonSerializer extends JsonSerializer&amp;lt;ObjectId&amp;gt; { @Override public void serialize(ObjectId value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeString(value.toHexString()); }}Create a test for the CustomerController.@MicronautTest(environments = [&amp;quot;mock&amp;quot;])class CustomerControllerSpec extends Specification { @Inject EmbeddedApplication&amp;lt;?&amp;gt; application @Inject @Client(&amp;quot;/&amp;quot;) ReactorHttpClient client @Inject CustomerRepository customerRepository def &amp;#39;test it works&amp;#39;() { expect: application.running } void &amp;#39;get all customers&amp;#39;() { given: 1 * customerRepository.findAll() &amp;gt;&amp;gt; Flux.just(Customer.of(ObjectId.get(), &amp;quot;Jack&amp;quot;, 40, null), Customer.of(ObjectId.get(), &amp;quot;Rose&amp;quot;, 20, null)) when: Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.GET(&amp;quot;/customers&amp;quot;), String).log() then: //1 * customers.findAll() &amp;gt;&amp;gt; Flux.just(Customer.of(ObjectId.get(), &amp;quot;Jack&amp;quot;, 40, null), Customer.of(ObjectId.get(), &amp;quot;Rose&amp;quot;, 20, null)) StepVerifier.create(resFlux) //.expectNextCount(1) .consumeNextWith(s -&amp;gt; { assert s.getStatus() == HttpStatus.OK assert s.body().contains(&amp;#39;Jack&amp;#39;) }) .expectComplete() .verify() } void &amp;#39;create a new customer&amp;#39;() { given: def objId = ObjectId.get() 1 * customerRepository.insertOne(_) &amp;gt;&amp;gt; Mono.just(objId) when: def body = Customer.of(null, &amp;quot;Jack&amp;quot;, 40, null) Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.POST(&amp;quot;/customers&amp;quot;, body), String).log() then: StepVerifier.create(resFlux) .consumeNextWith(s -&amp;gt; { assert s.getStatus() == HttpStatus.CREATED assert s.header(&amp;quot;Location&amp;quot;) == &amp;#39;/customers/&amp;#39; + objId.toHexString() }) .expectComplete() .verify() } void &amp;#39;get customer by id &amp;#39;() { given: 1 * customerRepository.findById(_) &amp;gt;&amp;gt; Mono.just(Customer.of(ObjectId.get(), &amp;quot;Jack&amp;quot;, 40, null)) when: Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.GET(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log() then: StepVerifier.create(resFlux) .consumeNextWith(s -&amp;gt; { assert s.getStatus() == HttpStatus.OK assert s.body().contains(&amp;#39;Jack&amp;#39;) }) .expectComplete() .verify() } void &amp;#39;get customer by none-existing id &amp;#39;() { given: 1 * customerRepository.findById(_) &amp;gt;&amp;gt; Mono.empty() when: Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.GET(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log() then: StepVerifier.create(resFlux) .consumeErrorWith(error -&amp;gt; { assert error instanceof HttpClientResponseException assert (error as HttpClientResponseException).status == HttpStatus.NOT_FOUND }) .verify() } void &amp;#39;delete customer by id &amp;#39;() { given: 1 * customerRepository.deleteById(_) &amp;gt;&amp;gt; Mono.just(1L) when: Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.DELETE(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log() then: StepVerifier.create(resFlux) .consumeNextWith(s -&amp;gt; { assert s.getStatus() == HttpStatus.NO_CONTENT }) .expectComplete() .verify() } void &amp;#39;delete customer by none-existing id &amp;#39;() { given: 1 * customerRepository.deleteById(_) &amp;gt;&amp;gt; Mono.just(0L) when: Flux&amp;lt;HttpResponse&amp;lt;String&amp;gt;&amp;gt; resFlux = client.exchange(HttpRequest.DELETE(&amp;quot;/customers/&amp;quot; + ObjectId.get().toHexString()), String).log() then: StepVerifier.create(resFlux) .consumeErrorWith(error -&amp;gt; { assert error instanceof HttpClientResponseException assert (error as HttpClientResponseException).status == HttpStatus.NOT_FOUND }) .verify() } @MockBean(CustomerRepository) CustomerRepository mockedCustomerRepository() {// must use explicit type declaration Mock(CustomerRepository) }}In this test, we create a mock bean for CustomerRepository, note you have to declare type explicitly. Note, in the given block, a little different from the Mockito, it setups the assumptions and assertions in a single place.Another great feature of Mongo is the Gridfs support. For those home-use cloud applications it is a simple alternative of AWS S3 storage service.Next we will create a simple upload and download endpoint to store binary data into Mongo Gridfs storage and retrieve it from the Gridfs storage.Firstly declare a GridFSBucket bean.@Factorypublic class GridFSConfig { @Bean GridFSBucket gridFSBucket(MongoClient client) { return GridFSBuckets.create(client.getDatabase(&amp;quot;photos&amp;quot;)) .withChunkSizeBytes(4096) //.withReadConcern(ReadConcern.MAJORITY) .withWriteConcern(WriteConcern.MAJORITY); }}Now create a controller to handle the file upload and download.@Controller(&amp;quot;/photos&amp;quot;)@RequiredArgsConstructor@Slf4jpublic class PhotoController { private final GridFSBucket bucket; @Post(uri = &amp;quot;/&amp;quot;, consumes = {MediaType.MULTIPART_FORM_DATA}) public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; upload(StreamingFileUpload file) { var filename = file.getFilename(); var name = file.getName(); var contentType = file.getContentType(); var size = file.getSize(); log.debug(&amp;quot;uploading file...\n filename:{},\n name:{},\n contentType: {},\n size: {} &amp;quot;, filename, name, contentType, size); var options = new GridFSUploadOptions(); contentType.ifPresent(c -&amp;gt; options.metadata(new Document(&amp;quot;contentType&amp;quot;, c))); return Mono.from(this.bucket.uploadFromPublisher( filename, Mono.from(file).mapNotNull(partData -&amp;gt; { try { return partData.getByteBuffer(); } catch (IOException e) { e.printStackTrace(); } return null; }), options ) ) .map(ObjectId::toHexString) .map(id -&amp;gt; ok(Map.of(&amp;quot;id&amp;quot;, id))); } @Get(uri = &amp;quot;/{id}&amp;quot;, produces = {MediaType.APPLICATION_OCTET_STREAM}) public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; download(@PathVariable ObjectId id) { return Mono.from(this.bucket.downloadToPublisher(id)) .map(HttpResponse::ok); } @Delete(uri = &amp;quot;/{id}&amp;quot;) public Mono&amp;lt;HttpResponse&amp;lt;?&amp;gt;&amp;gt; delete(@PathVariable ObjectId id) { return Mono.from(this.bucket.delete(id)) .map(v -&amp;gt; noContent()); }}To upload a file, use bucket.uploadFromPublisher to transfer the upload data into a Gridfs bucket. To download a file, call downloadToPublisher to read data into a ByteBuffer and send the HTTP response. To remove it from the bucket, just invoke the delete method.Get the complete source codes from my Github.Building Micronaut applications with Micronaut Mongo Reative was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Building Micronaut applications with Micronaut Data R2dbc and Kotlin Coroutines</title><link href="/blog/2021/building-micronaut-applications-with-micronaut-data-r2dbc-and-kotlin-coroutines/" rel="alternate" type="text/html" title="Building Micronaut applications with Micronaut Data R2dbc and Kotlin Coroutines" /><published>2021-12-08T00:00:00+00:00</published><updated>2021-12-08T00:00:00+00:00</updated><id>/blog/2021/building-micronaut-applications-with-micronaut-data-r2dbc-and-kotlin-coroutines</id><content type="html" xml:base="/blog/2021/building-micronaut-applications-with-micronaut-data-r2dbc-and-kotlin-coroutines/">&lt;p&gt;In this post, we will continue to explore Micronaut Data R2dbc, and rewrite the previous Data Jdbc/Kotlin example with Data R2dbc and Kotlin Coroutines.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qU5tVqVsr_jHM71udRktIw.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@ling_gigi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Gigi&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/china-snow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;In contrast to Jdbc, R2dbc is another RDBMS database connection specification but provides asynchronous none-blocking API for users. R2dbc API is totally compatible with Reactive Streams specification. Kotlin Coroutines is an official Kotlin extension provides an event-loop based asynchronous programming model.&lt;/p&gt;&lt;h3&gt;Getting Started&lt;/h3&gt;&lt;p&gt;Open your browser and navigate to &lt;a href=&quot;https://micronaut.io/launch&quot;&gt;Micronaut Launch&lt;/a&gt; to generate a new project skeleton for this post. Select the following items on this page.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java version: &lt;strong&gt;17&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Language: &lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Build tool: &lt;strong&gt;Gradle Kotlin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Test framework: &lt;strong&gt;Kotest&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Included Features: &lt;strong&gt;data-r2dbc&lt;/strong&gt;, &lt;strong&gt;postgres&lt;/strong&gt;, &lt;strong&gt;kotlin-extension-functions&lt;/strong&gt; etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Click &lt;strong&gt;GENERATE PROJECT&lt;/strong&gt; button to generate a project archive, download it and extract the files into disk, and import to your IDE, such as IDEA.&lt;/p&gt;&lt;p&gt;Open &lt;em&gt;pom.xml&lt;/em&gt; file, add Kotlin Coroutines into the project dependencies.&lt;/p&gt;&lt;pre&gt;//kotlin coroutines&lt;br&gt;implementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-core&amp;quot;)&lt;br&gt;implementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-reactor&amp;quot;)&lt;/pre&gt;&lt;p&gt;The kotlinx-coroutines-reactor provides exchanges between the Reactor API and Kotlin Coroutines API.&lt;/p&gt;&lt;p&gt;Create an Entity mapped to a table in the database.&lt;/p&gt;&lt;pre&gt;@MappedEntity(value = &amp;quot;posts&amp;quot;, namingStrategy = NamingStrategies.UnderScoreSeparatedLowerCase::class)&lt;br&gt;data class Post(&lt;br&gt;    @AutoPopulated//generated value UUID does not work here.&lt;br&gt;    @field:Id var id: UUID? = null,&lt;br&gt;    var title: String,&lt;br&gt;    var content: String,&lt;br&gt;    var status: Status? = Status.DRAFT,&lt;br&gt;    @field:DateCreated var createdAt: LocalDateTime? = LocalDateTime.now()&lt;br&gt;)&lt;/pre&gt;&lt;p&gt;Micronaut Data R2dbc does not include a UUID ID generator strategy, here we use @AutoPopulated to generate a random UUID before persisting into database.&lt;/p&gt;&lt;p&gt;Create a Repository interface for Post entity.&lt;/p&gt;&lt;pre&gt;@R2dbcRepository(dialect = Dialect.POSTGRES)&lt;br&gt;interface PostRepository : CoroutineCrudRepository&amp;lt;Post, UUID&amp;gt;, CoroutineJpaSpecificationExecutor&amp;lt;Post&amp;gt;&lt;/pre&gt;&lt;p&gt;Micronaut Data provides several Repository interface for ReactiveStreams API, for Reactor users, there is ReactorCrudRepository. The CoroutineCrudRepository is a Kotlin Coroutines compatible Repository interface which returns a &lt;em&gt;suspend&lt;/em&gt; result in the functions.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;The &lt;/em&gt;&lt;em&gt;@R2dbcRepository requires a &lt;/em&gt;&lt;em&gt;dialect here, else it will fail at the application startup.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Similarly, JpaSpecificationExecutor has some variants for Reactive Streams, the CoroutineJpaSpecificationExecutor is ready for Kotlin Coroutines. We have created a Specificaitons to setup several criteria for query, update and delete operations, we will reuse them in this post.&lt;/p&gt;&lt;p&gt;Let’s move to the Controller, create a new controller class named PostController.&lt;/p&gt;&lt;pre&gt;@Controller(&amp;quot;/posts&amp;quot;)&lt;br&gt;class PostController(private val posts: PostRepository) {&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/&amp;quot;, produces = [MediaType.APPLICATION_JSON])&lt;br&gt;    fun all(): HttpResponse&amp;lt;Flow&amp;lt;Post&amp;gt;&amp;gt; = ok(posts.findAll())&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/{id}&amp;quot;, produces = [MediaType.APPLICATION_JSON])&lt;br&gt;    suspend fun byId(@PathVariable id: UUID): HttpResponse&amp;lt;Any&amp;gt; {&lt;br&gt;        val post = posts.findById(id) ?: return notFound()&lt;br&gt;        return ok(post)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @io.micronaut.http.annotation.Post(consumes = [MediaType.APPLICATION_JSON])&lt;br&gt;    suspend fun create(@Body body: Post): HttpResponse&amp;lt;Any&amp;gt; {&lt;br&gt;        val saved = posts.save(body)&lt;br&gt;        return created(URI.create(&amp;quot;/posts/&amp;quot; + saved.id))&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;It looks very similar to Jdbc version we have done in the last post, but here we return a Kotlin Coroutines specific Flow type or use a suspend function. The difference is all of these methods are executed in an coroutine context.&lt;/p&gt;&lt;p&gt;Now let’s try to add some sample data via a DataInitializer bean,which listens to a ServerStartUpEvent.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;class DataInitializer(private val posts: PostRepository) {&lt;/pre&gt;&lt;pre&gt;    @EventListener//does not support `suspend`&lt;br&gt;    fun onStartUp(e: ServerStartupEvent) {&lt;br&gt;        log.info(&amp;quot;starting data initialization at StartUpEvent: $e&amp;quot;)&lt;/pre&gt;&lt;pre&gt;        runBlocking {&lt;br&gt;            val deleteAll = posts.deleteAll()&lt;br&gt;            log.info(&amp;quot;deleted posts: $deleteAll&amp;quot;)&lt;/pre&gt;&lt;pre&gt;            val data = listOf(&lt;br&gt;                Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin Coroutine&amp;quot;, content = &amp;quot;test&amp;quot;),&lt;br&gt;                Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin Coroutine: part 2&amp;quot;, content = &amp;quot;test&amp;quot;)&lt;br&gt;            )&lt;br&gt;            data.forEach { log.debug(&amp;quot;saving: $it&amp;quot;) }&lt;br&gt;            posts.saveAll(data)&lt;br&gt;                .onEach { log.debug(&amp;quot;saved post: $it&amp;quot;) }&lt;br&gt;                .onCompletion { log.debug(&amp;quot;completed.&amp;quot;) }&lt;br&gt;                .flowOn(Dispatchers.IO)&lt;br&gt;                .launchIn(this);&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        log.info(&amp;quot;data initialization is done...&amp;quot;)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    companion object DataInitializer {&lt;br&gt;        private val log = LoggerFactory.getLogger(DataInitializer::class.java)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;The EventListener does not support a suspend function, use a runBlocking to block the current thread and run the &lt;em&gt;suspend&lt;/em&gt; functions in sequence.&lt;/p&gt;&lt;h3&gt;JPA Criteria API&lt;/h3&gt;&lt;p&gt;Micronaut Data provides JPA criteria API support for both Data Jdbc and Data R2dbc, and also add some JpaSpecificationExecutor variants for Reactive Streams API, as mentioned in previous sections, there is a CoroutineJpaSpecificationExecutor for Kotlin Coroutines.&lt;/p&gt;&lt;p&gt;Add jakarta-persistence-api into dependencies to provide JPA Criteria API.&lt;/p&gt;&lt;pre&gt;implementation(&amp;quot;jakarta.persistence:jakarta.persistence-api:3.0.0&amp;quot;)&lt;/pre&gt;&lt;p&gt;Let’s reuse Specifications we have created in the last post.&lt;/p&gt;&lt;p&gt;Create a test to verify the criteria defined in the Specifications.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = [Environment.TEST], startApplication = false)&lt;br&gt;class PostRepositoryTest(&lt;br&gt;    private val posts: PostRepository,&lt;br&gt;    private val template: R2dbcOperations&lt;br&gt;) : StringSpec({&lt;/pre&gt;&lt;pre&gt;    &amp;quot;save and find posts&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;;&lt;br&gt;        Mono&lt;br&gt;            .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt;&lt;br&gt;                Mono.from(&lt;br&gt;                    status.connection.createStatement(sql)&lt;br&gt;                        .bind(0, &amp;quot;test title&amp;quot;)&lt;br&gt;                        .bind(1, &amp;quot;test content&amp;quot;)&lt;br&gt;                        .bind(2, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;                        .execute()&lt;br&gt;                ).flatMap { Mono.from(it.rowsUpdated) }&lt;br&gt;            })&lt;br&gt;            .log()&lt;br&gt;            .`as` { StepVerifier.create(it) }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .verifyComplete()&lt;/pre&gt;&lt;pre&gt;        runBlocking {&lt;br&gt;            val all = posts.findAll().toList()&lt;br&gt;            all shouldHaveSize 1&lt;br&gt;            log.debug(&amp;quot;all posts: $all&amp;quot;)&lt;br&gt;            all.map { it.title }.forAny { it shouldContain &amp;quot;test&amp;quot; }&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;find by title&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;;&lt;br&gt;        Mono&lt;br&gt;            .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt;&lt;br&gt;                Mono.from(&lt;br&gt;                    status.connection.createStatement(sql)&lt;br&gt;                        .bind(0, &amp;quot;test title&amp;quot;)&lt;br&gt;                        .bind(1, &amp;quot;test content&amp;quot;)&lt;br&gt;                        .bind(2, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;                        .execute()&lt;br&gt;                ).flatMap { Mono.from(it.rowsUpdated) }&lt;br&gt;            })&lt;br&gt;            .`as` { StepVerifier.create(it) }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .verifyComplete()&lt;/pre&gt;&lt;pre&gt;        runBlocking {&lt;br&gt;            val all = posts.findAll(Specifications.titleLike(&amp;quot;test&amp;quot;)).toList()&lt;br&gt;            log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size)&lt;br&gt;            all shouldHaveSize 1&lt;/pre&gt;&lt;pre&gt;            val all2 = posts.findAll(Specifications.titleLike(&amp;quot;test2&amp;quot;)).toList()&lt;br&gt;            log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size)&lt;br&gt;            all2 shouldHaveSize 0&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;find by keyword&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;;&lt;br&gt;        Flux&lt;br&gt;            .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt;&lt;br&gt;                val statement = status.connection.createStatement(sql)&lt;br&gt;                statement&lt;br&gt;                    .bind(0, &amp;quot;test title&amp;quot;)&lt;br&gt;                    .bind(1, &amp;quot;test content&amp;quot;)&lt;br&gt;                    .bind(2, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;                    .add()&lt;br&gt;                statement.bind(0, &amp;quot;test2 title&amp;quot;)&lt;br&gt;                    .bind(1, &amp;quot;test2 content&amp;quot;)&lt;br&gt;                    .bind(2, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;                    .add()&lt;/pre&gt;&lt;pre&gt;                Flux.from(statement.execute()).flatMap { Flux.from(it.rowsUpdated) }&lt;br&gt;            })&lt;br&gt;            .`as` { StepVerifier.create(it) }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .verifyComplete()&lt;/pre&gt;&lt;pre&gt;        runBlocking {&lt;br&gt;            val all = posts.findAll(Specifications.byKeyword(&amp;quot;test&amp;quot;)).toList()&lt;br&gt;            log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size)&lt;br&gt;            all shouldHaveSize 2&lt;/pre&gt;&lt;pre&gt;            val all2 = posts.findAll(Specifications.byKeyword(&amp;quot;test2&amp;quot;)).toList()&lt;br&gt;            log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size)&lt;br&gt;            all2 shouldHaveSize 1&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;update posts&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;;&lt;br&gt;        Flux&lt;br&gt;            .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt;&lt;br&gt;                val statement = status.connection.createStatement(sql)&lt;br&gt;                statement&lt;br&gt;                    .bind(0, &amp;quot;test title&amp;quot;)&lt;br&gt;                    .bind(1, &amp;quot;test content&amp;quot;)&lt;br&gt;                    .bind(2, &amp;quot;PENDING_MODERATED&amp;quot;)&lt;br&gt;                    .add()&lt;/pre&gt;&lt;pre&gt;                statement&lt;br&gt;                    .bind(0, &amp;quot;test2 title&amp;quot;)&lt;br&gt;                    .bind(1, &amp;quot;test2 content&amp;quot;)&lt;br&gt;                    .bind(2, &amp;quot;PENDING_MODERATED&amp;quot;)&lt;br&gt;                    .add()&lt;/pre&gt;&lt;pre&gt;                Flux.from(statement.execute()).flatMap { Flux.from(it.rowsUpdated) }&lt;br&gt;            })&lt;br&gt;            .`as` { StepVerifier.create(it) }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .verifyComplete()&lt;/pre&gt;&lt;pre&gt;        runBlocking {&lt;br&gt;            val updated = posts.updateAll(Specifications.rejectAllPendingModerated())&lt;br&gt;            log.debug(&amp;quot;updated posts size:{}&amp;quot;, updated)&lt;br&gt;            updated shouldBe 2&lt;/pre&gt;&lt;pre&gt;            val all = posts.findAll().toList()&lt;br&gt;            all shouldHaveSize 2&lt;br&gt;            all.map { it.status }.forAny { it shouldBe Status.REJECTED }&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;remove posts&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;;&lt;br&gt;        Flux&lt;br&gt;            .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt;&lt;br&gt;                val statement = status.connection.createStatement(sql)&lt;br&gt;                statement&lt;br&gt;                    .bind(0, &amp;quot;test title&amp;quot;)&lt;br&gt;                    .bind(1, &amp;quot;test content&amp;quot;)&lt;br&gt;                    .bind(2, &amp;quot;REJECTED&amp;quot;)&lt;br&gt;                    .add()&lt;br&gt;                statement&lt;br&gt;                    .bind(0, &amp;quot;test2 title&amp;quot;)&lt;br&gt;                    .bind(1, &amp;quot;test2 content&amp;quot;)&lt;br&gt;                    .bind(2, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;                    .add()&lt;/pre&gt;&lt;pre&gt;                Flux.from(statement.execute()).flatMap { Flux.from(it.rowsUpdated) }&lt;br&gt;            })&lt;br&gt;            .`as` { StepVerifier.create(it) }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .consumeNextWith { it shouldBeEqualComparingTo 1 }&lt;br&gt;            .verifyComplete()&lt;/pre&gt;&lt;pre&gt;        runBlocking {&lt;br&gt;            val deleted = posts.deleteAll(Specifications.removeAllRejected())&lt;br&gt;            log.debug(&amp;quot;deleted posts size:{}&amp;quot;, deleted)&lt;br&gt;            deleted shouldBe 1&lt;/pre&gt;&lt;pre&gt;            val all = posts.findAll().toList()&lt;br&gt;            all shouldHaveSize 1&lt;br&gt;            all.map { it.status }.forAny { it shouldBe Status.DRAFT }&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}) {&lt;br&gt;    companion object {&lt;br&gt;        private val log: Logger = LoggerFactory.getLogger(PostRepositoryTest::class.java)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    override fun beforeEach(testCase: TestCase) {&lt;br&gt;        val sql = &amp;quot;delete from posts&amp;quot;;&lt;/pre&gt;&lt;pre&gt;        val latch = CountDownLatch(1)&lt;br&gt;        Mono&lt;br&gt;            .from(&lt;br&gt;                this.template.withConnection { conn: Connection -&amp;gt;&lt;br&gt;                    Mono.from(conn.beginTransaction())&lt;br&gt;                        .then(Mono.from(conn.createStatement(sql).execute())&lt;br&gt;                            .flatMap { Mono.from(it.rowsUpdated) }&lt;br&gt;                            .doOnNext { log.debug(&amp;quot;deleted rows: $it &amp;quot;) }&lt;br&gt;                        )&lt;br&gt;                        .then(Mono.from(conn.commitTransaction()))&lt;br&gt;                        .doOnError { Mono.from(conn.rollbackTransaction()).then() }&lt;br&gt;                }&lt;br&gt;            )&lt;br&gt;            .log()&lt;br&gt;            .doOnTerminate { latch.countDown() }&lt;br&gt;            .subscribe(&lt;br&gt;                { data -&amp;gt; log.debug(&amp;quot;deleted posts: $data &amp;quot;) },&lt;br&gt;                { error -&amp;gt; log.error(&amp;quot;error of cleaning posts: $error&amp;quot;) },&lt;br&gt;                { log.info(&amp;quot;done&amp;quot;) }&lt;br&gt;            )&lt;/pre&gt;&lt;pre&gt;        latch.await(5000, TimeUnit.MILLISECONDS)&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;We converted the existing Jdbc version to R2dbc, there are some mainly difference.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Similar to the blocking TransactionOperations, R2dbcOperations provides withConnection and withTransaction to wrap data operations within a connection or transaction boundary.&lt;/li&gt;&lt;li&gt;R2dbc Connection is based on ReactiveStreams API.&lt;/li&gt;&lt;li&gt;When binding parameters to the SQL statement, the parameter indices start with &lt;strong&gt;0&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;The SQL parameter placeholders are dependent on the database itself, for example, Postgres use $1, $2...&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Testing Controller&lt;/h3&gt;&lt;p&gt;In this post, we still use Kotest as testing framework, as you see in the above PostRepositoryTest, we use a runBlocking to wrap the coroutines execution in a blocking context.&lt;/p&gt;&lt;p&gt;The kotlinx-coroutines-test provides some helpers to simplify the testing of Kotlin Coroutines, eg. runBlockingTest, etc. Add kotlinx-coroutines-test into the test dependencies.&lt;/p&gt;&lt;pre&gt;//gradle.properties&lt;br&gt;kotlinCoVersion=1.6.0-RC&lt;/pre&gt;&lt;pre&gt;//build.gradle.kt&lt;br&gt;val kotlinCoVersion=project.properties.get(&amp;quot;kotlinCoVersoin&amp;quot;)&lt;/pre&gt;&lt;pre&gt;//update versions of kotlin coroutines&lt;br&gt;implementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoVersion}&amp;quot;)&lt;br&gt;implementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCoVersion}&amp;quot;)&lt;/pre&gt;&lt;pre&gt;testImplementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:${kotlinCoVersion}&amp;quot;)&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;There is &lt;/em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/70243380/test-kotlin-coroutines-with-runblockingtest-failed&quot;&gt;&lt;em&gt;an issue&lt;/em&gt;&lt;/a&gt;&lt;em&gt; to use &lt;/em&gt;&lt;em&gt;runBlockingTest in a test, make sure you are using the latest 1.6.0-RC, and use &lt;/em&gt;&lt;em&gt;runTest instead.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Similar to the runBlocking, you can use runTest to wrap the testing functionality.&lt;/p&gt;&lt;pre&gt;@Test&lt;br&gt;fun `test GET all posts endpoint with runTest`() = runTest {&lt;br&gt;    val response = client.exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java).awaitSingle()&lt;br&gt;    response.status shouldBe HttpStatus.OK&lt;br&gt;    response.body()!!.map { it.title }.forAny {&lt;br&gt;        it shouldContain &amp;quot;Micronaut&amp;quot;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;The &lt;/em&gt;&lt;em&gt;runBlockingTest is deprecated in the latest 1.6.0 version of Kotlin Coroutines.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;We can also mock the repository when testing controllers, as we’ve done in the previous post. Mockk provides some variants for Kotlin Coroutines, such as coEvery, coVerify, etc.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = [&amp;quot;mock&amp;quot;])&lt;br&gt;class PostControllerTest(&lt;br&gt;    private val postRepository: PostRepository,&lt;br&gt;    @Client(&amp;quot;/&amp;quot;) private var client: HttpClient&lt;br&gt;) : FunSpec({&lt;/pre&gt;&lt;pre&gt;    test(&amp;quot;test get posts endpoint&amp;quot;) {&lt;br&gt;        val posts = getMock(postRepository)&lt;br&gt;        coEvery { posts.findAll() }&lt;br&gt;            .returns(&lt;br&gt;                flowOf(&lt;br&gt;                    Post(&lt;br&gt;                        id = UUID.randomUUID(),&lt;br&gt;                        title = &amp;quot;test title&amp;quot;,&lt;br&gt;                        content = &amp;quot;test content&amp;quot;,&lt;br&gt;                        status = Status.DRAFT,&lt;br&gt;                        createdAt = LocalDateTime.now()&lt;br&gt;                    )&lt;br&gt;                )&lt;br&gt;            )&lt;br&gt;        val response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java)&lt;/pre&gt;&lt;pre&gt;        response.status shouldBe HttpStatus.OK&lt;br&gt;        response.body()!![0].title shouldBe &amp;quot;test title&amp;quot;&lt;/pre&gt;&lt;pre&gt;        coVerify(exactly = 1) { posts.findAll() }&lt;br&gt;    }&lt;br&gt;}) {&lt;br&gt;    @MockBean(PostRepository::class)&lt;br&gt;    fun mockedPostRepository() = mockk&amp;lt;PostRepository&amp;gt;()&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Firstly, create a mock bean for PostRepository , then do stubbing with a coEvery and verify the calls in the mocks with coVerify clause.&lt;/p&gt;&lt;h4&gt;Get the complete &lt;a href=&quot;https://github.com/hantsy/micronaut-sandbox/tree/master/r2dbc-kotlin-co&quot;&gt;source codes&lt;/a&gt; from my Github.&lt;/h4&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a1416db5a7d0&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/building-micronaut-applications-with-micronaut-data-r2dbc-and-kotlin-coroutines-a1416db5a7d0&quot;&gt;Building Micronaut applications with Micronaut Data R2dbc and Kotlin Coroutines&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this post, we will continue to explore Micronaut Data R2dbc, and rewrite the previous Data Jdbc/Kotlin example with Data R2dbc and Kotlin Coroutines.Photo by Gigi on UnsplashIn contrast to Jdbc, R2dbc is another RDBMS database connection specification but provides asynchronous none-blocking API for users. R2dbc API is totally compatible with Reactive Streams specification. Kotlin Coroutines is an official Kotlin extension provides an event-loop based asynchronous programming model.Getting StartedOpen your browser and navigate to Micronaut Launch to generate a new project skeleton for this post. Select the following items on this page.Java version: 17Language: KotlinBuild tool: Gradle KotlinTest framework: KotestIncluded Features: data-r2dbc, postgres, kotlin-extension-functions etc.Click GENERATE PROJECT button to generate a project archive, download it and extract the files into disk, and import to your IDE, such as IDEA.Open pom.xml file, add Kotlin Coroutines into the project dependencies.//kotlin coroutinesimplementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-core&amp;quot;)implementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-reactor&amp;quot;)The kotlinx-coroutines-reactor provides exchanges between the Reactor API and Kotlin Coroutines API.Create an Entity mapped to a table in the database.@MappedEntity(value = &amp;quot;posts&amp;quot;, namingStrategy = NamingStrategies.UnderScoreSeparatedLowerCase::class)data class Post( @AutoPopulated//generated value UUID does not work here. @field:Id var id: UUID? = null, var title: String, var content: String, var status: Status? = Status.DRAFT, @field:DateCreated var createdAt: LocalDateTime? = LocalDateTime.now())Micronaut Data R2dbc does not include a UUID ID generator strategy, here we use @AutoPopulated to generate a random UUID before persisting into database.Create a Repository interface for Post entity.@R2dbcRepository(dialect = Dialect.POSTGRES)interface PostRepository : CoroutineCrudRepository&amp;lt;Post, UUID&amp;gt;, CoroutineJpaSpecificationExecutor&amp;lt;Post&amp;gt;Micronaut Data provides several Repository interface for ReactiveStreams API, for Reactor users, there is ReactorCrudRepository. The CoroutineCrudRepository is a Kotlin Coroutines compatible Repository interface which returns a suspend result in the functions.The @R2dbcRepository requires a dialect here, else it will fail at the application startup.Similarly, JpaSpecificationExecutor has some variants for Reactive Streams, the CoroutineJpaSpecificationExecutor is ready for Kotlin Coroutines. We have created a Specificaitons to setup several criteria for query, update and delete operations, we will reuse them in this post.Let’s move to the Controller, create a new controller class named PostController.@Controller(&amp;quot;/posts&amp;quot;)class PostController(private val posts: PostRepository) { @Get(uri = &amp;quot;/&amp;quot;, produces = [MediaType.APPLICATION_JSON]) fun all(): HttpResponse&amp;lt;Flow&amp;lt;Post&amp;gt;&amp;gt; = ok(posts.findAll()) @Get(uri = &amp;quot;/{id}&amp;quot;, produces = [MediaType.APPLICATION_JSON]) suspend fun byId(@PathVariable id: UUID): HttpResponse&amp;lt;Any&amp;gt; { val post = posts.findById(id) ?: return notFound() return ok(post) } @io.micronaut.http.annotation.Post(consumes = [MediaType.APPLICATION_JSON]) suspend fun create(@Body body: Post): HttpResponse&amp;lt;Any&amp;gt; { val saved = posts.save(body) return created(URI.create(&amp;quot;/posts/&amp;quot; + saved.id)) }}It looks very similar to Jdbc version we have done in the last post, but here we return a Kotlin Coroutines specific Flow type or use a suspend function. The difference is all of these methods are executed in an coroutine context.Now let’s try to add some sample data via a DataInitializer bean,which listens to a ServerStartUpEvent.@Singletonclass DataInitializer(private val posts: PostRepository) { @EventListener//does not support `suspend` fun onStartUp(e: ServerStartupEvent) { log.info(&amp;quot;starting data initialization at StartUpEvent: $e&amp;quot;) runBlocking { val deleteAll = posts.deleteAll() log.info(&amp;quot;deleted posts: $deleteAll&amp;quot;) val data = listOf( Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin Coroutine&amp;quot;, content = &amp;quot;test&amp;quot;), Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin Coroutine: part 2&amp;quot;, content = &amp;quot;test&amp;quot;) ) data.forEach { log.debug(&amp;quot;saving: $it&amp;quot;) } posts.saveAll(data) .onEach { log.debug(&amp;quot;saved post: $it&amp;quot;) } .onCompletion { log.debug(&amp;quot;completed.&amp;quot;) } .flowOn(Dispatchers.IO) .launchIn(this); } log.info(&amp;quot;data initialization is done...&amp;quot;) } companion object DataInitializer { private val log = LoggerFactory.getLogger(DataInitializer::class.java) }}The EventListener does not support a suspend function, use a runBlocking to block the current thread and run the suspend functions in sequence.JPA Criteria APIMicronaut Data provides JPA criteria API support for both Data Jdbc and Data R2dbc, and also add some JpaSpecificationExecutor variants for Reactive Streams API, as mentioned in previous sections, there is a CoroutineJpaSpecificationExecutor for Kotlin Coroutines.Add jakarta-persistence-api into dependencies to provide JPA Criteria API.implementation(&amp;quot;jakarta.persistence:jakarta.persistence-api:3.0.0&amp;quot;)Let’s reuse Specifications we have created in the last post.Create a test to verify the criteria defined in the Specifications.@MicronautTest(environments = [Environment.TEST], startApplication = false)class PostRepositoryTest( private val posts: PostRepository, private val template: R2dbcOperations) : StringSpec({ &amp;quot;save and find posts&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;; Mono .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt; Mono.from( status.connection.createStatement(sql) .bind(0, &amp;quot;test title&amp;quot;) .bind(1, &amp;quot;test content&amp;quot;) .bind(2, &amp;quot;DRAFT&amp;quot;) .execute() ).flatMap { Mono.from(it.rowsUpdated) } }) .log() .`as` { StepVerifier.create(it) } .consumeNextWith { it shouldBeEqualComparingTo 1 } .verifyComplete() runBlocking { val all = posts.findAll().toList() all shouldHaveSize 1 log.debug(&amp;quot;all posts: $all&amp;quot;) all.map { it.title }.forAny { it shouldContain &amp;quot;test&amp;quot; } } } &amp;quot;find by title&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;; Mono .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt; Mono.from( status.connection.createStatement(sql) .bind(0, &amp;quot;test title&amp;quot;) .bind(1, &amp;quot;test content&amp;quot;) .bind(2, &amp;quot;DRAFT&amp;quot;) .execute() ).flatMap { Mono.from(it.rowsUpdated) } }) .`as` { StepVerifier.create(it) } .consumeNextWith { it shouldBeEqualComparingTo 1 } .verifyComplete() runBlocking { val all = posts.findAll(Specifications.titleLike(&amp;quot;test&amp;quot;)).toList() log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size) all shouldHaveSize 1 val all2 = posts.findAll(Specifications.titleLike(&amp;quot;test2&amp;quot;)).toList() log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size) all2 shouldHaveSize 0 } } &amp;quot;find by keyword&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;; Flux .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt; val statement = status.connection.createStatement(sql) statement .bind(0, &amp;quot;test title&amp;quot;) .bind(1, &amp;quot;test content&amp;quot;) .bind(2, &amp;quot;DRAFT&amp;quot;) .add() statement.bind(0, &amp;quot;test2 title&amp;quot;) .bind(1, &amp;quot;test2 content&amp;quot;) .bind(2, &amp;quot;DRAFT&amp;quot;) .add() Flux.from(statement.execute()).flatMap { Flux.from(it.rowsUpdated) } }) .`as` { StepVerifier.create(it) } .consumeNextWith { it shouldBeEqualComparingTo 1 } .consumeNextWith { it shouldBeEqualComparingTo 1 } .verifyComplete() runBlocking { val all = posts.findAll(Specifications.byKeyword(&amp;quot;test&amp;quot;)).toList() log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size) all shouldHaveSize 2 val all2 = posts.findAll(Specifications.byKeyword(&amp;quot;test2&amp;quot;)).toList() log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size) all2 shouldHaveSize 1 } } &amp;quot;update posts&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;; Flux .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt; val statement = status.connection.createStatement(sql) statement .bind(0, &amp;quot;test title&amp;quot;) .bind(1, &amp;quot;test content&amp;quot;) .bind(2, &amp;quot;PENDING_MODERATED&amp;quot;) .add() statement .bind(0, &amp;quot;test2 title&amp;quot;) .bind(1, &amp;quot;test2 content&amp;quot;) .bind(2, &amp;quot;PENDING_MODERATED&amp;quot;) .add() Flux.from(statement.execute()).flatMap { Flux.from(it.rowsUpdated) } }) .`as` { StepVerifier.create(it) } .consumeNextWith { it shouldBeEqualComparingTo 1 } .consumeNextWith { it shouldBeEqualComparingTo 1 } .verifyComplete() runBlocking { val updated = posts.updateAll(Specifications.rejectAllPendingModerated()) log.debug(&amp;quot;updated posts size:{}&amp;quot;, updated) updated shouldBe 2 val all = posts.findAll().toList() all shouldHaveSize 2 all.map { it.status }.forAny { it shouldBe Status.REJECTED } } } &amp;quot;remove posts&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values ($1, $2, $3)&amp;quot;; Flux .from(template.withTransaction { status: ReactiveTransactionStatus&amp;lt;Connection&amp;gt; -&amp;gt; val statement = status.connection.createStatement(sql) statement .bind(0, &amp;quot;test title&amp;quot;) .bind(1, &amp;quot;test content&amp;quot;) .bind(2, &amp;quot;REJECTED&amp;quot;) .add() statement .bind(0, &amp;quot;test2 title&amp;quot;) .bind(1, &amp;quot;test2 content&amp;quot;) .bind(2, &amp;quot;DRAFT&amp;quot;) .add() Flux.from(statement.execute()).flatMap { Flux.from(it.rowsUpdated) } }) .`as` { StepVerifier.create(it) } .consumeNextWith { it shouldBeEqualComparingTo 1 } .consumeNextWith { it shouldBeEqualComparingTo 1 } .verifyComplete() runBlocking { val deleted = posts.deleteAll(Specifications.removeAllRejected()) log.debug(&amp;quot;deleted posts size:{}&amp;quot;, deleted) deleted shouldBe 1 val all = posts.findAll().toList() all shouldHaveSize 1 all.map { it.status }.forAny { it shouldBe Status.DRAFT } } }}) { companion object { private val log: Logger = LoggerFactory.getLogger(PostRepositoryTest::class.java) } override fun beforeEach(testCase: TestCase) { val sql = &amp;quot;delete from posts&amp;quot;; val latch = CountDownLatch(1) Mono .from( this.template.withConnection { conn: Connection -&amp;gt; Mono.from(conn.beginTransaction()) .then(Mono.from(conn.createStatement(sql).execute()) .flatMap { Mono.from(it.rowsUpdated) } .doOnNext { log.debug(&amp;quot;deleted rows: $it &amp;quot;) } ) .then(Mono.from(conn.commitTransaction())) .doOnError { Mono.from(conn.rollbackTransaction()).then() } } ) .log() .doOnTerminate { latch.countDown() } .subscribe( { data -&amp;gt; log.debug(&amp;quot;deleted posts: $data &amp;quot;) }, { error -&amp;gt; log.error(&amp;quot;error of cleaning posts: $error&amp;quot;) }, { log.info(&amp;quot;done&amp;quot;) } ) latch.await(5000, TimeUnit.MILLISECONDS) }}We converted the existing Jdbc version to R2dbc, there are some mainly difference.Similar to the blocking TransactionOperations, R2dbcOperations provides withConnection and withTransaction to wrap data operations within a connection or transaction boundary.R2dbc Connection is based on ReactiveStreams API.When binding parameters to the SQL statement, the parameter indices start with 0.The SQL parameter placeholders are dependent on the database itself, for example, Postgres use $1, $2...Testing ControllerIn this post, we still use Kotest as testing framework, as you see in the above PostRepositoryTest, we use a runBlocking to wrap the coroutines execution in a blocking context.The kotlinx-coroutines-test provides some helpers to simplify the testing of Kotlin Coroutines, eg. runBlockingTest, etc. Add kotlinx-coroutines-test into the test dependencies.//gradle.propertieskotlinCoVersion=1.6.0-RC//build.gradle.ktval kotlinCoVersion=project.properties.get(&amp;quot;kotlinCoVersoin&amp;quot;)//update versions of kotlin coroutinesimplementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoVersion}&amp;quot;)implementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCoVersion}&amp;quot;)testImplementation(&amp;quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:${kotlinCoVersion}&amp;quot;)There is an issue to use runBlockingTest in a test, make sure you are using the latest 1.6.0-RC, and use runTest instead.Similar to the runBlocking, you can use runTest to wrap the testing functionality.@Testfun `test GET all posts endpoint with runTest`() = runTest { val response = client.exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java).awaitSingle() response.status shouldBe HttpStatus.OK response.body()!!.map { it.title }.forAny { it shouldContain &amp;quot;Micronaut&amp;quot; }}The runBlockingTest is deprecated in the latest 1.6.0 version of Kotlin Coroutines.We can also mock the repository when testing controllers, as we’ve done in the previous post. Mockk provides some variants for Kotlin Coroutines, such as coEvery, coVerify, etc.@MicronautTest(environments = [&amp;quot;mock&amp;quot;])class PostControllerTest( private val postRepository: PostRepository, @Client(&amp;quot;/&amp;quot;) private var client: HttpClient) : FunSpec({ test(&amp;quot;test get posts endpoint&amp;quot;) { val posts = getMock(postRepository) coEvery { posts.findAll() } .returns( flowOf( Post( id = UUID.randomUUID(), title = &amp;quot;test title&amp;quot;, content = &amp;quot;test content&amp;quot;, status = Status.DRAFT, createdAt = LocalDateTime.now() ) ) ) val response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java) response.status shouldBe HttpStatus.OK response.body()!![0].title shouldBe &amp;quot;test title&amp;quot; coVerify(exactly = 1) { posts.findAll() } }}) { @MockBean(PostRepository::class) fun mockedPostRepository() = mockk&amp;lt;PostRepository&amp;gt;()}Firstly, create a mock bean for PostRepository , then do stubbing with a coEvery and verify the calls in the mocks with coVerify clause.Get the complete source codes from my Github.Building Micronaut applications with Micronaut Data R2dbc and Kotlin Coroutines was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Building Micronaut applications with Micronaut Data Jdbc and Kotlin</title><link href="/blog/2021/building-micronaut-applications-with-micronaut-data-jdbc-and-kotlin/" rel="alternate" type="text/html" title="Building Micronaut applications with Micronaut Data Jdbc and Kotlin" /><published>2021-12-02T00:00:00+00:00</published><updated>2021-12-02T00:00:00+00:00</updated><id>/blog/2021/building-micronaut-applications-with-micronaut-data-jdbc-and-kotlin</id><content type="html" xml:base="/blog/2021/building-micronaut-applications-with-micronaut-data-jdbc-and-kotlin/">&lt;p&gt;Micronaut Data also has great support for Jdbc and R2dbc. In this post, we will explore the Micronaut Data Jdbc and write the example in Kotlin language, and finally we will test the components with Kotest.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*vpMi-XOcWMHQnUiqVqNeOg.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@dongmingwei?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;mingwei dong&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/china-snow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Getting Started&lt;/h3&gt;&lt;p&gt;Open your browser and navigate to &lt;a href=&quot;https://micronaut.io/launch&quot;&gt;Micronaut Launch&lt;/a&gt; to generate a new project skeleton for this post. Select the following items on this page.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java version: &lt;strong&gt;17&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Language: &lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Build tool: &lt;strong&gt;Gradle&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Test framework: &lt;strong&gt;Kotest&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Included Features: &lt;strong&gt;data-jdbc&lt;/strong&gt;, &lt;strong&gt;postgres&lt;/strong&gt;, etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Click &lt;strong&gt;GENERATE PROJECT&lt;/strong&gt; button to generate a project archive, download it and extract the files into disk, and import to your IDE, such as IDEA.&lt;/p&gt;&lt;p&gt;Create an Entity class.&lt;/p&gt;&lt;pre&gt;@MappedEntity(value = &amp;quot;posts&amp;quot;, namingStrategy = NamingStrategies.UnderScoreSeparatedLowerCase::class)&lt;br&gt;data class Post(&lt;br&gt;    @field:Id @field:GeneratedValue(GeneratedValue.Type.UUID) var id: UUID? = null,&lt;br&gt;    var title: String,&lt;br&gt;    var content: String,&lt;br&gt;    var status: Status? = Status.DRAFT,&lt;br&gt;    @field:DateCreated var createdAt: LocalDateTime? = LocalDateTime.now()&lt;br&gt;)&lt;/pre&gt;&lt;p&gt;Here we declare a Kotlin data class to present the data in the mapped table. Similar to the JPA annotations, you can set ID and GeneratedValue on the field mapped to the primary key of the backend table. Similar to the Auditing feature of Spring Data project, the createdAt field annotated with @DateCreated will be filled automatically when the entity is being persisted.&lt;/p&gt;&lt;p&gt;The status is an enum class.&lt;/p&gt;&lt;pre&gt;enum class Status {&lt;br&gt;    DRAFT, PENDING_MODERATED, PUBLISHED, REJECTED&lt;br&gt;}&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;Note: The &lt;/em&gt;&lt;em&gt;ID and &lt;/em&gt;&lt;em&gt;GeneratedValue is from &lt;/em&gt;&lt;em&gt;io.micronaut.data.annotation package.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Create a Repository for Post Entity class.&lt;/p&gt;&lt;pre&gt;@JdbcRepository&lt;br&gt;interface PostRepository : PageableRepository&amp;lt;Post, UUID&amp;gt;&lt;/pre&gt;&lt;p&gt;Here we used a JdbcRepository to indicate this Repository is a &lt;strong&gt;data-jdbc&lt;/strong&gt; Repository.&lt;/p&gt;&lt;p&gt;Create a bean to initialize some sample data.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;@Requires(notEnv = [&amp;quot;mock&amp;quot;])&lt;br&gt;class DataInitializer(private val posts: PostRepository) {&lt;/pre&gt;&lt;pre&gt;    @EventListener&lt;br&gt;    fun onStartUp(e: ServerStartupEvent) {&lt;br&gt;        log.info(&amp;quot;starting data initialization at ServerStartupEvent: $e&amp;quot;)&lt;/pre&gt;&lt;pre&gt;        posts.deleteAll()&lt;/pre&gt;&lt;pre&gt;        val data = listOf(&lt;br&gt;            Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin&amp;quot;, content = &amp;quot;test&amp;quot;),&lt;br&gt;            Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin: part 2&amp;quot;, content = &amp;quot;test&amp;quot;)&lt;br&gt;        )&lt;br&gt;        data.forEach { log.debug(&amp;quot;saving: $it&amp;quot;) }&lt;br&gt;        posts.saveAll(data).forEach { log.debug(&amp;quot;saved post: $it&amp;quot;) }&lt;br&gt;        log.info(&amp;quot;data initialization is done...&amp;quot;)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    companion object DataInitializer {&lt;br&gt;        private val log = LoggerFactory.getLogger(DataInitializer::class.java)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Now create a controller to expose RESTful APIs.&lt;/p&gt;&lt;pre&gt;@Controller(&amp;quot;/posts&amp;quot;)&lt;br&gt;class PostController(private val posts: PostRepository) {&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/&amp;quot;, produces = [MediaType.APPLICATION_JSON])&lt;br&gt;    fun all(): HttpResponse&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; = ok(posts.findAll().toList())&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/{id}&amp;quot;, produces = [MediaType.APPLICATION_JSON])&lt;br&gt;    fun byId(@PathVariable id: UUID): HttpResponse&amp;lt;Any&amp;gt; {&lt;br&gt;        val post = posts.findById(id) ?: return notFound()&lt;br&gt;        return ok(post)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @io.micronaut.http.annotation.Post(consumes = [MediaType.APPLICATION_JSON])&lt;br&gt;    fun create(@Body body: Post): HttpResponse&amp;lt;Any&amp;gt; {&lt;br&gt;        val saved = posts.save(body)&lt;br&gt;        return created(URI.create(&amp;quot;/posts/&amp;quot; + saved.id))&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Now let’s try to start up the application, make sure there is a running Postgres database, the database settings should match the configuration in the &lt;em&gt;application.yaml&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Simply, you can prepare the database through docker compose file. Run the following command to start a Postgres in docker, the database details is defined in the &lt;em&gt;docker-compose.yaml&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;# docker compose up postgres&lt;/pre&gt;&lt;p&gt;Now run the application.&lt;/p&gt;&lt;pre&gt;# gradlew run &lt;br&gt;// or &lt;br&gt;# gradlew build&lt;br&gt;# java build/xxx.jar&lt;/pre&gt;&lt;p&gt;You can use curl command to test the &lt;em&gt;/posts&lt;/em&gt; endpoint.&lt;/p&gt;&lt;pre&gt;# curl &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt;&lt;/pre&gt;&lt;h3&gt;Query by Specification&lt;/h3&gt;&lt;p&gt;If you have some experience of Spring Data JPA, you will be impressed by the JPA Specification, but it only works with Spring Data JPA. In Micronaut Data, the &lt;strong&gt;data-jdbc&lt;/strong&gt; also supports query by JPA Specification.&lt;/p&gt;&lt;p&gt;Add jakarta.persistence:jakarta.persistence-api:3.0.0 into dependencies.&lt;/p&gt;&lt;p&gt;Change PostRepository, make it extends JpaSpecificationExecutor.&lt;/p&gt;&lt;pre&gt;@JdbcRepository&lt;br&gt;interface PostRepository : PageableRepository&amp;lt;Post, UUID&amp;gt;, JpaSpecificationExecutor&amp;lt;Post&amp;gt;&lt;/pre&gt;&lt;p&gt;Create a series of Specfication, eg. find by title, find by keyword, or reject all posts that status is PENDING_MODERATED, remove all REJECTED posts. In the Micronaut Data, there are some variants of the PredicateSpecification, such as QuerySpecificaiton, UpdateSpecification, and DeleteSpecification.&lt;/p&gt;&lt;pre&gt;object Specifications {&lt;/pre&gt;&lt;pre&gt;    fun titleLike(title: String): PredicateSpecification&amp;lt;Post&amp;gt; {&lt;br&gt;        return PredicateSpecification&amp;lt;Post&amp;gt; { root, criteriaBuilder -&amp;gt;&lt;br&gt;            criteriaBuilder.like(&lt;br&gt;                root.get(&amp;quot;title&amp;quot;),&lt;br&gt;                &amp;quot;%$title%&amp;quot;&lt;br&gt;            )&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    fun byKeyword(q: String): QuerySpecification&amp;lt;Post&amp;gt; {&lt;br&gt;        return QuerySpecification&amp;lt;Post&amp;gt; { root, query, criteriaBuilder -&amp;gt;&lt;br&gt;            criteriaBuilder.or(&lt;br&gt;                criteriaBuilder.like(root.get(&amp;quot;title&amp;quot;), &amp;quot;%$q%&amp;quot;),&lt;br&gt;                criteriaBuilder.like(root.get(&amp;quot;content&amp;quot;), &amp;quot;%$q%&amp;quot;)&lt;br&gt;            )&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    fun rejectAllPendingModerated(): UpdateSpecification&amp;lt;Post&amp;gt; {&lt;br&gt;        return UpdateSpecification&amp;lt;Post&amp;gt; {root, query, criteriaBuilder -&amp;gt;&lt;br&gt;            query.set(root.get(&amp;quot;status&amp;quot;), Status.REJECTED)&lt;br&gt;            criteriaBuilder.equal(root.get&amp;lt;Status&amp;gt;(&amp;quot;status&amp;quot;), Status.PENDING_MODERATED)&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    fun removeAllRejected(): DeleteSpecification&amp;lt;Post&amp;gt; {&lt;br&gt;        return DeleteSpecification&amp;lt;Post&amp;gt; {root, query, criteriaBuilder -&amp;gt;&lt;br&gt;            criteriaBuilder.equal(root.get&amp;lt;Status&amp;gt;(&amp;quot;status&amp;quot;), Status.REJECTED)&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Let’s create some tests to verify these Specifications.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = [Environment.TEST], startApplication = false)&lt;br&gt;open class PostRepositoryAnnotationSpec() : AnnotationSpec() {&lt;br&gt;    companion object {&lt;br&gt;        private val log: Logger = LoggerFactory.getLogger(PostControllerTest::class.java)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    private lateinit var posts: PostRepository&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    private lateinit var template: JdbcOperations&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    private lateinit var tx: TransactionOperations&amp;lt;Any&amp;gt;&lt;/pre&gt;&lt;pre&gt;    @BeforeEach&lt;br&gt;    fun beforeEach() {&lt;br&gt;        val callback: TransactionCallback&amp;lt;Any, Int&amp;gt; = TransactionCallback { _: TransactionStatus&amp;lt;Any&amp;gt; -&amp;gt;&lt;br&gt;            val sql = &amp;quot;delete from posts&amp;quot;;&lt;br&gt;            this.template.prepareStatement(sql) {&lt;br&gt;                it.executeUpdate()&lt;br&gt;            }&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        val cnt = tx.executeWrite(callback)&lt;br&gt;        println(&amp;quot;deleted $cnt&amp;quot;);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    fun `test save and find posts`() {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.executeUpdate()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt shouldBeEqualComparingTo 1&lt;br&gt;        val all = posts.findAll()&lt;br&gt;        all shouldHaveSize 1&lt;br&gt;        log.debug(&amp;quot;all posts: $all&amp;quot;)&lt;br&gt;        all.map { it.title }.forAny { it shouldContain &amp;quot;test&amp;quot; }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    fun `find by title`() {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.executeUpdate()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt shouldBeEqualComparingTo 1&lt;br&gt;        val all = posts.findAll(Specifications.titleLike(&amp;quot;test&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size)&lt;br&gt;        all shouldHaveSize 1&lt;/pre&gt;&lt;pre&gt;        val all2 = posts.findAll(Specifications.titleLike(&amp;quot;test2&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size)&lt;br&gt;        all2 shouldHaveSize 0&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    fun `find by keyword`() {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.setString(1, &amp;quot;test2 title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test2 content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.executeBatch()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt.any { it == 1 }&lt;br&gt;        val all = posts.findAll(Specifications.byKeyword(&amp;quot;test&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size)&lt;br&gt;        all shouldHaveSize 2&lt;/pre&gt;&lt;pre&gt;        val all2 = posts.findAll(Specifications.byKeyword(&amp;quot;test2&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size)&lt;br&gt;        all2 shouldHaveSize 1&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    fun `update posts`() {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.setString(1, &amp;quot;test2 title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test2 content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.executeBatch()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt.any { it == 1 }&lt;br&gt;        val updated = posts.updateAll(Specifications.rejectAllPendingModerated())&lt;br&gt;        log.debug(&amp;quot;updated posts size:{}&amp;quot;, updated)&lt;br&gt;        updated shouldBe 2&lt;/pre&gt;&lt;pre&gt;        val all = posts.findAll()&lt;br&gt;        all shouldHaveSize 2&lt;br&gt;        all.map { it.status }.forAny { it shouldBe Status.REJECTED }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    fun `remove posts`() {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;REJECTED&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.setString(1, &amp;quot;test2 title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test2 content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.executeBatch()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt.any { it == 1 }&lt;br&gt;        val deleted = posts.deleteAll(Specifications.removeAllRejected())&lt;br&gt;        log.debug(&amp;quot;deleted posts size:{}&amp;quot;, deleted)&lt;br&gt;        deleted shouldBe 1&lt;/pre&gt;&lt;pre&gt;        val all = posts.findAll()&lt;br&gt;        all shouldHaveSize 1&lt;br&gt;        all.map { it.status }.forAny { it shouldBe Status.DRAFT }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Similar to Spring Jdbc and Spring Data Jdbc, there is a template based JdbcOperations bean available for programmatic database operations. In the above testing codes, we used JdbcOperations to prepare and clean up sample data for each tests.&lt;/p&gt;&lt;p&gt;In this application, we use Kotest as testing framework.&lt;/p&gt;&lt;p&gt;Kotest provides a lot of testing code styles, some are inspired by the existing describe/it clause from NodeJS ecosystem or ScalaTest.&lt;/p&gt;&lt;p&gt;The AnnotationSpec is similar to the traditional JUnit coding style, for those from JUnit, it is zero learning curve to migrate to Kotest testing framework.&lt;/p&gt;&lt;h3&gt;Kotest&lt;/h3&gt;&lt;p&gt;The simplest is SpringSpec, use a &lt;em&gt;string&lt;/em&gt; to describe functionality. Let&amp;#39;s rewrite the above testing codes with StringSepc.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = [Environment.TEST], startApplication = false)&lt;br&gt;class PostRepositoryTest(&lt;br&gt;    private val posts: PostRepository,&lt;br&gt;    private val template: JdbcOperations,&lt;br&gt;    private val tx: TransactionOperations&amp;lt;Any&amp;gt;&lt;br&gt;) : StringSpec({&lt;/pre&gt;&lt;pre&gt;    &amp;quot;test save and find posts&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.executeUpdate()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt shouldBeEqualComparingTo 1&lt;br&gt;        val all = posts.findAll()&lt;br&gt;        all shouldHaveSize 1&lt;br&gt;        log.debug(&amp;quot;all posts: $all&amp;quot;)&lt;br&gt;        all.map { it.title }.forAny { it shouldContain &amp;quot;test&amp;quot; }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;find by title&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.executeUpdate()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt shouldBeEqualComparingTo 1&lt;br&gt;        val all = posts.findAll(Specifications.titleLike(&amp;quot;test&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size)&lt;br&gt;        all shouldHaveSize 1&lt;/pre&gt;&lt;pre&gt;        val all2 = posts.findAll(Specifications.titleLike(&amp;quot;test2&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size)&lt;br&gt;        all2 shouldHaveSize 0&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;find by keyword&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.setString(1, &amp;quot;test2 title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test2 content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.executeBatch()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt.any { it == 1 }&lt;br&gt;        val all = posts.findAll(Specifications.byKeyword(&amp;quot;test&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size)&lt;br&gt;        all shouldHaveSize 2&lt;/pre&gt;&lt;pre&gt;        val all2 = posts.findAll(Specifications.byKeyword(&amp;quot;test2&amp;quot;))&lt;br&gt;        log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size)&lt;br&gt;        all2 shouldHaveSize 1&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;update posts&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.setString(1, &amp;quot;test2 title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test2 content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.executeBatch()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt.any { it == 1 }&lt;br&gt;        val updated = posts.updateAll(Specifications.rejectAllPendingModerated())&lt;br&gt;        log.debug(&amp;quot;updated posts size:{}&amp;quot;, updated)&lt;br&gt;        updated shouldBe 2&lt;/pre&gt;&lt;pre&gt;        val all = posts.findAll()&lt;br&gt;        all shouldHaveSize 2&lt;br&gt;        all.map { it.status }.forAny { it shouldBe Status.REJECTED }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;remove posts&amp;quot; {&lt;br&gt;        val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;;&lt;br&gt;        val insertedCnt = template.prepareStatement(sql) {&lt;br&gt;            it.setString(1, &amp;quot;test title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;REJECTED&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.setString(1, &amp;quot;test2 title&amp;quot;)&lt;br&gt;            it.setString(2, &amp;quot;test2 content&amp;quot;)&lt;br&gt;            it.setString(3, &amp;quot;DRAFT&amp;quot;)&lt;br&gt;            it.addBatch()&lt;br&gt;            it.executeBatch()&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        insertedCnt.any { it == 1 }&lt;br&gt;        val deleted = posts.deleteAll(Specifications.removeAllRejected())&lt;br&gt;        log.debug(&amp;quot;deleted posts size:{}&amp;quot;, deleted)&lt;br&gt;        deleted shouldBe 1&lt;/pre&gt;&lt;pre&gt;        val all = posts.findAll()&lt;br&gt;        all shouldHaveSize 1&lt;br&gt;        all.map { it.status }.forAny { it shouldBe Status.DRAFT }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}) {&lt;br&gt;    companion object {&lt;br&gt;        private val log: Logger = LoggerFactory.getLogger(PostControllerTest::class.java)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    override fun beforeEach(testCase: TestCase) {&lt;br&gt;        val callback: TransactionCallback&amp;lt;Any, Int&amp;gt; = TransactionCallback { _: TransactionStatus&amp;lt;Any&amp;gt; -&amp;gt;&lt;br&gt;            val sql = &amp;quot;delete from posts&amp;quot;;&lt;br&gt;            this.template.prepareStatement(sql) {&lt;br&gt;                it.executeUpdate()&lt;br&gt;            }&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        val cnt = tx.executeWrite(callback)&lt;br&gt;        println(&amp;quot;deleted $cnt&amp;quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Create a test to test PostController, here we use FunSpec which wraps tests in a test method block.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = [&amp;quot;mock&amp;quot;])&lt;br&gt;class PostControllerTest(&lt;br&gt;    private val postsBean: PostRepository,&lt;br&gt;    @Client(&amp;quot;/&amp;quot;) private var client: HttpClient&lt;br&gt;) : FunSpec({&lt;/pre&gt;&lt;pre&gt;    test(&amp;quot;test get posts endpoint&amp;quot;) {&lt;br&gt;        val posts = getMock(postsBean)&lt;br&gt;        every { posts.findAll() }&lt;br&gt;            .returns(&lt;br&gt;                listOf(&lt;br&gt;                    Post(&lt;br&gt;                        id = UUID.randomUUID(),&lt;br&gt;                        title = &amp;quot;test title&amp;quot;,&lt;br&gt;                        content = &amp;quot;test content&amp;quot;,&lt;br&gt;                        status = Status.DRAFT,&lt;br&gt;                        createdAt = LocalDateTime.now()&lt;br&gt;                    )&lt;br&gt;                )&lt;br&gt;            )&lt;br&gt;        val response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java)&lt;/pre&gt;&lt;pre&gt;        response.status shouldBe HttpStatus.OK&lt;br&gt;        response.body()!![0].title shouldBe &amp;quot;test title&amp;quot;&lt;/pre&gt;&lt;pre&gt;        verify(exactly = 1) { posts.findAll() }&lt;br&gt;    }&lt;br&gt;}) {&lt;br&gt;    @MockBean(PostRepository::class)&lt;br&gt;    fun posts() = mockk&amp;lt;PostRepository&amp;gt;()&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Here we use &lt;strong&gt;mockk&lt;/strong&gt; to create a mocked PostRepository and the MockBean is located in the body of SpringSpec.&lt;/p&gt;&lt;p&gt;The following is an integration example which use SpringSpec .&lt;/p&gt;&lt;pre&gt;@MicronautTest&lt;br&gt;class IntegrationTests(&lt;br&gt;    private val application: EmbeddedApplication&amp;lt;*&amp;gt;,&lt;br&gt;    @Client(&amp;quot;/&amp;quot;) private val client: HttpClient&lt;br&gt;) : StringSpec({&lt;/pre&gt;&lt;pre&gt;    &amp;quot;test the server is running&amp;quot; {&lt;br&gt;        assert(application.isRunning)&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    &amp;quot;test GET /posts endpoint&amp;quot; {&lt;br&gt;        val response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java)&lt;/pre&gt;&lt;pre&gt;        response.status shouldBe HttpStatus.OK&lt;br&gt;        response.body()!!.map { it.title }.forAny {&lt;br&gt;            it shouldContain &amp;quot;Micronaut&amp;quot;&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;})&lt;/pre&gt;&lt;p&gt;Get the complete &lt;a href=&quot;https://github.com/hantsy/micronaut-sandbox/tree/master/jdbc-kotlin&quot;&gt;source codes&lt;/a&gt; from my Github.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81c1b6cf4b10&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/building-micronaut-applications-with-micronaut-data-jdbc-and-kotlin-81c1b6cf4b10&quot;&gt;Building Micronaut applications with Micronaut Data Jdbc and Kotlin&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">Micronaut Data also has great support for Jdbc and R2dbc. In this post, we will explore the Micronaut Data Jdbc and write the example in Kotlin language, and finally we will test the components with Kotest.Photo by mingwei dong on UnsplashGetting StartedOpen your browser and navigate to Micronaut Launch to generate a new project skeleton for this post. Select the following items on this page.Java version: 17Language: KotlinBuild tool: GradleTest framework: KotestIncluded Features: data-jdbc, postgres, etc.Click GENERATE PROJECT button to generate a project archive, download it and extract the files into disk, and import to your IDE, such as IDEA.Create an Entity class.@MappedEntity(value = &amp;quot;posts&amp;quot;, namingStrategy = NamingStrategies.UnderScoreSeparatedLowerCase::class)data class Post( @field:Id @field:GeneratedValue(GeneratedValue.Type.UUID) var id: UUID? = null, var title: String, var content: String, var status: Status? = Status.DRAFT, @field:DateCreated var createdAt: LocalDateTime? = LocalDateTime.now())Here we declare a Kotlin data class to present the data in the mapped table. Similar to the JPA annotations, you can set ID and GeneratedValue on the field mapped to the primary key of the backend table. Similar to the Auditing feature of Spring Data project, the createdAt field annotated with @DateCreated will be filled automatically when the entity is being persisted.The status is an enum class.enum class Status { DRAFT, PENDING_MODERATED, PUBLISHED, REJECTED}Note: The ID and GeneratedValue is from io.micronaut.data.annotation package.Create a Repository for Post Entity class.@JdbcRepositoryinterface PostRepository : PageableRepository&amp;lt;Post, UUID&amp;gt;Here we used a JdbcRepository to indicate this Repository is a data-jdbc Repository.Create a bean to initialize some sample data.@Singleton@Requires(notEnv = [&amp;quot;mock&amp;quot;])class DataInitializer(private val posts: PostRepository) { @EventListener fun onStartUp(e: ServerStartupEvent) { log.info(&amp;quot;starting data initialization at ServerStartupEvent: $e&amp;quot;) posts.deleteAll() val data = listOf( Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin&amp;quot;, content = &amp;quot;test&amp;quot;), Post(title = &amp;quot;Building Restful APIs with Micronaut and Kotlin: part 2&amp;quot;, content = &amp;quot;test&amp;quot;) ) data.forEach { log.debug(&amp;quot;saving: $it&amp;quot;) } posts.saveAll(data).forEach { log.debug(&amp;quot;saved post: $it&amp;quot;) } log.info(&amp;quot;data initialization is done...&amp;quot;) } companion object DataInitializer { private val log = LoggerFactory.getLogger(DataInitializer::class.java) }}Now create a controller to expose RESTful APIs.@Controller(&amp;quot;/posts&amp;quot;)class PostController(private val posts: PostRepository) { @Get(uri = &amp;quot;/&amp;quot;, produces = [MediaType.APPLICATION_JSON]) fun all(): HttpResponse&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; = ok(posts.findAll().toList()) @Get(uri = &amp;quot;/{id}&amp;quot;, produces = [MediaType.APPLICATION_JSON]) fun byId(@PathVariable id: UUID): HttpResponse&amp;lt;Any&amp;gt; { val post = posts.findById(id) ?: return notFound() return ok(post) } @io.micronaut.http.annotation.Post(consumes = [MediaType.APPLICATION_JSON]) fun create(@Body body: Post): HttpResponse&amp;lt;Any&amp;gt; { val saved = posts.save(body) return created(URI.create(&amp;quot;/posts/&amp;quot; + saved.id)) }}Now let’s try to start up the application, make sure there is a running Postgres database, the database settings should match the configuration in the application.yaml.Simply, you can prepare the database through docker compose file. Run the following command to start a Postgres in docker, the database details is defined in the docker-compose.yaml.# docker compose up postgresNow run the application.# gradlew run // or # gradlew build# java build/xxx.jarYou can use curl command to test the /posts endpoint.# curl http://localhost:8080/postsQuery by SpecificationIf you have some experience of Spring Data JPA, you will be impressed by the JPA Specification, but it only works with Spring Data JPA. In Micronaut Data, the data-jdbc also supports query by JPA Specification.Add jakarta.persistence:jakarta.persistence-api:3.0.0 into dependencies.Change PostRepository, make it extends JpaSpecificationExecutor.@JdbcRepositoryinterface PostRepository : PageableRepository&amp;lt;Post, UUID&amp;gt;, JpaSpecificationExecutor&amp;lt;Post&amp;gt;Create a series of Specfication, eg. find by title, find by keyword, or reject all posts that status is PENDING_MODERATED, remove all REJECTED posts. In the Micronaut Data, there are some variants of the PredicateSpecification, such as QuerySpecificaiton, UpdateSpecification, and DeleteSpecification.object Specifications { fun titleLike(title: String): PredicateSpecification&amp;lt;Post&amp;gt; { return PredicateSpecification&amp;lt;Post&amp;gt; { root, criteriaBuilder -&amp;gt; criteriaBuilder.like( root.get(&amp;quot;title&amp;quot;), &amp;quot;%$title%&amp;quot; ) } } fun byKeyword(q: String): QuerySpecification&amp;lt;Post&amp;gt; { return QuerySpecification&amp;lt;Post&amp;gt; { root, query, criteriaBuilder -&amp;gt; criteriaBuilder.or( criteriaBuilder.like(root.get(&amp;quot;title&amp;quot;), &amp;quot;%$q%&amp;quot;), criteriaBuilder.like(root.get(&amp;quot;content&amp;quot;), &amp;quot;%$q%&amp;quot;) ) } } fun rejectAllPendingModerated(): UpdateSpecification&amp;lt;Post&amp;gt; { return UpdateSpecification&amp;lt;Post&amp;gt; {root, query, criteriaBuilder -&amp;gt; query.set(root.get(&amp;quot;status&amp;quot;), Status.REJECTED) criteriaBuilder.equal(root.get&amp;lt;Status&amp;gt;(&amp;quot;status&amp;quot;), Status.PENDING_MODERATED) } } fun removeAllRejected(): DeleteSpecification&amp;lt;Post&amp;gt; { return DeleteSpecification&amp;lt;Post&amp;gt; {root, query, criteriaBuilder -&amp;gt; criteriaBuilder.equal(root.get&amp;lt;Status&amp;gt;(&amp;quot;status&amp;quot;), Status.REJECTED) } }}Let’s create some tests to verify these Specifications.@MicronautTest(environments = [Environment.TEST], startApplication = false)open class PostRepositoryAnnotationSpec() : AnnotationSpec() { companion object { private val log: Logger = LoggerFactory.getLogger(PostControllerTest::class.java) } @Inject private lateinit var posts: PostRepository @Inject private lateinit var template: JdbcOperations @Inject private lateinit var tx: TransactionOperations&amp;lt;Any&amp;gt; @BeforeEach fun beforeEach() { val callback: TransactionCallback&amp;lt;Any, Int&amp;gt; = TransactionCallback { _: TransactionStatus&amp;lt;Any&amp;gt; -&amp;gt; val sql = &amp;quot;delete from posts&amp;quot;; this.template.prepareStatement(sql) { it.executeUpdate() } } val cnt = tx.executeWrite(callback) println(&amp;quot;deleted $cnt&amp;quot;); } @Test fun `test save and find posts`() { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.executeUpdate() } insertedCnt shouldBeEqualComparingTo 1 val all = posts.findAll() all shouldHaveSize 1 log.debug(&amp;quot;all posts: $all&amp;quot;) all.map { it.title }.forAny { it shouldContain &amp;quot;test&amp;quot; } } @Test fun `find by title`() { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.executeUpdate() } insertedCnt shouldBeEqualComparingTo 1 val all = posts.findAll(Specifications.titleLike(&amp;quot;test&amp;quot;)) log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size) all shouldHaveSize 1 val all2 = posts.findAll(Specifications.titleLike(&amp;quot;test2&amp;quot;)) log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size) all2 shouldHaveSize 0 } @Test fun `find by keyword`() { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.addBatch() it.setString(1, &amp;quot;test2 title&amp;quot;) it.setString(2, &amp;quot;test2 content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.addBatch() it.executeBatch() } insertedCnt.any { it == 1 } val all = posts.findAll(Specifications.byKeyword(&amp;quot;test&amp;quot;)) log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size) all shouldHaveSize 2 val all2 = posts.findAll(Specifications.byKeyword(&amp;quot;test2&amp;quot;)) log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size) all2 shouldHaveSize 1 } @Test fun `update posts`() { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;) it.addBatch() it.setString(1, &amp;quot;test2 title&amp;quot;) it.setString(2, &amp;quot;test2 content&amp;quot;) it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;) it.addBatch() it.executeBatch() } insertedCnt.any { it == 1 } val updated = posts.updateAll(Specifications.rejectAllPendingModerated()) log.debug(&amp;quot;updated posts size:{}&amp;quot;, updated) updated shouldBe 2 val all = posts.findAll() all shouldHaveSize 2 all.map { it.status }.forAny { it shouldBe Status.REJECTED } } @Test fun `remove posts`() { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;REJECTED&amp;quot;) it.addBatch() it.setString(1, &amp;quot;test2 title&amp;quot;) it.setString(2, &amp;quot;test2 content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.addBatch() it.executeBatch() } insertedCnt.any { it == 1 } val deleted = posts.deleteAll(Specifications.removeAllRejected()) log.debug(&amp;quot;deleted posts size:{}&amp;quot;, deleted) deleted shouldBe 1 val all = posts.findAll() all shouldHaveSize 1 all.map { it.status }.forAny { it shouldBe Status.DRAFT } }}Similar to Spring Jdbc and Spring Data Jdbc, there is a template based JdbcOperations bean available for programmatic database operations. In the above testing codes, we used JdbcOperations to prepare and clean up sample data for each tests.In this application, we use Kotest as testing framework.Kotest provides a lot of testing code styles, some are inspired by the existing describe/it clause from NodeJS ecosystem or ScalaTest.The AnnotationSpec is similar to the traditional JUnit coding style, for those from JUnit, it is zero learning curve to migrate to Kotest testing framework.KotestThe simplest is SpringSpec, use a string to describe functionality. Let&amp;#39;s rewrite the above testing codes with StringSepc.@MicronautTest(environments = [Environment.TEST], startApplication = false)class PostRepositoryTest( private val posts: PostRepository, private val template: JdbcOperations, private val tx: TransactionOperations&amp;lt;Any&amp;gt;) : StringSpec({ &amp;quot;test save and find posts&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.executeUpdate() } insertedCnt shouldBeEqualComparingTo 1 val all = posts.findAll() all shouldHaveSize 1 log.debug(&amp;quot;all posts: $all&amp;quot;) all.map { it.title }.forAny { it shouldContain &amp;quot;test&amp;quot; } } &amp;quot;find by title&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.executeUpdate() } insertedCnt shouldBeEqualComparingTo 1 val all = posts.findAll(Specifications.titleLike(&amp;quot;test&amp;quot;)) log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size) all shouldHaveSize 1 val all2 = posts.findAll(Specifications.titleLike(&amp;quot;test2&amp;quot;)) log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size) all2 shouldHaveSize 0 } &amp;quot;find by keyword&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.addBatch() it.setString(1, &amp;quot;test2 title&amp;quot;) it.setString(2, &amp;quot;test2 content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.addBatch() it.executeBatch() } insertedCnt.any { it == 1 } val all = posts.findAll(Specifications.byKeyword(&amp;quot;test&amp;quot;)) log.debug(&amp;quot;all posts size:{}&amp;quot;, all.size) all shouldHaveSize 2 val all2 = posts.findAll(Specifications.byKeyword(&amp;quot;test2&amp;quot;)) log.debug(&amp;quot;all2 posts size:{}&amp;quot;, all2.size) all2 shouldHaveSize 1 } &amp;quot;update posts&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;) it.addBatch() it.setString(1, &amp;quot;test2 title&amp;quot;) it.setString(2, &amp;quot;test2 content&amp;quot;) it.setString(3, &amp;quot;PENDING_MODERATED&amp;quot;) it.addBatch() it.executeBatch() } insertedCnt.any { it == 1 } val updated = posts.updateAll(Specifications.rejectAllPendingModerated()) log.debug(&amp;quot;updated posts size:{}&amp;quot;, updated) updated shouldBe 2 val all = posts.findAll() all shouldHaveSize 2 all.map { it.status }.forAny { it shouldBe Status.REJECTED } } &amp;quot;remove posts&amp;quot; { val sql = &amp;quot;insert into posts(title, content, status) values (?, ?, ?)&amp;quot;; val insertedCnt = template.prepareStatement(sql) { it.setString(1, &amp;quot;test title&amp;quot;) it.setString(2, &amp;quot;test content&amp;quot;) it.setString(3, &amp;quot;REJECTED&amp;quot;) it.addBatch() it.setString(1, &amp;quot;test2 title&amp;quot;) it.setString(2, &amp;quot;test2 content&amp;quot;) it.setString(3, &amp;quot;DRAFT&amp;quot;) it.addBatch() it.executeBatch() } insertedCnt.any { it == 1 } val deleted = posts.deleteAll(Specifications.removeAllRejected()) log.debug(&amp;quot;deleted posts size:{}&amp;quot;, deleted) deleted shouldBe 1 val all = posts.findAll() all shouldHaveSize 1 all.map { it.status }.forAny { it shouldBe Status.DRAFT } }}) { companion object { private val log: Logger = LoggerFactory.getLogger(PostControllerTest::class.java) } override fun beforeEach(testCase: TestCase) { val callback: TransactionCallback&amp;lt;Any, Int&amp;gt; = TransactionCallback { _: TransactionStatus&amp;lt;Any&amp;gt; -&amp;gt; val sql = &amp;quot;delete from posts&amp;quot;; this.template.prepareStatement(sql) { it.executeUpdate() } } val cnt = tx.executeWrite(callback) println(&amp;quot;deleted $cnt&amp;quot;); }}Create a test to test PostController, here we use FunSpec which wraps tests in a test method block.@MicronautTest(environments = [&amp;quot;mock&amp;quot;])class PostControllerTest( private val postsBean: PostRepository, @Client(&amp;quot;/&amp;quot;) private var client: HttpClient) : FunSpec({ test(&amp;quot;test get posts endpoint&amp;quot;) { val posts = getMock(postsBean) every { posts.findAll() } .returns( listOf( Post( id = UUID.randomUUID(), title = &amp;quot;test title&amp;quot;, content = &amp;quot;test content&amp;quot;, status = Status.DRAFT, createdAt = LocalDateTime.now() ) ) ) val response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java) response.status shouldBe HttpStatus.OK response.body()!![0].title shouldBe &amp;quot;test title&amp;quot; verify(exactly = 1) { posts.findAll() } }}) { @MockBean(PostRepository::class) fun posts() = mockk&amp;lt;PostRepository&amp;gt;()}Here we use mockk to create a mocked PostRepository and the MockBean is located in the body of SpringSpec.The following is an integration example which use SpringSpec .@MicronautTestclass IntegrationTests( private val application: EmbeddedApplication&amp;lt;*&amp;gt;, @Client(&amp;quot;/&amp;quot;) private val client: HttpClient) : StringSpec({ &amp;quot;test the server is running&amp;quot; { assert(application.isRunning) } &amp;quot;test GET /posts endpoint&amp;quot; { val response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, Array&amp;lt;Post&amp;gt;::class.java) response.status shouldBe HttpStatus.OK response.body()!!.map { it.title }.forAny { it shouldContain &amp;quot;Micronaut&amp;quot; } }})Get the complete source codes from my Github.Building Micronaut applications with Micronaut Data Jdbc and Kotlin was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Building Restful APIs with Symfony 5 and PHP 8</title><link href="/blog/2021/building-restful-apis-with-symfony-5-and-php-8/" rel="alternate" type="text/html" title="Building Restful APIs with Symfony 5 and PHP 8" /><published>2021-11-22T00:00:00+00:00</published><updated>2021-11-22T00:00:00+00:00</updated><id>/blog/2021/building-restful-apis-with-symfony-5-and-php-8</id><content type="html" xml:base="/blog/2021/building-restful-apis-with-symfony-5-and-php-8/">&lt;p&gt;Symfony is a full-featured modularized PHP framework that is used for building all kinds of applications, from traditional web applications to small Microservice components.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*7zVWP_mRMsd2gPIrKrxrNA.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kakachen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;te chan&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/china-snow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Get your feet wet&lt;/h3&gt;&lt;p&gt;Install PHP 8 and PHP Composer tools.&lt;/p&gt;&lt;pre&gt;# choco php composer&lt;/pre&gt;&lt;p&gt;Install [Symfony CLI](symfony check:requirements), check the system requirements.&lt;/p&gt;&lt;pre&gt;# symfony check:requirements&lt;/pre&gt;&lt;pre&gt;Symfony Requirements Checker&lt;br&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/pre&gt;&lt;pre&gt;&amp;gt; PHP is using the following php.ini file:&lt;br&gt;C:\tools\php80\php.ini&lt;/pre&gt;&lt;pre&gt;&amp;gt; Checking Symfony requirements:&lt;/pre&gt;&lt;pre&gt;....................WWW.........&lt;/pre&gt;&lt;pre&gt;                                              &lt;br&gt; [OK]                                         &lt;br&gt; Your system is ready to run Symfony projects &lt;br&gt;                                              &lt;/pre&gt;&lt;pre&gt;Optional recommendations to improve your setup&lt;br&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/pre&gt;&lt;pre&gt; * intl extension should be available&lt;br&gt;   &amp;gt; Install and enable the intl extension (used for validators).&lt;/pre&gt;&lt;pre&gt; * a PHP accelerator should be installed&lt;br&gt;   &amp;gt; Install and/or enable a PHP accelerator (highly recommended).&lt;/pre&gt;&lt;pre&gt; * realpath_cache_size should be at least 5M in php.ini&lt;br&gt;   &amp;gt; Setting &amp;quot;realpath_cache_size&amp;quot; to e.g. &amp;quot;5242880&amp;quot; or &amp;quot;5M&amp;quot; in&lt;br&gt;   &amp;gt; php.ini* may improve performance on Windows significantly in some&lt;br&gt;   &amp;gt; cases.&lt;br&gt;&lt;/pre&gt;&lt;pre&gt;Note  The command console can use a different php.ini file&lt;br&gt;~~~~  than the one used by your web server.&lt;br&gt;      Please check that both the console and the web server&lt;br&gt;      are using the same PHP version and configuration.&lt;/pre&gt;&lt;p&gt;According to the &lt;em&gt;recommendations&lt;/em&gt; info, adjust your PHP configuration in the &lt;em&gt;php.ini&lt;/em&gt;. And we will use Postgres as database in the sample application, make sure pdo_pgsql and pgsql modules are enabled.&lt;/p&gt;&lt;p&gt;Finally, you can confirm the enabled modules by the following command.&lt;/p&gt;&lt;pre&gt;# php -m&lt;/pre&gt;&lt;p&gt;Create a new Symfony project.&lt;/p&gt;&lt;pre&gt;# symfony new rest-sample&lt;/pre&gt;&lt;pre&gt;// a classic website application&lt;br&gt;# symfony new web-sample --full&lt;/pre&gt;&lt;p&gt;By default, it will create a simple Symfony skeleton project only with core kernel configuration, which is good to start a lightweight Restful API application.&lt;/p&gt;&lt;p&gt;Alternatively, you can create it using Composer.&lt;/p&gt;&lt;pre&gt;# composer create-project symfony/skeleton rest-sample&lt;/pre&gt;&lt;pre&gt;//start a classic website application&lt;br&gt;# composer create-project symfony/website-skeleton web-sample&lt;/pre&gt;&lt;p&gt;Enter the generated project root folder, start the application.&lt;/p&gt;&lt;pre&gt;# symfony server:start&lt;/pre&gt;&lt;pre&gt; [WARNING] run &amp;quot;symfony.exe server:ca:install&amp;quot; first if you want to run the web server with TLS support, or use &amp;quot;--no-  &lt;br&gt; tls&amp;quot; to avoid this warning                                                                                             &lt;br&gt;                                                                                                                       &lt;br&gt;Tailing PHP-CGI log file (C:\Users\hantsy\.symfony\log\499d60b14521d4842ba7ebfce0861130efe66158\79ca75f9e90b4126a5955a33ea6a41ec5e854698.log)&lt;br&gt;Tailing Web Server log file (C:\Users\hantsy\.symfony\log\499d60b14521d4842ba7ebfce0861130efe66158.log)&lt;br&gt;                                                                                                                        &lt;br&gt; [OK] Web server listening                                                                                              &lt;br&gt;      The Web server is using PHP CGI 8.0.10                                                                            &lt;br&gt;      &lt;a href=&quot;http://127.0.0.1:8000&quot;&gt;http://127.0.0.1:8000&lt;/a&gt;                                                                                             &lt;br&gt;                                                                                                                        &lt;/pre&gt;&lt;pre&gt;[Web Server ] Oct  4 13:33:01 |DEBUG  | PHP    Reloading PHP versions&lt;br&gt;[Web Server ] Oct  4 13:33:01 |DEBUG  | PHP    Using PHP version 8.0.10 (from default version in $PATH)&lt;br&gt;[Web Server ] Oct  4 13:33:01 |INFO   | PHP    listening path=&amp;quot;C:\\tools\\php80\\php-cgi.exe&amp;quot; php=&amp;quot;8.0.10&amp;quot; port=61738&lt;/pre&gt;&lt;h3&gt;Hello , Symfony&lt;/h3&gt;&lt;p&gt;Create a simple class to a resource entity in the HTTP response.&lt;/p&gt;&lt;pre&gt;class Post&lt;br&gt;{&lt;br&gt;    private ?string $id = null;&lt;/pre&gt;&lt;pre&gt;    private string $title;&lt;/pre&gt;&lt;pre&gt;    private string $content;&lt;br&gt;    &lt;br&gt;    //getters and setters.&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;And use a factory to create a new Post instance.&lt;/p&gt;&lt;pre&gt;class PostFactory&lt;br&gt;{&lt;br&gt;    public static function create(string $title, string $content): Post&lt;br&gt;    {&lt;br&gt;        $post = new Post();&lt;br&gt;        $post-&amp;gt;setTitle($title);&lt;br&gt;        $post-&amp;gt;setContent($content);&lt;br&gt;        return $post;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Let’s create a simple Controller class.&lt;/p&gt;&lt;p&gt;To use the newest PHP 8 attributes to configure the routing rules, apply the following changes in the project configurations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Open &lt;em&gt;config/packages/doctrine.yaml&lt;/em&gt;, remove doctrine/orm/mapping/App/type or change its value to attribute&lt;/li&gt;&lt;li&gt;Open &lt;em&gt;composer.json&lt;/em&gt;, change PHP version to &amp;gt;=8.0.0.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To render the response body into a JSON string, use a JsonReponse to wrap the response.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;/posts&amp;quot;, name: &amp;quot;posts_&amp;quot;)]&lt;br&gt;class PostController&lt;br&gt;{&lt;/pre&gt;&lt;pre&gt;    #[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    function all(): Response&lt;br&gt;    {&lt;br&gt;        $post1 = PostFactory::create(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;);&lt;br&gt;        $post1-&amp;gt;setId(&amp;quot;1&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        $post2 = PostFactory::create(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;);&lt;br&gt;        $post2-&amp;gt;setId(&amp;quot;2&amp;quot;);&lt;br&gt;        $data = [$post1-&amp;gt;asArray(), $post2-&amp;gt;asArray()];&lt;br&gt;        return new JsonResponse($data, 200, [&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;]);&lt;br&gt;        //return $this-&amp;gt;json($data, 200, [&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;]);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The first parameter of JsonReponse accepts an array as data, so add a function in the Post class to archive this purpose.&lt;/p&gt;&lt;pre&gt;class Post{&lt;br&gt;    //...&lt;br&gt;    public function asArray(): array&lt;br&gt;    {&lt;br&gt;        return [&lt;br&gt;            &amp;#39;id&amp;#39; =&amp;gt; $this-&amp;gt;id,&lt;br&gt;            &amp;#39;title&amp;#39; =&amp;gt; $this-&amp;gt;title,&lt;br&gt;            &amp;#39;content&amp;#39; =&amp;gt; $this-&amp;gt;content&lt;br&gt;        ];&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Run the application, use curl to test the /posts endpoint.&lt;/p&gt;&lt;pre&gt;# curl &lt;a href=&quot;http://localhost:8000/posts&quot;&gt;http://localhost:8000/posts&lt;/a&gt;&lt;/pre&gt;&lt;p&gt;Symfony provides a simple AbstractController which includes several functions to simplfy the response and adopt the container and dependency injection management.&lt;/p&gt;&lt;p&gt;In the above controller, extends from AbstractController, simply call $this-&amp;gt;json to render the response in JSON format, no need to transform the data to an array before rendering response.&lt;/p&gt;&lt;pre&gt;class PostController extends AbstractController&lt;br&gt;{&lt;/pre&gt;&lt;pre&gt;    function all(): Response&lt;br&gt;    {&lt;br&gt;        //...&lt;br&gt;        return $this-&amp;gt;json($data, 200, [&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;]);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Connecting to Database&lt;/h3&gt;&lt;p&gt;Doctrine is a popular ORM framework , it is highly inspired by the existing Java ORM tooling, such as JPA spec and Hibernate framework. There are two core components in Doctrine, doctrine/dbal and doctrine/orm, the former is a low level APIs for database operations, if you know Java development, consider it as the &lt;em&gt;Jdbc&lt;/em&gt; layer. The later is the advanced ORM framework, the public APIs are similar to JPA/Hibernate.&lt;/p&gt;&lt;p&gt;Install Doctrine into the project.&lt;/p&gt;&lt;pre&gt;# composer require symfony/orm-pack&lt;br&gt;# composer require --dev symfony/maker-bundle&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;pack&lt;/strong&gt; is a virtual Symfony package, it will install a series of packages and basic configurations.&lt;/p&gt;&lt;p&gt;Open the .env file in the project root folder, edit the DATABASE_URL value, setup the database name, username, password to connect.&lt;/p&gt;&lt;pre&gt;DATABASE_URL=&amp;quot;postgresql://user:password@127.0.0.1:5432/blogdb?serverVersion=13&amp;amp;charset=utf8&amp;quot;&lt;/pre&gt;&lt;p&gt;Use the following command to generate a docker compose file template.&lt;/p&gt;&lt;pre&gt;# php bin/console make:docker:database&lt;/pre&gt;&lt;p&gt;We change it to the following to start up a Postgres database in development.&lt;/p&gt;&lt;pre&gt;version: &amp;quot;3.5&amp;quot; # specify docker-compose version, v3.5 is compatible with docker 17.12.0+&lt;/pre&gt;&lt;pre&gt;# Define the services/containers to be run&lt;br&gt;services:&lt;/pre&gt;&lt;pre&gt;  postgres:&lt;br&gt;    image: postgres:${POSTGRES_VERSION:-13}-alpine&lt;br&gt;    ports:&lt;br&gt;      - &amp;quot;5432:5432&amp;quot;&lt;br&gt;    environment:&lt;br&gt;      POSTGRES_DB: ${POSTGRES_DB:-blogdb}&lt;br&gt;      # You should definitely change the password in production&lt;br&gt;      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}&lt;br&gt;      POSTGRES_USER: ${POSTGRES_USER:-user}&lt;br&gt;    volumes:&lt;br&gt;      - ./data/blogdb:/var/lib/postgresql/data:rw&lt;br&gt;      - ./pg-initdb.d:/docker-entrypoint-initdb.d&lt;/pre&gt;&lt;p&gt;We will use UUID as data type of the primary key, add a script to enable uuid-ossp extension in Postgres when it is starting up.&lt;/p&gt;&lt;pre&gt;-- file: pg-initdb.d/ini.sql&lt;br&gt;SET search_path TO public;&lt;br&gt;DROP EXTENSION IF EXISTS &amp;quot;uuid-ossp&amp;quot;;&lt;br&gt;CREATE EXTENSION &amp;quot;uuid-ossp&amp;quot; SCHEMA public;&lt;/pre&gt;&lt;p&gt;Open &lt;em&gt;config/packages/test/doctrine.yaml&lt;/em&gt;, comment out dbname_suffix line. We use Docker container to bootstrap a database to ensure the application behaviors are same between the development and production.&lt;/p&gt;&lt;p&gt;Now startup the application and make sure there is no exception in the console, that means the database connection is successful.&lt;/p&gt;&lt;pre&gt;symfony server:start&lt;/pre&gt;&lt;p&gt;Before starting the application, make sure the database is running. Run the following command to start up the Postgres in Docker.&lt;/p&gt;&lt;pre&gt;# docker compose up postgres&lt;br&gt;# docker ps -a # to list all containers and make the postgres is running&lt;/pre&gt;&lt;h3&gt;Building Data Models&lt;/h3&gt;&lt;p&gt;Now we will build the Entities that will be used in the next sections. We are modeling a simple blog system, it includes the following concepts.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A Post presents an article post in the blog system.&lt;/li&gt;&lt;li&gt;A Comment presents the comments under a specific post.&lt;/li&gt;&lt;li&gt;The common Tag can be applied on different posts, which categorizes posts by topic, categories , etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can draft your model relations in mind or through some graphic data modeling tools.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Post and comments is a one-to-many relation&lt;/li&gt;&lt;li&gt;Post and tag is a many-to-many relation&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It is easy to convert the idea to real codes via Doctrine Entity. Run the following command to create Post, Comment and Tag entities.&lt;/p&gt;&lt;p&gt;In the Doctrine ORM 2.10.x and Dbal 3.x, the UUID type ID generator is deprecated. We will switch to the Uuid form symfony\uid.&lt;/p&gt;&lt;p&gt;Install symfony\uid firstly.&lt;/p&gt;&lt;pre&gt;# composer require symfony/uid&lt;/pre&gt;&lt;p&gt;Simply, you can use the following command to create entities quickly.&lt;/p&gt;&lt;pre&gt;# php bin/console make:entity  # following the interactive steps to create them one by one.&lt;/pre&gt;&lt;p&gt;Finally we got three entities in the &lt;em&gt;src/Entity&lt;/em&gt; folder. Modify them as you expected.&lt;/p&gt;&lt;pre&gt;// src/Entity/Post.php&lt;br&gt;#[Entity(repositoryClass: PostRepository::class)]&lt;br&gt;class Post&lt;br&gt;{&lt;br&gt;    #[Id]&lt;br&gt;    //#[GeneratedValue(strategy: &amp;quot;UUID&amp;quot;)&lt;br&gt;    //#[Column(type: &amp;quot;string&amp;quot;, unique: true)]&lt;br&gt;    #[Column(type: &amp;quot;uuid&amp;quot;, unique: true)]&lt;br&gt;    #[GeneratedValue(strategy: &amp;quot;CUSTOM&amp;quot;)]&lt;br&gt;    #[CustomIdGenerator(class: UuidGenerator::class)]&lt;br&gt;    private ?Uuid $id = null;&lt;/pre&gt;&lt;pre&gt;    #[Column(type: &amp;quot;string&amp;quot;, length: 255)]&lt;br&gt;    private string $title;&lt;/pre&gt;&lt;pre&gt;    #[Column(type: &amp;quot;string&amp;quot;, length: 255)]&lt;br&gt;    private string $content;&lt;/pre&gt;&lt;pre&gt;    #[Column(name: &amp;quot;created_at&amp;quot;, type: &amp;quot;datetime&amp;quot;, nullable: true)]&lt;br&gt;    private DateTime|null $createdAt = null;&lt;/pre&gt;&lt;pre&gt;    #[Column(name: &amp;quot;published_at&amp;quot;, type: &amp;quot;datetime&amp;quot;, nullable: true)]&lt;br&gt;    private DateTime|null $publishedAt = null;&lt;/pre&gt;&lt;pre&gt;    #[OneToMany(mappedBy: &amp;quot;post&amp;quot;, targetEntity: Comment::class, cascade: [&amp;#39;persist&amp;#39;, &amp;#39;merge&amp;#39;, &amp;quot;remove&amp;quot;], fetch: &amp;#39;LAZY&amp;#39;, orphanRemoval: true)]&lt;br&gt;    private Collection $comments;&lt;/pre&gt;&lt;pre&gt;    #[ManyToMany(targetEntity: Tag::class, mappedBy: &amp;quot;posts&amp;quot;, cascade: [&amp;#39;persist&amp;#39;, &amp;#39;merge&amp;#39;], fetch: &amp;#39;EAGER&amp;#39;)]&lt;br&gt;    private Collection $tags;&lt;/pre&gt;&lt;pre&gt;    public function __construct()&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;createdAt = new DateTime();&lt;br&gt;        $this-&amp;gt;comments = new ArrayCollection();&lt;br&gt;        $this-&amp;gt;tags = new ArrayCollection();&lt;br&gt;    }&lt;br&gt;    //other getters and setters&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;// src/Entity/Comment.php&lt;br&gt;#[Entity(repositoryClass: CommentRepository::class)]&lt;br&gt;class Comment&lt;br&gt;{&lt;br&gt;    #[Id]&lt;br&gt;    //#[GeneratedValue(strategy: &amp;quot;UUID&amp;quot;)]&lt;br&gt;    #[Column(type: &amp;quot;uuid&amp;quot;, unique: true)]&lt;br&gt;    #[GeneratedValue(strategy: &amp;quot;CUSTOM&amp;quot;)]&lt;br&gt;    #[CustomIdGenerator(class: UuidGenerator::class)]&lt;br&gt;    private ?Uuid $id = null;&lt;/pre&gt;&lt;pre&gt;    #[Column(type: &amp;quot;string&amp;quot;, length: 255)]&lt;br&gt;    private string $content;&lt;/pre&gt;&lt;pre&gt;    #[Column(name: &amp;quot;created_at&amp;quot;, type: &amp;quot;datetime&amp;quot;, nullable: true)]&lt;br&gt;    private DateTime|null $createdAt = null;&lt;/pre&gt;&lt;pre&gt;    #[ManyToOne(targetEntity: &amp;quot;Post&amp;quot;, inversedBy: &amp;quot;comments&amp;quot;)]&lt;br&gt;    #[JoinColumn(name: &amp;quot;post_id&amp;quot;, referencedColumnName: &amp;quot;id&amp;quot;)]&lt;br&gt;    private Post $post;&lt;/pre&gt;&lt;pre&gt;    public function __construct()&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;createdAt = new DateTime();&lt;br&gt;    }&lt;br&gt;    //other getters and setters&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;//src/Entity/Tag.php&lt;br&gt;#[Entity(repositoryClass: TagRepository::class)]&lt;br&gt;class Tag&lt;br&gt;{&lt;br&gt;    #[Id]&lt;br&gt;    //#[GeneratedValue(strategy: &amp;quot;UUID&amp;quot;)&lt;br&gt;    //#[Column(type: &amp;quot;string&amp;quot;, unique: true)]&lt;br&gt;    #[Column(type: &amp;quot;uuid&amp;quot;, unique: true)]&lt;br&gt;    #[GeneratedValue(strategy: &amp;quot;CUSTOM&amp;quot;)]&lt;br&gt;    #[CustomIdGenerator(class: UuidGenerator::class)]&lt;br&gt;    private ?Uuid $id = null;&lt;/pre&gt;&lt;pre&gt;    #[Column(type: &amp;quot;string&amp;quot;, length: 255)]&lt;br&gt;    private ?string $name;&lt;/pre&gt;&lt;pre&gt;    #[ManyToMany(targetEntity: Post::class, inversedBy: &amp;quot;tags&amp;quot;)]&lt;br&gt;    private Collection $posts;&lt;/pre&gt;&lt;pre&gt;    public function __construct()&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;posts = new ArrayCollection();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;At the same time, it generated three Repository classes for these entities.&lt;/p&gt;&lt;pre&gt;// src/Repository/PostRepsoitory.php&lt;br&gt;class PostRepository extends ServiceEntityRepository&lt;br&gt;{&lt;br&gt;    public function __construct(ManagerRegistry $registry)&lt;br&gt;    {&lt;br&gt;        parent::__construct($registry, Post::class);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;// src/Repository/CommentRepsoitory.php&lt;br&gt;class CommentRepository extends ServiceEntityRepository&lt;br&gt;{&lt;br&gt;    public function __construct(ManagerRegistry $registry)&lt;br&gt;    {&lt;br&gt;        parent::__construct($registry, Comment::class);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;//src/Repository/TagRepository.php&lt;br&gt;class TagRepository extends ServiceEntityRepository&lt;br&gt;{&lt;br&gt;    public function __construct(ManagerRegistry $registry)&lt;br&gt;    {&lt;br&gt;        parent::__construct($registry, Tag::class);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;You can use Doctrine migration to generate a &lt;em&gt;Migration&lt;/em&gt; file to maintain database schema in a production environment.&lt;/p&gt;&lt;p&gt;Run the following command to generate a &lt;em&gt;Migration&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;# php bin/console make:migration&lt;/pre&gt;&lt;p&gt;After it is executed, a Migration file is generated in the &lt;em&gt;migrations&lt;/em&gt; folder, its naming is like Version20211104031420. It is a simple class extended AbstractMigration, the up function is use for upgrade to this version and down function is use for downgrade to the previous version.&lt;/p&gt;&lt;p&gt;To apply Migrations on database automaticially.&lt;/p&gt;&lt;pre&gt;# php bin/console doctrine:migrations:migrate&lt;/pre&gt;&lt;pre&gt;# return to prev version&lt;br&gt;# php bin/console doctrine:migrations:migrate prev&lt;/pre&gt;&lt;pre&gt;# migrate to next&lt;br&gt;# php bin/console doctrine:migrations:migrate next&lt;/pre&gt;&lt;pre&gt;# These alias are defined : first, latest, prev, current and next&lt;/pre&gt;&lt;pre&gt;# certain version fully qualified class name&lt;br&gt;# php bin/console doctrine:migrations:migrate FQCN&lt;/pre&gt;&lt;p&gt;Doctrine bundle also includes some command to maintain database and schema. eg.&lt;/p&gt;&lt;pre&gt;# php bin/console doctrine:database:create&lt;br&gt;# php bin/console doctrine:database:drop&lt;/pre&gt;&lt;pre&gt;// schema create, drop, update and validate&lt;br&gt;# php bin/console doctrine:schema:create&lt;br&gt;# php bin/console doctrine:schema:drop&lt;br&gt;# php bin/console doctrine:schema:update&lt;br&gt;# php bin/console doctrine:schema:validate&lt;/pre&gt;&lt;h3&gt;Adding Sample Data&lt;/h3&gt;&lt;p&gt;Create a custom command to load some sample data.&lt;/p&gt;&lt;pre&gt;# php bin/console make:command add-post&lt;/pre&gt;&lt;p&gt;It will generate a AddPostCommand under &lt;em&gt;src/Command&lt;/em&gt; folder.&lt;/p&gt;&lt;pre&gt;#[AsCommand(&lt;br&gt;    name: &amp;#39;app:add-post&amp;#39;,&lt;br&gt;    description: &amp;#39;Add a short description for your command&amp;#39;,&lt;br&gt;)]&lt;br&gt;class AddPostCommand extends Command&lt;br&gt;{&lt;br&gt;&lt;/pre&gt;&lt;pre&gt;    public function __construct(private EntityManagerInterface $manager)&lt;br&gt;    {&lt;br&gt;        parent::__construct();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    protected function configure(): void&lt;br&gt;    {&lt;br&gt;        $this&lt;br&gt;            -&amp;gt;addArgument(&amp;#39;title&amp;#39;, InputArgument::REQUIRED, &amp;#39;Title of a post&amp;#39;)&lt;br&gt;            -&amp;gt;addArgument(&amp;#39;content&amp;#39;, InputArgument::REQUIRED, &amp;#39;Content of a post&amp;#39;)&lt;br&gt;            //-&amp;gt;addOption(&amp;#39;option1&amp;#39;, null, InputOption::VALUE_NONE, &amp;#39;Option description&amp;#39;)&lt;br&gt;        ;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    protected function execute(InputInterface $input, OutputInterface $output): int&lt;br&gt;    {&lt;br&gt;        $io = new SymfonyStyle($input, $output);&lt;br&gt;        $title = $input-&amp;gt;getArgument(&amp;#39;title&amp;#39;);&lt;/pre&gt;&lt;pre&gt;        if ($title) {&lt;br&gt;            $io-&amp;gt;note(sprintf(&amp;#39;Title: %s&amp;#39;, $title));&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        $content = $input-&amp;gt;getArgument(&amp;#39;content&amp;#39;);&lt;/pre&gt;&lt;pre&gt;        if ($content) {&lt;br&gt;            $io-&amp;gt;note(sprintf(&amp;#39;Content: %s&amp;#39;, $content));&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        $entity = PostFactory::create($title, $content);&lt;br&gt;        $this -&amp;gt;manager-&amp;gt;persist($entity);&lt;br&gt;        $this -&amp;gt;manager-&amp;gt;flush();&lt;/pre&gt;&lt;pre&gt;//        if ($input-&amp;gt;getOption(&amp;#39;option1&amp;#39;)) {&lt;br&gt;//            // ...&lt;br&gt;//        }&lt;/pre&gt;&lt;pre&gt;        $io-&amp;gt;success(&amp;#39;Post is saved: &amp;#39;.$entity);&lt;/pre&gt;&lt;pre&gt;        return Command::SUCCESS;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The Doctrine EntityManagerInterface is managed by Symfony &lt;em&gt;Service Container&lt;/em&gt;, and use for data persistence operations.&lt;/p&gt;&lt;p&gt;Run the following command to add a post into the database.&lt;/p&gt;&lt;pre&gt;# php bin/console app:add-post &amp;quot;test title&amp;quot; &amp;quot;test content&amp;quot;&lt;br&gt; ! [NOTE] Title: test title                                               &lt;br&gt; ! [NOTE] Content: test content                                                             &lt;br&gt; [OK] Post is saved: Post: [ id =1ec3d3ec-895d-685a-b712-955865f6c134, title=test title, content=test content, createdAt=1636010040, blishedAt=]&lt;/pre&gt;&lt;h3&gt;Testing Repository&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://phpunit.de&quot;&gt;PHPUnit&lt;/a&gt; is the most popular testing framework in PHP world, Symfony integrates PHPUnit tightly.&lt;/p&gt;&lt;p&gt;Run the following command to install PHPUnit and Symfony &lt;strong&gt;test-pack&lt;/strong&gt;. The &lt;strong&gt;test-pack&lt;/strong&gt; will install all essential packages for testing Symfony components and add PHPUnit configuration, such as &lt;em&gt;phpunit.xml.dist&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;# composer require --dev phpunit/phpunit symfony/test-pack&lt;/pre&gt;&lt;p&gt;An simple test example written in pure PHPUnit.&lt;/p&gt;&lt;pre&gt;class PostTest extends TestCase&lt;br&gt;{&lt;/pre&gt;&lt;pre&gt;    public function testPost()&lt;br&gt;    {&lt;br&gt;        $p = PostFactory::create(&amp;quot;tests title&amp;quot;, &amp;quot;tests content&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        $this-&amp;gt;assertEquals(&amp;quot;tests title&amp;quot;, $p-&amp;gt;getTitle());&lt;br&gt;        $this-&amp;gt;assertEquals(&amp;quot;tests content&amp;quot;, $p-&amp;gt;getContent());&lt;br&gt;        $this-&amp;gt;assertNotNull( $p-&amp;gt;getCreatedAt());&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Symfony provides some specific base classes(KernelTestCase, WebTestCase, etc.) to simplfy the testing work in a Symfony project.&lt;/p&gt;&lt;p&gt;The following is an example of testing a Repository - PostRepository. The KernelTestCase contains facilities to bootstrap application kernel and provides service container.&lt;/p&gt;&lt;pre&gt;class PostRepositoryTest extends KernelTestCase&lt;br&gt;{&lt;/pre&gt;&lt;pre&gt;    private EntityManagerInterface $entityManager;&lt;/pre&gt;&lt;pre&gt;    private PostRepository $postRepository;&lt;/pre&gt;&lt;pre&gt;    protected function setUp(): void&lt;br&gt;    {&lt;br&gt;        //(1) boot the Symfony kernel&lt;br&gt;        $kernel = self::bootKernel();&lt;br&gt;        $this-&amp;gt;assertSame(&amp;#39;test&amp;#39;, $kernel-&amp;gt;getEnvironment());&lt;br&gt;        $this-&amp;gt;entityManager = $kernel-&amp;gt;getContainer()&lt;br&gt;            -&amp;gt;get(&amp;#39;doctrine&amp;#39;)&lt;br&gt;            -&amp;gt;getManager();&lt;/pre&gt;&lt;pre&gt;        //(2) use static::getContainer() to access the service container&lt;br&gt;        $container = static::getContainer();&lt;/pre&gt;&lt;pre&gt;        //(3) get PostRepository from container.&lt;br&gt;        $this-&amp;gt;postRepository = $container-&amp;gt;get(PostRepository::class);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    protected function tearDown(): void&lt;br&gt;    {&lt;br&gt;        parent::tearDown();&lt;br&gt;        $this-&amp;gt;entityManager-&amp;gt;close();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public function testCreatePost(): void&lt;br&gt;    {&lt;br&gt;        $entity = PostFactory::create(&amp;quot;test post&amp;quot;, &amp;quot;test content&amp;quot;);&lt;br&gt;        $this-&amp;gt;entityManager-&amp;gt;persist($entity);&lt;br&gt;        $this-&amp;gt;entityManager-&amp;gt;flush();&lt;br&gt;        $this-&amp;gt;assertNotNull($entity-&amp;gt;getId());&lt;/pre&gt;&lt;pre&gt;        $byId = $this-&amp;gt;postRepository-&amp;gt;findOneBy([&amp;quot;id&amp;quot; =&amp;gt; $entity-&amp;gt;getId()]);&lt;br&gt;        $this-&amp;gt;assertEquals(&amp;quot;test post&amp;quot;, $byId-&amp;gt;getTitle());&lt;br&gt;        $this-&amp;gt;assertEquals(&amp;quot;test content&amp;quot;, $byId-&amp;gt;getContent());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;In the above codes, in the setUp function, boot up the application kernel, after it is booted, a test scoped &lt;em&gt;Service Container&lt;/em&gt; is available. Then get EntityManagerInterface and PostRepository from service container.&lt;/p&gt;&lt;p&gt;In the testCreatePost function, persists a Post entity, and find this post by id and verify the &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;content&lt;/em&gt; fields.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Currently, PHPUnit does not include PHP 8 Attribute support, the testing codes are similar to the legacy JUnit 4 code style.&lt;/em&gt;&lt;/blockquote&gt;&lt;h3&gt;Creating PostController: Exposing your first Rest API&lt;/h3&gt;&lt;p&gt;Similar to other MVC framework, we can expose RESTful APIs via Symfony Controller component. Follow the REST convention, we are planning to create the following APIs to a blog system.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;GET /posts Get all posts.&lt;/li&gt;&lt;li&gt;GET /posts/{id} Get a single post by ID, if not found, return status 404&lt;/li&gt;&lt;li&gt;POST /posts Create a new post from request body, add the new post URI to response header Location, and return status 201&lt;/li&gt;&lt;li&gt;DELETE /posts/{id} Delete a single post by ID, return status 204. If the post was not found, return status 404 instead.&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Run the following command to create a Controller skeleton. Follow the interactive guide to create a controller named PostController.&lt;/p&gt;&lt;pre&gt;# php bin/console make:constroller&lt;/pre&gt;&lt;p&gt;Open &lt;em&gt;src/Controller/PostController.php&lt;/em&gt; in IDE.&lt;/p&gt;&lt;p&gt;Add Route attribute on class level and two functions: one for fetching all posts and another for getting single post by ID.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;/posts&amp;quot;, name: &amp;quot;posts_&amp;quot;)]&lt;br&gt;class PostController extends AbstractController&lt;br&gt;{&lt;br&gt;    public function __construct(private PostRepository      $posts)&lt;br&gt;    {&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    #[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    function all(): Response&lt;br&gt;    {&lt;br&gt;        $data = $this-&amp;gt;posts-&amp;gt;findAll();&lt;br&gt;        return $this-&amp;gt;json($data);&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Start up the application, and try to access the &lt;a href=&quot;http://localhost:8000/posts&quot;&gt;&lt;em&gt;http://localhost:8000/posts&lt;/em&gt;&lt;/a&gt;, it will throw a circular dependencies exception when rendering the models in JSON view directly. There are some solutions to avoid this, the simplest is break the bi-direction relations before rendering the JSON view. Add a Ignore attribute on Comment.post and Tag.posts.&lt;/p&gt;&lt;pre&gt;//src/Entity/Comment.php&lt;br&gt;class Comment&lt;br&gt;{&lt;br&gt;    #[Ignore]&lt;br&gt;    private Post $post;&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;//src/Entity/Tag.php&lt;br&gt;class Tag&lt;br&gt;{&lt;br&gt;    #[Ignore]&lt;br&gt;    private Collection $posts;&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Testing Controller&lt;/h3&gt;&lt;p&gt;As described in the previous sections, to test Controller/API, create a test class to extend WebTestCase, which provides a plenty of facilities to handle request and assert response.&lt;/p&gt;&lt;p&gt;Run the following command to create a test skeleton.&lt;/p&gt;&lt;pre&gt;# php bin/console make:test&lt;/pre&gt;&lt;p&gt;Follow the interactive steps to create a test base on WebTestCase.&lt;/p&gt;&lt;pre&gt;class PostControllerTest extends WebTestCase&lt;br&gt;{&lt;br&gt;    public function testGetAllPosts(): void&lt;br&gt;    {&lt;br&gt;        $client = static::createClient();&lt;br&gt;        $crawler = $client-&amp;gt;request(&amp;#39;GET&amp;#39;, &amp;#39;/posts&amp;#39;);&lt;/pre&gt;&lt;pre&gt;        $this-&amp;gt;assertResponseIsSuccessful();&lt;/pre&gt;&lt;pre&gt;        //&lt;br&gt;        $response = $client-&amp;gt;getResponse();&lt;br&gt;        $data = $response-&amp;gt;getContent();&lt;br&gt;        //dump($data);&lt;br&gt;        $this-&amp;gt;assertStringContainsString(&amp;quot;Symfony and PHP&amp;quot;, $data);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;If you try to run the test, it will fail. At the moment, there is no any data for testing.&lt;/p&gt;&lt;h3&gt;Preparing Data for Testing Purpose&lt;/h3&gt;&lt;p&gt;The doctrine/doctrine-fixtures-bundle is use for populate sample data for testing purpose, and dama/doctrine-test-bundle ensures the data is restored before evey test is running.&lt;/p&gt;&lt;p&gt;Install doctrine/doctrine-fixtures-bundle and dama/doctrine-test-bundle.&lt;/p&gt;&lt;pre&gt;composer require --dev doctrine/doctrine-fixtures-bundle dama/doctrine-test-bundle&lt;/pre&gt;&lt;p&gt;Create a new Fixture.&lt;/p&gt;&lt;pre&gt;# php bin/console make:fixtures&lt;/pre&gt;&lt;p&gt;In the load fucntion, persist some data for tests.&lt;/p&gt;&lt;pre&gt;class AppFixtures extends Fixture&lt;br&gt;{&lt;br&gt;    public function load(ObjectManager $manager): void&lt;br&gt;    {&lt;br&gt;        $data = PostFactory::create(&amp;quot;Building Restful APIs with Symfony and PHP 8&amp;quot;, &amp;quot;test content&amp;quot;);&lt;br&gt;        $data-&amp;gt;addTag(Tag::of( &amp;quot;Symfony&amp;quot;))&lt;br&gt;            -&amp;gt;addTag( Tag::of(&amp;quot;PHP 8&amp;quot;))&lt;br&gt;            -&amp;gt;addComment(Comment::of(&amp;quot;test comment 1&amp;quot;))&lt;br&gt;            -&amp;gt;addComment(Comment::of(&amp;quot;test comment 2&amp;quot;));&lt;/pre&gt;&lt;pre&gt;        $manager-&amp;gt;persist($data);&lt;br&gt;        $manager-&amp;gt;flush();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Run the command to load the sample data into database manually.&lt;/p&gt;&lt;pre&gt;# php bin/console doctrine:fixtures:load&lt;/pre&gt;&lt;p&gt;Add the following extension configuration into the phpunit.xml.dist, thus the data will be purged and recreated for every test running.&lt;/p&gt;&lt;pre&gt;&amp;lt;extensions&amp;gt;&lt;br&gt;    &amp;lt;extension class=&amp;quot;DAMA\DoctrineTestBundle\PHPUnit\PHPUnitExtension&amp;quot;/&amp;gt;&lt;br&gt;&amp;lt;/extensions&amp;gt;&lt;/pre&gt;&lt;p&gt;Run the following command to execute PostControllerTest.php .&lt;/p&gt;&lt;pre&gt;# php .\vendor\bin\phpunit .\tests\Controller\PostControllerTest.php&lt;/pre&gt;&lt;h3&gt;Paginating Result&lt;/h3&gt;&lt;p&gt;There are a lot of web applications which provide a input field for typing keyword and paginating the search results. Assume there is a &lt;em&gt;keyword&lt;/em&gt; provided by request to match Post &lt;em&gt;title&lt;/em&gt; or &lt;em&gt;content&lt;/em&gt; fields, a &lt;em&gt;offset&lt;/em&gt; to set the offset position of the pagination, and a &lt;em&gt;limit&lt;/em&gt; to set the limited size of the elements per page. Create a function in the PostRepository, accepts a &lt;em&gt;keyword&lt;/em&gt;, &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;limit&lt;/em&gt; as arguments.&lt;/p&gt;&lt;pre&gt;public function findByKeyword(string $q, int $offset = 0, int $limit = 20): Page&lt;br&gt;{&lt;br&gt;    $query = $this-&amp;gt;createQueryBuilder(&amp;quot;p&amp;quot;)&lt;br&gt;        -&amp;gt;andWhere(&amp;quot;p.title like :q or p.content like :q&amp;quot;)&lt;br&gt;        -&amp;gt;setParameter(&amp;#39;q&amp;#39;, &amp;quot;%&amp;quot; . $q . &amp;quot;%&amp;quot;)&lt;br&gt;        -&amp;gt;orderBy(&amp;#39;p.createdAt&amp;#39;, &amp;#39;DESC&amp;#39;)&lt;br&gt;        -&amp;gt;setMaxResults($limit)&lt;br&gt;        -&amp;gt;setFirstResult($offset)&lt;br&gt;        -&amp;gt;getQuery();&lt;/pre&gt;&lt;pre&gt;    $paginator = new Paginator($query, $fetchJoinCollection = false);&lt;br&gt;    $c = count($paginator);&lt;br&gt;    $content = new ArrayCollection();&lt;br&gt;    foreach ($paginator as $post) {&lt;br&gt;        $content-&amp;gt;add(PostSummaryDto::of($post-&amp;gt;getId(), $post-&amp;gt;getTitle()));&lt;br&gt;    }&lt;br&gt;    return Page::of ($content, $c, $offset, $limit);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Firstly, create a dynamic query using createQueryBuilder , then create a Doctrine Paginator instance to execute the query. The Paginator implements Countable interface, use count to get the count of total elements. Finally, we use a custom Page object to wrap the result.&lt;/p&gt;&lt;pre&gt;class Page&lt;br&gt;{&lt;br&gt;    private Collection $content;&lt;br&gt;    private int $totalElements;&lt;br&gt;    private int $offset;&lt;br&gt;    private int $limit;&lt;/pre&gt;&lt;pre&gt;    #[Pure] public function __construct()&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;content = new ArrayCollection();&lt;br&gt;    }&lt;br&gt;&lt;/pre&gt;&lt;pre&gt;    public static function of(Collection $content, int $totalElements, int $offset = 0, int $limit = 20): Page&lt;br&gt;    {&lt;br&gt;        $page = new Page();&lt;br&gt;        $page-&amp;gt;setContent($content)&lt;br&gt;            -&amp;gt;setTotalElements($totalElements)&lt;br&gt;            -&amp;gt;setOffset($offset)&lt;br&gt;            -&amp;gt;setLimit($limit);&lt;/pre&gt;&lt;pre&gt;        return $page;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    //&lt;br&gt;    //getters&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;h3&gt;Customzing ArgumentResolver&lt;/h3&gt;&lt;p&gt;In the PostController , let&amp;#39;s improve the the function which serves the route /posts, make it accept query parameters like &lt;em&gt;/posts?q=Symfony&amp;amp;offset=0&amp;amp;limit=10&lt;/em&gt;, and ensure the parameters are optional.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    function all(Request $req): Response&lt;br&gt;    {&lt;br&gt;        $keyword = $req-&amp;gt;query-&amp;gt;get(&amp;#39;q&amp;#39;)??&amp;#39;&amp;#39;;&lt;br&gt;        $offset = $req-&amp;gt;query-&amp;gt;get(&amp;#39;offset&amp;#39;)??0;&lt;br&gt;        $limit = $req-&amp;gt;query-&amp;gt;get(&amp;#39;limit&amp;#39;)??10;&lt;br&gt;        &lt;br&gt;        $data = $this-&amp;gt;posts-&amp;gt;findByKeyword($keyword, $offset, $limit);&lt;br&gt;        return $this-&amp;gt;json($data);&lt;br&gt;    }&lt;/pre&gt;&lt;p&gt;It works but the query parameters handling looks a little ugly. It is great if they can be handled as the route path parameters.&lt;/p&gt;&lt;p&gt;We can create a custom ArgumentResolver to resolve the bound query arguments.&lt;/p&gt;&lt;p&gt;Firstly create an Annotation/Attribute class to identify a query parameter that need to be resolved by this ArgumentResolver.&lt;/p&gt;&lt;pre&gt;#[Attribute(Attribute::TARGET_PARAMETER)]&lt;br&gt;final class QueryParam&lt;br&gt;{&lt;br&gt;    private null|string $name;&lt;br&gt;    private bool $required;&lt;/pre&gt;&lt;pre&gt;    /**&lt;br&gt;     * @param string|null $name&lt;br&gt;     * @param bool $required&lt;br&gt;     */&lt;br&gt;    public function __construct(?string $name = null, bool $required = false)&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;name = $name;&lt;br&gt;        $this-&amp;gt;required = $required;&lt;br&gt;    }&lt;br&gt;    &lt;br&gt;    //getters and setters&lt;br&gt;    &lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Create a custom ArgumentResolver implements the built-in ArgugmentResolverInterface.&lt;/p&gt;&lt;pre&gt;class QueryParamValueResolver implements ArgumentValueResolverInterface, LoggerAwareInterface&lt;br&gt;{&lt;br&gt;    public function __construct()&lt;br&gt;    {&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private LoggerInterface $logger;&lt;/pre&gt;&lt;pre&gt;    /**&lt;br&gt;     * @inheritDoc&lt;br&gt;     */&lt;br&gt;    public function resolve(Request $request, ArgumentMetadata $argument)&lt;br&gt;    {&lt;br&gt;        $argumentName = $argument-&amp;gt;getName();&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;info(&amp;quot;Found [QueryParam] annotation/attribute on argument &amp;#39;&amp;quot; . $argumentName . &amp;quot;&amp;#39;, applying [QueryParamValueResolver]&amp;quot;);&lt;br&gt;        $type = $argument-&amp;gt;getType();&lt;br&gt;        $nullable = $argument-&amp;gt;isNullable();&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The method argument type: &amp;#39;&amp;quot; . $type . &amp;quot;&amp;#39; and nullable: &amp;#39;&amp;quot; . $nullable . &amp;quot;&amp;#39;&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        //read name property from QueryParam&lt;br&gt;        $attr = $argument-&amp;gt;getAttributes(QueryParam::class)[0];// `QueryParam` is not repeatable&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;QueryParam:&amp;quot; . $attr);&lt;br&gt;        //if name property is not set in `QueryParam`, use the argument name instead.&lt;br&gt;        $name = $attr-&amp;gt;getName() ?? $argumentName;&lt;br&gt;        $required = $attr-&amp;gt;isRequired() ?? false;&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;Polished QueryParam values: name=&amp;#39;&amp;quot; . $name . &amp;quot;&amp;#39;, required=&amp;#39;&amp;quot; . $required . &amp;quot;&amp;#39;&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        //fetch query name from request&lt;br&gt;        $value = $request-&amp;gt;query-&amp;gt;get($name);&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The request query parameter value: &amp;#39;&amp;quot; . $value . &amp;quot;&amp;#39;&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        //if default value is set and query param value is not set, use default value instead.&lt;br&gt;        if (!$value &amp;amp;&amp;amp; $argument-&amp;gt;hasDefaultValue()) {&lt;br&gt;            $value = $argument-&amp;gt;getDefaultValue();&lt;br&gt;            $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;After set default value: &amp;#39;&amp;quot; . $value . &amp;quot;&amp;#39;&amp;quot;);&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        if ($required &amp;amp;&amp;amp; !$value) {&lt;br&gt;            throw new \InvalidArgumentException(&amp;quot;Request query parameter &amp;#39;&amp;quot; . $name . &amp;quot;&amp;#39; is required, but not set.&amp;quot;);&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;final resolved value: &amp;#39;&amp;quot; . $value . &amp;quot;&amp;#39;&amp;quot;);&lt;br&gt;        &lt;br&gt;        //must return  a `yield` clause&lt;br&gt;        yield match ($type) {&lt;br&gt;            &amp;#39;int&amp;#39; =&amp;gt; $value ? (int)$value : 0,&lt;br&gt;            &amp;#39;float&amp;#39; =&amp;gt; $value ? (float)$value : .0,&lt;br&gt;            &amp;#39;bool&amp;#39; =&amp;gt; (bool)$value,&lt;br&gt;            &amp;#39;string&amp;#39; =&amp;gt; $value ? (string)$value : ($nullable ? null : &amp;#39;&amp;#39;),&lt;br&gt;            null =&amp;gt; null&lt;br&gt;        };&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public function supports(Request $request, ArgumentMetadata $argument): bool&lt;br&gt;    {&lt;br&gt;        $attrs = $argument-&amp;gt;getAttributes(QueryParam::class);&lt;br&gt;        return count($attrs) &amp;gt; 0;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public function setLogger(LoggerInterface $logger)&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;logger = $logger;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;At runtime, it calls the supports function to check it the current request satisfy the requirement, if it is ok, then invoke the resovle funtion.&lt;/p&gt;&lt;p&gt;In the supports function, we check if the argument is annotated with a QueryParam, if it is existed, then resolved the argument from request query string.&lt;/p&gt;&lt;p&gt;Now change the function that serves &lt;em&gt;/posts&lt;/em&gt; endpoint to the following.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;function all(#[QueryParam] $keyword,&lt;br&gt;    #[QueryParam] int $offset = 0,&lt;br&gt;    #[QueryParam] int $limit = 20): Response&lt;br&gt;    {&lt;br&gt;        $data = $this-&amp;gt;posts-&amp;gt;findByKeyword($keyword || &amp;#39;&amp;#39;, $offset, $limit);&lt;br&gt;        return $this-&amp;gt;json($data);&lt;br&gt;    }&lt;/pre&gt;&lt;p&gt;Run the application and test the &lt;em&gt;/posts&lt;/em&gt; using curl.&lt;/p&gt;&lt;pre&gt;# curl &lt;a href=&quot;http://localhost:8000/posts&quot;&gt;http://localhost:8000/posts&lt;/a&gt;&lt;br&gt;{&lt;br&gt;    &amp;quot;content&amp;quot;:[&lt;br&gt;    	{&lt;br&gt;            &amp;quot;id&amp;quot;:&amp;quot;1ec3e1e0-17b3-6ed2-a01c-edecc112b436&amp;quot;,&lt;br&gt;            &amp;quot;title&amp;quot;:&amp;quot;Building Restful APIs with Symfony and PHP 8&amp;quot;&lt;br&gt;        }&lt;br&gt;    ],&lt;br&gt;    &amp;quot;totalElements&amp;quot;:1,&lt;br&gt;    &amp;quot;offset&amp;quot;:0,&lt;br&gt;    &amp;quot;limit&amp;quot;:20&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Get Post by ID&lt;/h3&gt;&lt;p&gt;Follow the design in the previous section, add another function to PostController to map route /posts/{id} .&lt;/p&gt;&lt;pre&gt;class PostController extends AbstractController&lt;br&gt;{&lt;br&gt;	//other functions...&lt;/pre&gt;&lt;pre&gt;    #[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;    function getById(Uuid $id): Response&lt;br&gt;    {&lt;br&gt;        $data = $this-&amp;gt;posts-&amp;gt;findOneBy([&amp;quot;id&amp;quot; =&amp;gt; $id]);&lt;br&gt;        if ($data) {&lt;br&gt;            return $this-&amp;gt;json($data);&lt;br&gt;        } else {&lt;br&gt;            return $this-&amp;gt;json([&amp;quot;error&amp;quot; =&amp;gt; &amp;quot;Post was not found by id:&amp;quot; . $id], 404);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Run the application, and try to access &lt;a href=&quot;http://localhost:8000/posts/%7Bid%7D&quot;&gt;&lt;em&gt;http://localhost:8000/posts/{id}&lt;/em&gt;&lt;/a&gt;, it will throw an exception like this.&lt;/p&gt;&lt;pre&gt;App\Controller\PostController::getById(): Argument #1 ($id) must be of type Symfony\Component\Uid\Uuid, string given, cal&lt;br&gt;led in D:\hantsylabs\symfony5-sample\rest-sample\vendor\symfony\http-kernel\HttpKernel.php on line 156&lt;/pre&gt;&lt;p&gt;The id in the URI is a string, can not be used as Uuid directly.&lt;/p&gt;&lt;p&gt;Symfony provides ParamConverter to convert the request attributes to the target type. We can create a custom ParamConverter to archive the purpose.&lt;/p&gt;&lt;h3&gt;Customizing ParamConverter&lt;/h3&gt;&lt;p&gt;Create a new class UuidParamCovnerter under &lt;em&gt;src/Request/&lt;/em&gt; folder.&lt;/p&gt;&lt;pre&gt;class UuidParamConverter implements ParamConverterInterface&lt;br&gt;{&lt;br&gt;    public function __construct(private LoggerInterface $logger)&lt;br&gt;    {&lt;br&gt;    }&lt;br&gt;&lt;/pre&gt;&lt;pre&gt;    /**&lt;br&gt;     * @inheritDoc&lt;br&gt;     */&lt;br&gt;    public function apply(Request $request, ParamConverter $configuration): bool&lt;br&gt;    {&lt;/pre&gt;&lt;pre&gt;        $param = $configuration-&amp;gt;getName();&lt;/pre&gt;&lt;pre&gt;        if (!$request-&amp;gt;attributes-&amp;gt;has($param)) {&lt;br&gt;            return false;&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        $value = $request-&amp;gt;attributes-&amp;gt;get($param);&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;info(&amp;quot;parameter value:&amp;quot; . $value);&lt;br&gt;        if (!$value &amp;amp;&amp;amp; $configuration-&amp;gt;isOptional()) {&lt;br&gt;            $request-&amp;gt;attributes-&amp;gt;set($param, null);&lt;/pre&gt;&lt;pre&gt;            return true;&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        $data = Uuid::fromString($value);&lt;br&gt;        $request-&amp;gt;attributes-&amp;gt;set($param, $data);&lt;/pre&gt;&lt;pre&gt;        return true;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    /**&lt;br&gt;     * @inheritDoc&lt;br&gt;     */&lt;br&gt;    public function supports(ParamConverter $configuration): bool&lt;br&gt;    {&lt;br&gt;        $className = $configuration-&amp;gt;getClass();&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;info(&amp;quot;converting to UUID :{c}&amp;quot;, [&amp;quot;c&amp;quot; =&amp;gt; $className]);&lt;br&gt;        return $className &amp;amp;&amp;amp; $className == Uuid::class;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In the above codes,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The supports function to check the execution environment if matching the requirements&lt;/li&gt;&lt;li&gt;The apply function to perform the conversion. if supports returns false, this conversion step will be skipped.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Creating a Post&lt;/h3&gt;&lt;p&gt;Follow the REST convention, define the following rule to serve an endpoint to handle the request.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Request matches Http verbs/HTTP Method: POST&lt;/li&gt;&lt;li&gt;Request matches route endpoint: &lt;em&gt;/posts&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Set request header Content-Type value to &lt;em&gt;application/json&lt;/em&gt;, and use request body to hold request data as JSON format&lt;/li&gt;&lt;li&gt;If successful, return a CREATED(201) Http Status code, and set the response header &lt;em&gt;Location&lt;/em&gt; value to the URI of the new created post.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;create&amp;quot;, methods: [&amp;quot;POST&amp;quot;])]&lt;br&gt;public function create(Request $request): Response&lt;br&gt;{&lt;br&gt;    $data = $this-&amp;gt;serializer-&amp;gt;deserialize($request-&amp;gt;getContent(), CreatePostDto::class, &amp;#39;json&amp;#39;);&lt;br&gt;    $entity = PostFactory::create($data-&amp;gt;getTitle(), $data-&amp;gt;getContent());&lt;br&gt;    $this-&amp;gt;posts-&amp;gt;getEntityManager()-&amp;gt;persist($entity);&lt;/pre&gt;&lt;pre&gt;    return $this-&amp;gt;json([], 201, [&amp;quot;Location&amp;quot; =&amp;gt; &amp;quot;/posts/&amp;quot; . $entity-&amp;gt;getId()]);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The posts-&amp;gt;getEntityManager() overrides parent methods to get a EntityManager from parent class, you can also inject ObjectManager or EntityManagerInterface in the PostController directly to do the persistence work. The Doctrine Repository is mainly designated to build query criteria and execute custom queries.&lt;/p&gt;&lt;p&gt;Create a test function to verify in the PostControllerTest file.&lt;/p&gt;&lt;pre&gt;public function testCreatePost(): void&lt;br&gt;{&lt;br&gt;    $client = static::createClient();&lt;br&gt;    $data = CreatePostDto::of(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;);&lt;br&gt;    $crawler = $client-&amp;gt;request(&lt;br&gt;        &amp;#39;POST&amp;#39;,&lt;br&gt;        &amp;#39;/posts&amp;#39;,&lt;br&gt;        [],&lt;br&gt;        [],&lt;br&gt;        [],&lt;br&gt;        $this-&amp;gt;getContainer()-&amp;gt;get(&amp;#39;serializer&amp;#39;)-&amp;gt;serialize($data, &amp;#39;json&amp;#39;)&lt;br&gt;    );&lt;/pre&gt;&lt;pre&gt;    $this-&amp;gt;assertResponseIsSuccessful();&lt;/pre&gt;&lt;pre&gt;    $response = $client-&amp;gt;getResponse();&lt;br&gt;    $url = $response-&amp;gt;headers-&amp;gt;get(&amp;#39;Location&amp;#39;);&lt;br&gt;    //dump($data);&lt;br&gt;    $this-&amp;gt;assertNotNull($url);&lt;br&gt;    $this-&amp;gt;assertStringStartsWith(&amp;quot;/posts/&amp;quot;, $url);&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Converting Request Body&lt;/h3&gt;&lt;p&gt;We can also use an Annotation/Attribute to erase the raw codes of handling Request object through introducing a custom ArgumentResolver.&lt;/p&gt;&lt;p&gt;Create a Body &lt;em&gt;Attribute&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;#[Attribute(Attribute::TARGET_PARAMETER)]&lt;br&gt;final class Body&lt;br&gt;{&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Then create a BodyValueResolver.&lt;/p&gt;&lt;pre&gt;class BodyValueResolver implements ArgumentValueResolverInterface, LoggerAwareInterface&lt;br&gt;{&lt;br&gt;    public function __construct(private SerializerInterface $serializer)&lt;br&gt;    {&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    private LoggerInterface $logger;&lt;/pre&gt;&lt;pre&gt;    /**&lt;br&gt;     * @inheritDoc&lt;br&gt;     */&lt;br&gt;    public function resolve(Request $request, ArgumentMetadata $argument)&lt;br&gt;    {&lt;br&gt;        $type = $argument-&amp;gt;getType();&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The argument type:&amp;#39;&amp;quot; . $type . &amp;quot;&amp;#39;&amp;quot;);&lt;br&gt;        $format = $request-&amp;gt;getContentType() ?? &amp;#39;json&amp;#39;;&lt;br&gt;        $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The request format:&amp;#39;&amp;quot; . $format . &amp;quot;&amp;#39;&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        //read request body&lt;br&gt;        $content = $request-&amp;gt;getContent();&lt;br&gt;        $data = $this-&amp;gt;serializer-&amp;gt;deserialize($content, $type, $format);&lt;br&gt;       // $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;deserialized data:{0}&amp;quot;, [$data]);&lt;br&gt;        yield $data;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    /**&lt;br&gt;     * @inheritDoc&lt;br&gt;     */&lt;br&gt;    public function supports(Request $request, ArgumentMetadata $argument): bool&lt;br&gt;    {&lt;br&gt;        $attrs = $argument-&amp;gt;getAttributes(Body::class);&lt;br&gt;        return count($attrs) &amp;gt; 0;&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public function setLogger(LoggerInterface $logger)&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;logger = $logger;&lt;br&gt;    }&lt;/pre&gt;&lt;p&gt;In the supports method, it simply detects if the method argument annotated with a Body attribute, then apply resolve method to deserialize the request body content to a typed object.&lt;/p&gt;&lt;p&gt;Run the application and test the endpoint through &lt;em&gt;/posts&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;curl -v &lt;a href=&quot;http://localhost:8000/posts&quot;&gt;http://localhost:8000/posts&lt;/a&gt; -H &amp;quot;Content-Type:application/json&amp;quot; -d &amp;quot;{\&amp;quot;title\&amp;quot;:\&amp;quot;test title\&amp;quot;,\&amp;quot;content\&amp;quot;:\&amp;quot;test content\&amp;quot;}&amp;quot;&lt;br&gt;&amp;gt; POST /posts HTTP/1.1&lt;br&gt;&amp;gt; Host: localhost:8000&lt;br&gt;&amp;gt; User-Agent: curl/7.55.1&lt;br&gt;&amp;gt; Accept: */*&lt;br&gt;&amp;gt; Content-Type:application/json&lt;br&gt;&amp;gt; Content-Length: 47&lt;br&gt;&amp;gt;&lt;br&gt;&amp;lt; HTTP/1.1 201 Created&lt;br&gt;&amp;lt; Cache-Control: no-cache, private&lt;br&gt;&amp;lt; Content-Type: application/json&lt;br&gt;&amp;lt; Date: Sun, 21 Nov 2021 08:42:49 GMT&lt;br&gt;&amp;lt; Location: /posts/1ec4aa70-1b21-6bce-93f8-b39330fe328e&lt;br&gt;&amp;lt; X-Powered-By: PHP/8.0.10&lt;br&gt;&amp;lt; X-Robots-Tag: noindex&lt;br&gt;&amp;lt; Content-Length: 2&lt;br&gt;&amp;lt;&lt;br&gt;[]&lt;/pre&gt;&lt;h3&gt;Exception Handling&lt;/h3&gt;&lt;p&gt;Symfony kernel provides a event machoism to raise an Exception in Controller class and handle them in your custom EventListener or EventSubscriber .&lt;/p&gt;&lt;p&gt;For example, create a PostNotFoundException.&lt;/p&gt;&lt;pre&gt;class PostNotFoundException extends \RuntimeException&lt;br&gt;{&lt;/pre&gt;&lt;pre&gt;    public function __construct(Uuid $uuid)&lt;br&gt;    {&lt;br&gt;        parent::__construct(&amp;quot;Post #&amp;quot; . $uuid . &amp;quot; was not found&amp;quot;);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Create a EventListener to catch this exception, and handle the exception as expected.&lt;/p&gt;&lt;pre&gt;class ExceptionListener implements LoggerAwareInterface&lt;br&gt;{&lt;br&gt;    private LoggerInterface $logger;&lt;/pre&gt;&lt;pre&gt;    public function __construct()&lt;br&gt;    {&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public function onKernelException(ExceptionEvent $event)&lt;br&gt;    {&lt;br&gt;        // You get the exception object from the received event&lt;br&gt;        $exception = $event-&amp;gt;getThrowable();&lt;br&gt;        $data = [&amp;quot;error&amp;quot; =&amp;gt; $exception-&amp;gt;getMessage()];&lt;/pre&gt;&lt;pre&gt;        // Customize your response object to display the exception details&lt;br&gt;        $response = new JsonResponse($data);&lt;/pre&gt;&lt;pre&gt;        // HttpExceptionInterface is a special type of exception that&lt;br&gt;        // holds status code and header details&lt;/pre&gt;&lt;pre&gt;        if ($exception instanceof PostNotFoundException) {&lt;br&gt;            $response-&amp;gt;setStatusCode(Response::HTTP_NOT_FOUND);&lt;br&gt;        } else if ($exception instanceof HttpExceptionInterface) {&lt;br&gt;            $response-&amp;gt;setStatusCode($exception-&amp;gt;getStatusCode());&lt;br&gt;            $response-&amp;gt;headers-&amp;gt;replace($exception-&amp;gt;getHeaders());&lt;br&gt;        } else {&lt;br&gt;            $response-&amp;gt;setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR);&lt;br&gt;        }&lt;/pre&gt;&lt;pre&gt;        // sends the modified response object to the event&lt;br&gt;        $event-&amp;gt;setResponse($response);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public function setLogger(LoggerInterface $logger)&lt;br&gt;    {&lt;br&gt;        $this-&amp;gt;logger = $logger;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Register this ExceptionListener in &lt;em&gt;config/service.yml&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;App\EventListener\ExceptionListener:&lt;br&gt;    tags:&lt;br&gt;      - { name: kernel.event_listener, event: kernel.exception, priority: 50 }&lt;/pre&gt;&lt;p&gt;It indicates it binds event.exception event to ExceptionListener, and set priority to set the order at execution time.&lt;/p&gt;&lt;p&gt;Run the following command to show all registered EventListener/EventSubscribers on event &lt;em&gt;kernel.exception&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;php bin/console debug:event-subscriber kernel.exception&lt;/pre&gt;&lt;p&gt;Change the getById function to the following.&lt;/p&gt;&lt;pre&gt;#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]&lt;br&gt;function getById(Uuid $id): Response&lt;br&gt;{&lt;br&gt;    $data = $this-&amp;gt;posts-&amp;gt;findOneBy([&amp;quot;id&amp;quot; =&amp;gt; $id]);&lt;br&gt;    if ($data) {&lt;br&gt;   		return $this-&amp;gt;json($data);&lt;br&gt;    } else {&lt;br&gt;    	throw new PostNotFoundException($id);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Add a test to verify if the post is not found and get a 404 status code.&lt;/p&gt;&lt;pre&gt;public function testGetANoneExistingPost(): void&lt;br&gt;{&lt;br&gt;    $client = static::createClient();&lt;br&gt;    $id = Uuid::v4();&lt;br&gt;    $crawler = $client-&amp;gt;request(&amp;#39;GET&amp;#39;, &amp;#39;/posts/&amp;#39; . $id);&lt;/pre&gt;&lt;pre&gt;    //&lt;br&gt;    $response = $client-&amp;gt;getResponse();&lt;br&gt;    $this-&amp;gt;assertResponseStatusCodeSame(404);&lt;br&gt;    $data = $response-&amp;gt;getContent();&lt;br&gt;    $this-&amp;gt;assertStringContainsString(&amp;quot;Post #&amp;quot; . $id . &amp;quot; was not found&amp;quot;, $data);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Run the application again, and try to access a single Post through a none existing id.&lt;/p&gt;&lt;pre&gt;curl &lt;a href=&quot;http://localhost:8000/posts/1ec3e1e0-17b3-6ed2-a01c-edecc112b438&quot;&gt;http://localhost:8000/posts/1ec3e1e0-17b3-6ed2-a01c-edecc112b438&lt;/a&gt; -H &amp;quot;Accept: application/json&amp;quot; -v&lt;br&gt;&amp;gt; GET /posts/1ec3e1e0-17b3-6ed2-a01c-edecc112b438 HTTP/1.1&lt;br&gt;&amp;gt; Host: localhost:8000&lt;br&gt;&amp;gt; User-Agent: curl/7.55.1&lt;br&gt;&amp;gt; Accept: application/json&lt;br&gt;&amp;gt;&lt;br&gt;&amp;lt; HTTP/1.1 404 Not Found&lt;br&gt;&amp;lt; Cache-Control: no-cache, private&lt;br&gt;&amp;lt; Content-Type: application/json&lt;br&gt;&amp;lt; Date: Mon, 22 Nov 2021 03:57:51 GMT&lt;br&gt;&amp;lt; X-Powered-By: PHP/8.0.10&lt;br&gt;&amp;lt; X-Robots-Tag: noindex&lt;br&gt;&amp;lt; Content-Length: 69&lt;br&gt;&amp;lt;&lt;br&gt;{&amp;quot;error&amp;quot;:&amp;quot;Post #1ec3e1e0-17b3-6ed2-a01c-edecc112b438 was not found.&amp;quot;}&lt;/pre&gt;&lt;h4&gt;Get the &lt;a href=&quot;https://github.com/hantsy/symfony5-sample/tree/master/rest-sample&quot;&gt;complete source codes&lt;/a&gt; from my Github.&lt;/h4&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=35368a6246ad&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/building-restful-apis-with-symfony-5-and-php-8-35368a6246ad&quot;&gt;Building Restful APIs with Symfony 5 and PHP 8&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">Symfony is a full-featured modularized PHP framework that is used for building all kinds of applications, from traditional web applications to small Microservice components.Photo by te chan on UnsplashGet your feet wetInstall PHP 8 and PHP Composer tools.# choco php composerInstall [Symfony CLI](symfony check:requirements), check the system requirements.# symfony check:requirementsSymfony Requirements Checker~~~~~~~~~~~~~~~~~~~~~~~~~~~~&amp;gt; PHP is using the following php.ini file:C:\tools\php80\php.ini&amp;gt; Checking Symfony requirements:....................WWW......... [OK] Your system is ready to run Symfony projects Optional recommendations to improve your setup~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * intl extension should be available &amp;gt; Install and enable the intl extension (used for validators). * a PHP accelerator should be installed &amp;gt; Install and/or enable a PHP accelerator (highly recommended). * realpath_cache_size should be at least 5M in php.ini &amp;gt; Setting &amp;quot;realpath_cache_size&amp;quot; to e.g. &amp;quot;5242880&amp;quot; or &amp;quot;5M&amp;quot; in &amp;gt; php.ini* may improve performance on Windows significantly in some &amp;gt; cases.Note The command console can use a different php.ini file~~~~ than the one used by your web server. Please check that both the console and the web server are using the same PHP version and configuration.According to the recommendations info, adjust your PHP configuration in the php.ini. And we will use Postgres as database in the sample application, make sure pdo_pgsql and pgsql modules are enabled.Finally, you can confirm the enabled modules by the following command.# php -mCreate a new Symfony project.# symfony new rest-sample// a classic website application# symfony new web-sample --fullBy default, it will create a simple Symfony skeleton project only with core kernel configuration, which is good to start a lightweight Restful API application.Alternatively, you can create it using Composer.# composer create-project symfony/skeleton rest-sample//start a classic website application# composer create-project symfony/website-skeleton web-sampleEnter the generated project root folder, start the application.# symfony server:start [WARNING] run &amp;quot;symfony.exe server:ca:install&amp;quot; first if you want to run the web server with TLS support, or use &amp;quot;--no- tls&amp;quot; to avoid this warning Tailing PHP-CGI log file (C:\Users\hantsy\.symfony\log\499d60b14521d4842ba7ebfce0861130efe66158\79ca75f9e90b4126a5955a33ea6a41ec5e854698.log)Tailing Web Server log file (C:\Users\hantsy\.symfony\log\499d60b14521d4842ba7ebfce0861130efe66158.log) [OK] Web server listening The Web server is using PHP CGI 8.0.10 http://127.0.0.1:8000 [Web Server ] Oct 4 13:33:01 |DEBUG | PHP Reloading PHP versions[Web Server ] Oct 4 13:33:01 |DEBUG | PHP Using PHP version 8.0.10 (from default version in $PATH)[Web Server ] Oct 4 13:33:01 |INFO | PHP listening path=&amp;quot;C:\\tools\\php80\\php-cgi.exe&amp;quot; php=&amp;quot;8.0.10&amp;quot; port=61738Hello , SymfonyCreate a simple class to a resource entity in the HTTP response.class Post{ private ?string $id = null; private string $title; private string $content; //getters and setters.}And use a factory to create a new Post instance.class PostFactory{ public static function create(string $title, string $content): Post { $post = new Post(); $post-&amp;gt;setTitle($title); $post-&amp;gt;setContent($content); return $post; }}Let’s create a simple Controller class.To use the newest PHP 8 attributes to configure the routing rules, apply the following changes in the project configurations.Open config/packages/doctrine.yaml, remove doctrine/orm/mapping/App/type or change its value to attributeOpen composer.json, change PHP version to &amp;gt;=8.0.0.To render the response body into a JSON string, use a JsonReponse to wrap the response.#[Route(path: &amp;quot;/posts&amp;quot;, name: &amp;quot;posts_&amp;quot;)]class PostController{ #[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] function all(): Response { $post1 = PostFactory::create(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;); $post1-&amp;gt;setId(&amp;quot;1&amp;quot;); $post2 = PostFactory::create(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;); $post2-&amp;gt;setId(&amp;quot;2&amp;quot;); $data = [$post1-&amp;gt;asArray(), $post2-&amp;gt;asArray()]; return new JsonResponse($data, 200, [&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;]); //return $this-&amp;gt;json($data, 200, [&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;]); }}The first parameter of JsonReponse accepts an array as data, so add a function in the Post class to archive this purpose.class Post{ //... public function asArray(): array { return [ &amp;#39;id&amp;#39; =&amp;gt; $this-&amp;gt;id, &amp;#39;title&amp;#39; =&amp;gt; $this-&amp;gt;title, &amp;#39;content&amp;#39; =&amp;gt; $this-&amp;gt;content ]; }}Run the application, use curl to test the /posts endpoint.# curl http://localhost:8000/postsSymfony provides a simple AbstractController which includes several functions to simplfy the response and adopt the container and dependency injection management.In the above controller, extends from AbstractController, simply call $this-&amp;gt;json to render the response in JSON format, no need to transform the data to an array before rendering response.class PostController extends AbstractController{ function all(): Response { //... return $this-&amp;gt;json($data, 200, [&amp;quot;Content-Type&amp;quot; =&amp;gt; &amp;quot;application/json&amp;quot;]); }}Connecting to DatabaseDoctrine is a popular ORM framework , it is highly inspired by the existing Java ORM tooling, such as JPA spec and Hibernate framework. There are two core components in Doctrine, doctrine/dbal and doctrine/orm, the former is a low level APIs for database operations, if you know Java development, consider it as the Jdbc layer. The later is the advanced ORM framework, the public APIs are similar to JPA/Hibernate.Install Doctrine into the project.# composer require symfony/orm-pack# composer require --dev symfony/maker-bundleThe pack is a virtual Symfony package, it will install a series of packages and basic configurations.Open the .env file in the project root folder, edit the DATABASE_URL value, setup the database name, username, password to connect.DATABASE_URL=&amp;quot;postgresql://user:password@127.0.0.1:5432/blogdb?serverVersion=13&amp;amp;charset=utf8&amp;quot;Use the following command to generate a docker compose file template.# php bin/console make:docker:databaseWe change it to the following to start up a Postgres database in development.version: &amp;quot;3.5&amp;quot; # specify docker-compose version, v3.5 is compatible with docker 17.12.0+# Define the services/containers to be runservices: postgres: image: postgres:${POSTGRES_VERSION:-13}-alpine ports: - &amp;quot;5432:5432&amp;quot; environment: POSTGRES_DB: ${POSTGRES_DB:-blogdb} # You should definitely change the password in production POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} POSTGRES_USER: ${POSTGRES_USER:-user} volumes: - ./data/blogdb:/var/lib/postgresql/data:rw - ./pg-initdb.d:/docker-entrypoint-initdb.dWe will use UUID as data type of the primary key, add a script to enable uuid-ossp extension in Postgres when it is starting up.-- file: pg-initdb.d/ini.sqlSET search_path TO public;DROP EXTENSION IF EXISTS &amp;quot;uuid-ossp&amp;quot;;CREATE EXTENSION &amp;quot;uuid-ossp&amp;quot; SCHEMA public;Open config/packages/test/doctrine.yaml, comment out dbname_suffix line. We use Docker container to bootstrap a database to ensure the application behaviors are same between the development and production.Now startup the application and make sure there is no exception in the console, that means the database connection is successful.symfony server:startBefore starting the application, make sure the database is running. Run the following command to start up the Postgres in Docker.# docker compose up postgres# docker ps -a # to list all containers and make the postgres is runningBuilding Data ModelsNow we will build the Entities that will be used in the next sections. We are modeling a simple blog system, it includes the following concepts.A Post presents an article post in the blog system.A Comment presents the comments under a specific post.The common Tag can be applied on different posts, which categorizes posts by topic, categories , etc.You can draft your model relations in mind or through some graphic data modeling tools.Post and comments is a one-to-many relationPost and tag is a many-to-many relationIt is easy to convert the idea to real codes via Doctrine Entity. Run the following command to create Post, Comment and Tag entities.In the Doctrine ORM 2.10.x and Dbal 3.x, the UUID type ID generator is deprecated. We will switch to the Uuid form symfony\uid.Install symfony\uid firstly.# composer require symfony/uidSimply, you can use the following command to create entities quickly.# php bin/console make:entity # following the interactive steps to create them one by one.Finally we got three entities in the src/Entity folder. Modify them as you expected.// src/Entity/Post.php#[Entity(repositoryClass: PostRepository::class)]class Post{ #[Id] //#[GeneratedValue(strategy: &amp;quot;UUID&amp;quot;) //#[Column(type: &amp;quot;string&amp;quot;, unique: true)] #[Column(type: &amp;quot;uuid&amp;quot;, unique: true)] #[GeneratedValue(strategy: &amp;quot;CUSTOM&amp;quot;)] #[CustomIdGenerator(class: UuidGenerator::class)] private ?Uuid $id = null; #[Column(type: &amp;quot;string&amp;quot;, length: 255)] private string $title; #[Column(type: &amp;quot;string&amp;quot;, length: 255)] private string $content; #[Column(name: &amp;quot;created_at&amp;quot;, type: &amp;quot;datetime&amp;quot;, nullable: true)] private DateTime|null $createdAt = null; #[Column(name: &amp;quot;published_at&amp;quot;, type: &amp;quot;datetime&amp;quot;, nullable: true)] private DateTime|null $publishedAt = null; #[OneToMany(mappedBy: &amp;quot;post&amp;quot;, targetEntity: Comment::class, cascade: [&amp;#39;persist&amp;#39;, &amp;#39;merge&amp;#39;, &amp;quot;remove&amp;quot;], fetch: &amp;#39;LAZY&amp;#39;, orphanRemoval: true)] private Collection $comments; #[ManyToMany(targetEntity: Tag::class, mappedBy: &amp;quot;posts&amp;quot;, cascade: [&amp;#39;persist&amp;#39;, &amp;#39;merge&amp;#39;], fetch: &amp;#39;EAGER&amp;#39;)] private Collection $tags; public function __construct() { $this-&amp;gt;createdAt = new DateTime(); $this-&amp;gt;comments = new ArrayCollection(); $this-&amp;gt;tags = new ArrayCollection(); } //other getters and setters}// src/Entity/Comment.php#[Entity(repositoryClass: CommentRepository::class)]class Comment{ #[Id] //#[GeneratedValue(strategy: &amp;quot;UUID&amp;quot;)] #[Column(type: &amp;quot;uuid&amp;quot;, unique: true)] #[GeneratedValue(strategy: &amp;quot;CUSTOM&amp;quot;)] #[CustomIdGenerator(class: UuidGenerator::class)] private ?Uuid $id = null; #[Column(type: &amp;quot;string&amp;quot;, length: 255)] private string $content; #[Column(name: &amp;quot;created_at&amp;quot;, type: &amp;quot;datetime&amp;quot;, nullable: true)] private DateTime|null $createdAt = null; #[ManyToOne(targetEntity: &amp;quot;Post&amp;quot;, inversedBy: &amp;quot;comments&amp;quot;)] #[JoinColumn(name: &amp;quot;post_id&amp;quot;, referencedColumnName: &amp;quot;id&amp;quot;)] private Post $post; public function __construct() { $this-&amp;gt;createdAt = new DateTime(); } //other getters and setters}//src/Entity/Tag.php#[Entity(repositoryClass: TagRepository::class)]class Tag{ #[Id] //#[GeneratedValue(strategy: &amp;quot;UUID&amp;quot;) //#[Column(type: &amp;quot;string&amp;quot;, unique: true)] #[Column(type: &amp;quot;uuid&amp;quot;, unique: true)] #[GeneratedValue(strategy: &amp;quot;CUSTOM&amp;quot;)] #[CustomIdGenerator(class: UuidGenerator::class)] private ?Uuid $id = null; #[Column(type: &amp;quot;string&amp;quot;, length: 255)] private ?string $name; #[ManyToMany(targetEntity: Post::class, inversedBy: &amp;quot;tags&amp;quot;)] private Collection $posts; public function __construct() { $this-&amp;gt;posts = new ArrayCollection(); }}At the same time, it generated three Repository classes for these entities.// src/Repository/PostRepsoitory.phpclass PostRepository extends ServiceEntityRepository{ public function __construct(ManagerRegistry $registry) { parent::__construct($registry, Post::class); }}// src/Repository/CommentRepsoitory.phpclass CommentRepository extends ServiceEntityRepository{ public function __construct(ManagerRegistry $registry) { parent::__construct($registry, Comment::class); }}//src/Repository/TagRepository.phpclass TagRepository extends ServiceEntityRepository{ public function __construct(ManagerRegistry $registry) { parent::__construct($registry, Tag::class); }}You can use Doctrine migration to generate a Migration file to maintain database schema in a production environment.Run the following command to generate a Migration file.# php bin/console make:migrationAfter it is executed, a Migration file is generated in the migrations folder, its naming is like Version20211104031420. It is a simple class extended AbstractMigration, the up function is use for upgrade to this version and down function is use for downgrade to the previous version.To apply Migrations on database automaticially.# php bin/console doctrine:migrations:migrate# return to prev version# php bin/console doctrine:migrations:migrate prev# migrate to next# php bin/console doctrine:migrations:migrate next# These alias are defined : first, latest, prev, current and next# certain version fully qualified class name# php bin/console doctrine:migrations:migrate FQCNDoctrine bundle also includes some command to maintain database and schema. eg.# php bin/console doctrine:database:create# php bin/console doctrine:database:drop// schema create, drop, update and validate# php bin/console doctrine:schema:create# php bin/console doctrine:schema:drop# php bin/console doctrine:schema:update# php bin/console doctrine:schema:validateAdding Sample DataCreate a custom command to load some sample data.# php bin/console make:command add-postIt will generate a AddPostCommand under src/Command folder.#[AsCommand( name: &amp;#39;app:add-post&amp;#39;, description: &amp;#39;Add a short description for your command&amp;#39;,)]class AddPostCommand extends Command{ public function __construct(private EntityManagerInterface $manager) { parent::__construct(); } protected function configure(): void { $this -&amp;gt;addArgument(&amp;#39;title&amp;#39;, InputArgument::REQUIRED, &amp;#39;Title of a post&amp;#39;) -&amp;gt;addArgument(&amp;#39;content&amp;#39;, InputArgument::REQUIRED, &amp;#39;Content of a post&amp;#39;) //-&amp;gt;addOption(&amp;#39;option1&amp;#39;, null, InputOption::VALUE_NONE, &amp;#39;Option description&amp;#39;) ; } protected function execute(InputInterface $input, OutputInterface $output): int { $io = new SymfonyStyle($input, $output); $title = $input-&amp;gt;getArgument(&amp;#39;title&amp;#39;); if ($title) { $io-&amp;gt;note(sprintf(&amp;#39;Title: %s&amp;#39;, $title)); } $content = $input-&amp;gt;getArgument(&amp;#39;content&amp;#39;); if ($content) { $io-&amp;gt;note(sprintf(&amp;#39;Content: %s&amp;#39;, $content)); } $entity = PostFactory::create($title, $content); $this -&amp;gt;manager-&amp;gt;persist($entity); $this -&amp;gt;manager-&amp;gt;flush();// if ($input-&amp;gt;getOption(&amp;#39;option1&amp;#39;)) {// // ...// } $io-&amp;gt;success(&amp;#39;Post is saved: &amp;#39;.$entity); return Command::SUCCESS; }}The Doctrine EntityManagerInterface is managed by Symfony Service Container, and use for data persistence operations.Run the following command to add a post into the database.# php bin/console app:add-post &amp;quot;test title&amp;quot; &amp;quot;test content&amp;quot; ! [NOTE] Title: test title ! [NOTE] Content: test content [OK] Post is saved: Post: [ id =1ec3d3ec-895d-685a-b712-955865f6c134, title=test title, content=test content, createdAt=1636010040, blishedAt=]Testing RepositoryPHPUnit is the most popular testing framework in PHP world, Symfony integrates PHPUnit tightly.Run the following command to install PHPUnit and Symfony test-pack. The test-pack will install all essential packages for testing Symfony components and add PHPUnit configuration, such as phpunit.xml.dist.# composer require --dev phpunit/phpunit symfony/test-packAn simple test example written in pure PHPUnit.class PostTest extends TestCase{ public function testPost() { $p = PostFactory::create(&amp;quot;tests title&amp;quot;, &amp;quot;tests content&amp;quot;); $this-&amp;gt;assertEquals(&amp;quot;tests title&amp;quot;, $p-&amp;gt;getTitle()); $this-&amp;gt;assertEquals(&amp;quot;tests content&amp;quot;, $p-&amp;gt;getContent()); $this-&amp;gt;assertNotNull( $p-&amp;gt;getCreatedAt()); }}Symfony provides some specific base classes(KernelTestCase, WebTestCase, etc.) to simplfy the testing work in a Symfony project.The following is an example of testing a Repository - PostRepository. The KernelTestCase contains facilities to bootstrap application kernel and provides service container.class PostRepositoryTest extends KernelTestCase{ private EntityManagerInterface $entityManager; private PostRepository $postRepository; protected function setUp(): void { //(1) boot the Symfony kernel $kernel = self::bootKernel(); $this-&amp;gt;assertSame(&amp;#39;test&amp;#39;, $kernel-&amp;gt;getEnvironment()); $this-&amp;gt;entityManager = $kernel-&amp;gt;getContainer() -&amp;gt;get(&amp;#39;doctrine&amp;#39;) -&amp;gt;getManager(); //(2) use static::getContainer() to access the service container $container = static::getContainer(); //(3) get PostRepository from container. $this-&amp;gt;postRepository = $container-&amp;gt;get(PostRepository::class); } protected function tearDown(): void { parent::tearDown(); $this-&amp;gt;entityManager-&amp;gt;close(); } public function testCreatePost(): void { $entity = PostFactory::create(&amp;quot;test post&amp;quot;, &amp;quot;test content&amp;quot;); $this-&amp;gt;entityManager-&amp;gt;persist($entity); $this-&amp;gt;entityManager-&amp;gt;flush(); $this-&amp;gt;assertNotNull($entity-&amp;gt;getId()); $byId = $this-&amp;gt;postRepository-&amp;gt;findOneBy([&amp;quot;id&amp;quot; =&amp;gt; $entity-&amp;gt;getId()]); $this-&amp;gt;assertEquals(&amp;quot;test post&amp;quot;, $byId-&amp;gt;getTitle()); $this-&amp;gt;assertEquals(&amp;quot;test content&amp;quot;, $byId-&amp;gt;getContent()); }}In the above codes, in the setUp function, boot up the application kernel, after it is booted, a test scoped Service Container is available. Then get EntityManagerInterface and PostRepository from service container.In the testCreatePost function, persists a Post entity, and find this post by id and verify the title and content fields.Currently, PHPUnit does not include PHP 8 Attribute support, the testing codes are similar to the legacy JUnit 4 code style.Creating PostController: Exposing your first Rest APISimilar to other MVC framework, we can expose RESTful APIs via Symfony Controller component. Follow the REST convention, we are planning to create the following APIs to a blog system.GET /posts Get all posts.GET /posts/{id} Get a single post by ID, if not found, return status 404POST /posts Create a new post from request body, add the new post URI to response header Location, and return status 201DELETE /posts/{id} Delete a single post by ID, return status 204. If the post was not found, return status 404 instead.…Run the following command to create a Controller skeleton. Follow the interactive guide to create a controller named PostController.# php bin/console make:constrollerOpen src/Controller/PostController.php in IDE.Add Route attribute on class level and two functions: one for fetching all posts and another for getting single post by ID.#[Route(path: &amp;quot;/posts&amp;quot;, name: &amp;quot;posts_&amp;quot;)]class PostController extends AbstractController{ public function __construct(private PostRepository $posts) { } #[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] function all(): Response { $data = $this-&amp;gt;posts-&amp;gt;findAll(); return $this-&amp;gt;json($data); } }Start up the application, and try to access the http://localhost:8000/posts, it will throw a circular dependencies exception when rendering the models in JSON view directly. There are some solutions to avoid this, the simplest is break the bi-direction relations before rendering the JSON view. Add a Ignore attribute on Comment.post and Tag.posts.//src/Entity/Comment.phpclass Comment{ #[Ignore] private Post $post;}//src/Entity/Tag.phpclass Tag{ #[Ignore] private Collection $posts;}Testing ControllerAs described in the previous sections, to test Controller/API, create a test class to extend WebTestCase, which provides a plenty of facilities to handle request and assert response.Run the following command to create a test skeleton.# php bin/console make:testFollow the interactive steps to create a test base on WebTestCase.class PostControllerTest extends WebTestCase{ public function testGetAllPosts(): void { $client = static::createClient(); $crawler = $client-&amp;gt;request(&amp;#39;GET&amp;#39;, &amp;#39;/posts&amp;#39;); $this-&amp;gt;assertResponseIsSuccessful(); // $response = $client-&amp;gt;getResponse(); $data = $response-&amp;gt;getContent(); //dump($data); $this-&amp;gt;assertStringContainsString(&amp;quot;Symfony and PHP&amp;quot;, $data); }}If you try to run the test, it will fail. At the moment, there is no any data for testing.Preparing Data for Testing PurposeThe doctrine/doctrine-fixtures-bundle is use for populate sample data for testing purpose, and dama/doctrine-test-bundle ensures the data is restored before evey test is running.Install doctrine/doctrine-fixtures-bundle and dama/doctrine-test-bundle.composer require --dev doctrine/doctrine-fixtures-bundle dama/doctrine-test-bundleCreate a new Fixture.# php bin/console make:fixturesIn the load fucntion, persist some data for tests.class AppFixtures extends Fixture{ public function load(ObjectManager $manager): void { $data = PostFactory::create(&amp;quot;Building Restful APIs with Symfony and PHP 8&amp;quot;, &amp;quot;test content&amp;quot;); $data-&amp;gt;addTag(Tag::of( &amp;quot;Symfony&amp;quot;)) -&amp;gt;addTag( Tag::of(&amp;quot;PHP 8&amp;quot;)) -&amp;gt;addComment(Comment::of(&amp;quot;test comment 1&amp;quot;)) -&amp;gt;addComment(Comment::of(&amp;quot;test comment 2&amp;quot;)); $manager-&amp;gt;persist($data); $manager-&amp;gt;flush(); }}Run the command to load the sample data into database manually.# php bin/console doctrine:fixtures:loadAdd the following extension configuration into the phpunit.xml.dist, thus the data will be purged and recreated for every test running.&amp;lt;extensions&amp;gt; &amp;lt;extension class=&amp;quot;DAMA\DoctrineTestBundle\PHPUnit\PHPUnitExtension&amp;quot;/&amp;gt;&amp;lt;/extensions&amp;gt;Run the following command to execute PostControllerTest.php .# php .\vendor\bin\phpunit .\tests\Controller\PostControllerTest.phpPaginating ResultThere are a lot of web applications which provide a input field for typing keyword and paginating the search results. Assume there is a keyword provided by request to match Post title or content fields, a offset to set the offset position of the pagination, and a limit to set the limited size of the elements per page. Create a function in the PostRepository, accepts a keyword, offset and limit as arguments.public function findByKeyword(string $q, int $offset = 0, int $limit = 20): Page{ $query = $this-&amp;gt;createQueryBuilder(&amp;quot;p&amp;quot;) -&amp;gt;andWhere(&amp;quot;p.title like :q or p.content like :q&amp;quot;) -&amp;gt;setParameter(&amp;#39;q&amp;#39;, &amp;quot;%&amp;quot; . $q . &amp;quot;%&amp;quot;) -&amp;gt;orderBy(&amp;#39;p.createdAt&amp;#39;, &amp;#39;DESC&amp;#39;) -&amp;gt;setMaxResults($limit) -&amp;gt;setFirstResult($offset) -&amp;gt;getQuery(); $paginator = new Paginator($query, $fetchJoinCollection = false); $c = count($paginator); $content = new ArrayCollection(); foreach ($paginator as $post) { $content-&amp;gt;add(PostSummaryDto::of($post-&amp;gt;getId(), $post-&amp;gt;getTitle())); } return Page::of ($content, $c, $offset, $limit);}Firstly, create a dynamic query using createQueryBuilder , then create a Doctrine Paginator instance to execute the query. The Paginator implements Countable interface, use count to get the count of total elements. Finally, we use a custom Page object to wrap the result.class Page{ private Collection $content; private int $totalElements; private int $offset; private int $limit; #[Pure] public function __construct() { $this-&amp;gt;content = new ArrayCollection(); } public static function of(Collection $content, int $totalElements, int $offset = 0, int $limit = 20): Page { $page = new Page(); $page-&amp;gt;setContent($content) -&amp;gt;setTotalElements($totalElements) -&amp;gt;setOffset($offset) -&amp;gt;setLimit($limit); return $page; } // //getters}Customzing ArgumentResolverIn the PostController , let&amp;#39;s improve the the function which serves the route /posts, make it accept query parameters like /posts?q=Symfony&amp;amp;offset=0&amp;amp;limit=10, and ensure the parameters are optional.#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] function all(Request $req): Response { $keyword = $req-&amp;gt;query-&amp;gt;get(&amp;#39;q&amp;#39;)??&amp;#39;&amp;#39;; $offset = $req-&amp;gt;query-&amp;gt;get(&amp;#39;offset&amp;#39;)??0; $limit = $req-&amp;gt;query-&amp;gt;get(&amp;#39;limit&amp;#39;)??10; $data = $this-&amp;gt;posts-&amp;gt;findByKeyword($keyword, $offset, $limit); return $this-&amp;gt;json($data); }It works but the query parameters handling looks a little ugly. It is great if they can be handled as the route path parameters.We can create a custom ArgumentResolver to resolve the bound query arguments.Firstly create an Annotation/Attribute class to identify a query parameter that need to be resolved by this ArgumentResolver.#[Attribute(Attribute::TARGET_PARAMETER)]final class QueryParam{ private null|string $name; private bool $required; /** * @param string|null $name * @param bool $required */ public function __construct(?string $name = null, bool $required = false) { $this-&amp;gt;name = $name; $this-&amp;gt;required = $required; } //getters and setters }Create a custom ArgumentResolver implements the built-in ArgugmentResolverInterface.class QueryParamValueResolver implements ArgumentValueResolverInterface, LoggerAwareInterface{ public function __construct() { } private LoggerInterface $logger; /** * @inheritDoc */ public function resolve(Request $request, ArgumentMetadata $argument) { $argumentName = $argument-&amp;gt;getName(); $this-&amp;gt;logger-&amp;gt;info(&amp;quot;Found [QueryParam] annotation/attribute on argument &amp;#39;&amp;quot; . $argumentName . &amp;quot;&amp;#39;, applying [QueryParamValueResolver]&amp;quot;); $type = $argument-&amp;gt;getType(); $nullable = $argument-&amp;gt;isNullable(); $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The method argument type: &amp;#39;&amp;quot; . $type . &amp;quot;&amp;#39; and nullable: &amp;#39;&amp;quot; . $nullable . &amp;quot;&amp;#39;&amp;quot;); //read name property from QueryParam $attr = $argument-&amp;gt;getAttributes(QueryParam::class)[0];// `QueryParam` is not repeatable $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;QueryParam:&amp;quot; . $attr); //if name property is not set in `QueryParam`, use the argument name instead. $name = $attr-&amp;gt;getName() ?? $argumentName; $required = $attr-&amp;gt;isRequired() ?? false; $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;Polished QueryParam values: name=&amp;#39;&amp;quot; . $name . &amp;quot;&amp;#39;, required=&amp;#39;&amp;quot; . $required . &amp;quot;&amp;#39;&amp;quot;); //fetch query name from request $value = $request-&amp;gt;query-&amp;gt;get($name); $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The request query parameter value: &amp;#39;&amp;quot; . $value . &amp;quot;&amp;#39;&amp;quot;); //if default value is set and query param value is not set, use default value instead. if (!$value &amp;amp;&amp;amp; $argument-&amp;gt;hasDefaultValue()) { $value = $argument-&amp;gt;getDefaultValue(); $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;After set default value: &amp;#39;&amp;quot; . $value . &amp;quot;&amp;#39;&amp;quot;); } if ($required &amp;amp;&amp;amp; !$value) { throw new \InvalidArgumentException(&amp;quot;Request query parameter &amp;#39;&amp;quot; . $name . &amp;quot;&amp;#39; is required, but not set.&amp;quot;); } $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;final resolved value: &amp;#39;&amp;quot; . $value . &amp;quot;&amp;#39;&amp;quot;); //must return a `yield` clause yield match ($type) { &amp;#39;int&amp;#39; =&amp;gt; $value ? (int)$value : 0, &amp;#39;float&amp;#39; =&amp;gt; $value ? (float)$value : .0, &amp;#39;bool&amp;#39; =&amp;gt; (bool)$value, &amp;#39;string&amp;#39; =&amp;gt; $value ? (string)$value : ($nullable ? null : &amp;#39;&amp;#39;), null =&amp;gt; null }; } public function supports(Request $request, ArgumentMetadata $argument): bool { $attrs = $argument-&amp;gt;getAttributes(QueryParam::class); return count($attrs) &amp;gt; 0; } public function setLogger(LoggerInterface $logger) { $this-&amp;gt;logger = $logger; }}At runtime, it calls the supports function to check it the current request satisfy the requirement, if it is ok, then invoke the resovle funtion.In the supports function, we check if the argument is annotated with a QueryParam, if it is existed, then resolved the argument from request query string.Now change the function that serves /posts endpoint to the following.#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;all&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]function all(#[QueryParam] $keyword, #[QueryParam] int $offset = 0, #[QueryParam] int $limit = 20): Response { $data = $this-&amp;gt;posts-&amp;gt;findByKeyword($keyword || &amp;#39;&amp;#39;, $offset, $limit); return $this-&amp;gt;json($data); }Run the application and test the /posts using curl.# curl http://localhost:8000/posts{ &amp;quot;content&amp;quot;:[ { &amp;quot;id&amp;quot;:&amp;quot;1ec3e1e0-17b3-6ed2-a01c-edecc112b436&amp;quot;, &amp;quot;title&amp;quot;:&amp;quot;Building Restful APIs with Symfony and PHP 8&amp;quot; } ], &amp;quot;totalElements&amp;quot;:1, &amp;quot;offset&amp;quot;:0, &amp;quot;limit&amp;quot;:20}Get Post by IDFollow the design in the previous section, add another function to PostController to map route /posts/{id} .class PostController extends AbstractController{ //other functions... #[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])] function getById(Uuid $id): Response { $data = $this-&amp;gt;posts-&amp;gt;findOneBy([&amp;quot;id&amp;quot; =&amp;gt; $id]); if ($data) { return $this-&amp;gt;json($data); } else { return $this-&amp;gt;json([&amp;quot;error&amp;quot; =&amp;gt; &amp;quot;Post was not found by id:&amp;quot; . $id], 404); } }}Run the application, and try to access http://localhost:8000/posts/{id}, it will throw an exception like this.App\Controller\PostController::getById(): Argument #1 ($id) must be of type Symfony\Component\Uid\Uuid, string given, called in D:\hantsylabs\symfony5-sample\rest-sample\vendor\symfony\http-kernel\HttpKernel.php on line 156The id in the URI is a string, can not be used as Uuid directly.Symfony provides ParamConverter to convert the request attributes to the target type. We can create a custom ParamConverter to archive the purpose.Customizing ParamConverterCreate a new class UuidParamCovnerter under src/Request/ folder.class UuidParamConverter implements ParamConverterInterface{ public function __construct(private LoggerInterface $logger) { } /** * @inheritDoc */ public function apply(Request $request, ParamConverter $configuration): bool { $param = $configuration-&amp;gt;getName(); if (!$request-&amp;gt;attributes-&amp;gt;has($param)) { return false; } $value = $request-&amp;gt;attributes-&amp;gt;get($param); $this-&amp;gt;logger-&amp;gt;info(&amp;quot;parameter value:&amp;quot; . $value); if (!$value &amp;amp;&amp;amp; $configuration-&amp;gt;isOptional()) { $request-&amp;gt;attributes-&amp;gt;set($param, null); return true; } $data = Uuid::fromString($value); $request-&amp;gt;attributes-&amp;gt;set($param, $data); return true; } /** * @inheritDoc */ public function supports(ParamConverter $configuration): bool { $className = $configuration-&amp;gt;getClass(); $this-&amp;gt;logger-&amp;gt;info(&amp;quot;converting to UUID :{c}&amp;quot;, [&amp;quot;c&amp;quot; =&amp;gt; $className]); return $className &amp;amp;&amp;amp; $className == Uuid::class; }}In the above codes,The supports function to check the execution environment if matching the requirementsThe apply function to perform the conversion. if supports returns false, this conversion step will be skipped.Creating a PostFollow the REST convention, define the following rule to serve an endpoint to handle the request.Request matches Http verbs/HTTP Method: POSTRequest matches route endpoint: /postsSet request header Content-Type value to application/json, and use request body to hold request data as JSON formatIf successful, return a CREATED(201) Http Status code, and set the response header Location value to the URI of the new created post.#[Route(path: &amp;quot;&amp;quot;, name: &amp;quot;create&amp;quot;, methods: [&amp;quot;POST&amp;quot;])]public function create(Request $request): Response{ $data = $this-&amp;gt;serializer-&amp;gt;deserialize($request-&amp;gt;getContent(), CreatePostDto::class, &amp;#39;json&amp;#39;); $entity = PostFactory::create($data-&amp;gt;getTitle(), $data-&amp;gt;getContent()); $this-&amp;gt;posts-&amp;gt;getEntityManager()-&amp;gt;persist($entity); return $this-&amp;gt;json([], 201, [&amp;quot;Location&amp;quot; =&amp;gt; &amp;quot;/posts/&amp;quot; . $entity-&amp;gt;getId()]);}The posts-&amp;gt;getEntityManager() overrides parent methods to get a EntityManager from parent class, you can also inject ObjectManager or EntityManagerInterface in the PostController directly to do the persistence work. The Doctrine Repository is mainly designated to build query criteria and execute custom queries.Create a test function to verify in the PostControllerTest file.public function testCreatePost(): void{ $client = static::createClient(); $data = CreatePostDto::of(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;); $crawler = $client-&amp;gt;request( &amp;#39;POST&amp;#39;, &amp;#39;/posts&amp;#39;, [], [], [], $this-&amp;gt;getContainer()-&amp;gt;get(&amp;#39;serializer&amp;#39;)-&amp;gt;serialize($data, &amp;#39;json&amp;#39;) ); $this-&amp;gt;assertResponseIsSuccessful(); $response = $client-&amp;gt;getResponse(); $url = $response-&amp;gt;headers-&amp;gt;get(&amp;#39;Location&amp;#39;); //dump($data); $this-&amp;gt;assertNotNull($url); $this-&amp;gt;assertStringStartsWith(&amp;quot;/posts/&amp;quot;, $url);}Converting Request BodyWe can also use an Annotation/Attribute to erase the raw codes of handling Request object through introducing a custom ArgumentResolver.Create a Body Attribute.#[Attribute(Attribute::TARGET_PARAMETER)]final class Body{}Then create a BodyValueResolver.class BodyValueResolver implements ArgumentValueResolverInterface, LoggerAwareInterface{ public function __construct(private SerializerInterface $serializer) { } private LoggerInterface $logger; /** * @inheritDoc */ public function resolve(Request $request, ArgumentMetadata $argument) { $type = $argument-&amp;gt;getType(); $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The argument type:&amp;#39;&amp;quot; . $type . &amp;quot;&amp;#39;&amp;quot;); $format = $request-&amp;gt;getContentType() ?? &amp;#39;json&amp;#39;; $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;The request format:&amp;#39;&amp;quot; . $format . &amp;quot;&amp;#39;&amp;quot;); //read request body $content = $request-&amp;gt;getContent(); $data = $this-&amp;gt;serializer-&amp;gt;deserialize($content, $type, $format); // $this-&amp;gt;logger-&amp;gt;debug(&amp;quot;deserialized data:{0}&amp;quot;, [$data]); yield $data; } /** * @inheritDoc */ public function supports(Request $request, ArgumentMetadata $argument): bool { $attrs = $argument-&amp;gt;getAttributes(Body::class); return count($attrs) &amp;gt; 0; } public function setLogger(LoggerInterface $logger) { $this-&amp;gt;logger = $logger; }In the supports method, it simply detects if the method argument annotated with a Body attribute, then apply resolve method to deserialize the request body content to a typed object.Run the application and test the endpoint through /posts.curl -v http://localhost:8000/posts -H &amp;quot;Content-Type:application/json&amp;quot; -d &amp;quot;{\&amp;quot;title\&amp;quot;:\&amp;quot;test title\&amp;quot;,\&amp;quot;content\&amp;quot;:\&amp;quot;test content\&amp;quot;}&amp;quot;&amp;gt; POST /posts HTTP/1.1&amp;gt; Host: localhost:8000&amp;gt; User-Agent: curl/7.55.1&amp;gt; Accept: */*&amp;gt; Content-Type:application/json&amp;gt; Content-Length: 47&amp;gt;&amp;lt; HTTP/1.1 201 Created&amp;lt; Cache-Control: no-cache, private&amp;lt; Content-Type: application/json&amp;lt; Date: Sun, 21 Nov 2021 08:42:49 GMT&amp;lt; Location: /posts/1ec4aa70-1b21-6bce-93f8-b39330fe328e&amp;lt; X-Powered-By: PHP/8.0.10&amp;lt; X-Robots-Tag: noindex&amp;lt; Content-Length: 2&amp;lt;[]Exception HandlingSymfony kernel provides a event machoism to raise an Exception in Controller class and handle them in your custom EventListener or EventSubscriber .For example, create a PostNotFoundException.class PostNotFoundException extends \RuntimeException{ public function __construct(Uuid $uuid) { parent::__construct(&amp;quot;Post #&amp;quot; . $uuid . &amp;quot; was not found&amp;quot;); }}Create a EventListener to catch this exception, and handle the exception as expected.class ExceptionListener implements LoggerAwareInterface{ private LoggerInterface $logger; public function __construct() { } public function onKernelException(ExceptionEvent $event) { // You get the exception object from the received event $exception = $event-&amp;gt;getThrowable(); $data = [&amp;quot;error&amp;quot; =&amp;gt; $exception-&amp;gt;getMessage()]; // Customize your response object to display the exception details $response = new JsonResponse($data); // HttpExceptionInterface is a special type of exception that // holds status code and header details if ($exception instanceof PostNotFoundException) { $response-&amp;gt;setStatusCode(Response::HTTP_NOT_FOUND); } else if ($exception instanceof HttpExceptionInterface) { $response-&amp;gt;setStatusCode($exception-&amp;gt;getStatusCode()); $response-&amp;gt;headers-&amp;gt;replace($exception-&amp;gt;getHeaders()); } else { $response-&amp;gt;setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR); } // sends the modified response object to the event $event-&amp;gt;setResponse($response); } public function setLogger(LoggerInterface $logger) { $this-&amp;gt;logger = $logger; }}Register this ExceptionListener in config/service.yml file.App\EventListener\ExceptionListener: tags: - { name: kernel.event_listener, event: kernel.exception, priority: 50 }It indicates it binds event.exception event to ExceptionListener, and set priority to set the order at execution time.Run the following command to show all registered EventListener/EventSubscribers on event kernel.exception.php bin/console debug:event-subscriber kernel.exceptionChange the getById function to the following.#[Route(path: &amp;quot;/{id}&amp;quot;, name: &amp;quot;byId&amp;quot;, methods: [&amp;quot;GET&amp;quot;])]function getById(Uuid $id): Response{ $data = $this-&amp;gt;posts-&amp;gt;findOneBy([&amp;quot;id&amp;quot; =&amp;gt; $id]); if ($data) { return $this-&amp;gt;json($data); } else { throw new PostNotFoundException($id); }}Add a test to verify if the post is not found and get a 404 status code.public function testGetANoneExistingPost(): void{ $client = static::createClient(); $id = Uuid::v4(); $crawler = $client-&amp;gt;request(&amp;#39;GET&amp;#39;, &amp;#39;/posts/&amp;#39; . $id); // $response = $client-&amp;gt;getResponse(); $this-&amp;gt;assertResponseStatusCodeSame(404); $data = $response-&amp;gt;getContent(); $this-&amp;gt;assertStringContainsString(&amp;quot;Post #&amp;quot; . $id . &amp;quot; was not found&amp;quot;, $data);}Run the application again, and try to access a single Post through a none existing id.curl http://localhost:8000/posts/1ec3e1e0-17b3-6ed2-a01c-edecc112b438 -H &amp;quot;Accept: application/json&amp;quot; -v&amp;gt; GET /posts/1ec3e1e0-17b3-6ed2-a01c-edecc112b438 HTTP/1.1&amp;gt; Host: localhost:8000&amp;gt; User-Agent: curl/7.55.1&amp;gt; Accept: application/json&amp;gt;&amp;lt; HTTP/1.1 404 Not Found&amp;lt; Cache-Control: no-cache, private&amp;lt; Content-Type: application/json&amp;lt; Date: Mon, 22 Nov 2021 03:57:51 GMT&amp;lt; X-Powered-By: PHP/8.0.10&amp;lt; X-Robots-Tag: noindex&amp;lt; Content-Length: 69&amp;lt;{&amp;quot;error&amp;quot;:&amp;quot;Post #1ec3e1e0-17b3-6ed2-a01c-edecc112b438 was not found.&amp;quot;}Get the complete source codes from my Github.Building Restful APIs with Symfony 5 and PHP 8 was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Building Restful APIs with Micronaut</title><link href="/blog/2021/building-restful-apis-with-micronaut/" rel="alternate" type="text/html" title="Building Restful APIs with Micronaut" /><published>2021-10-27T00:00:00+00:00</published><updated>2021-10-27T00:00:00+00:00</updated><id>/blog/2021/building-restful-apis-with-micronaut</id><content type="html" xml:base="/blog/2021/building-restful-apis-with-micronaut/">&lt;p&gt;Similar to Spring Boot, Micronaut is a JVM based framework and designated for building Microservice and cloud native applications.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*zQQZFdnK1KadoGtvK5pRDA.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@onice?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Joey Huang&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/china-snow?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Unlike Spring Boot, Micronaut process IOC at compile time and erases runtime reflection, so it is easier to build native image.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Spring also started a Spring native project, but it is in the early stage.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;For developers that new to Micronaut, it is easy to develop your applications using Micronaut if you have some knowledge of Spring Boot. In this post, I will share my experience to create a simple Restful API application from scratch using Micronaut from a Spring developer view.&lt;/p&gt;&lt;h3&gt;Generating project skeleton&lt;/h3&gt;&lt;p&gt;Similar to &lt;a href=&quot;https://start.spring.io&quot;&gt;Spring Initializr&lt;/a&gt;, Micronaut provides an online service named &lt;strong&gt;Launch&lt;/strong&gt; to help your generate a project skeleton.&lt;/p&gt;&lt;p&gt;Open your browser, go to &lt;a href=&quot;https://micronaut.io/launch/&quot;&gt;Micronaut Launch&lt;/a&gt;, you will see the following screen.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*XfXojoTfgHQQe4Yp.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;In the &lt;strong&gt;Java version&lt;/strong&gt; field, select the latest LTS version &lt;strong&gt;17&lt;/strong&gt;. Then click the &lt;strong&gt;Features&lt;/strong&gt; button, add &lt;em&gt;lombok&lt;/em&gt;, &lt;em&gt;data hibernate jpa&lt;/em&gt;, &lt;em&gt;assertj&lt;/em&gt;, &lt;em&gt;postgres&lt;/em&gt;, &lt;em&gt;testcontainers&lt;/em&gt;. Finally, hit the &lt;strong&gt;GENERATE PROJECT&lt;/strong&gt; button to produce the project files into an archive for download.&lt;/p&gt;&lt;p&gt;Extract the project files into disk, and import to your IDE.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;You can also create a Micronaut project using Micronaut CLI, check &lt;/em&gt;&lt;a href=&quot;https://micronaut-projects.github.io/micronaut-starter/latest/guide/#installation&quot;&gt;&lt;em&gt;Micronaut Starter documentation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/blockquote&gt;&lt;h3&gt;Exploring project structure&lt;/h3&gt;&lt;p&gt;Let’s have a look at the files in the project.&lt;/p&gt;&lt;pre&gt;.&lt;br&gt;├── build.gradle&lt;br&gt;├── gradle&lt;br&gt;│   └── wrapper&lt;br&gt;│       ├── gradle-wrapper.jar&lt;br&gt;│       └── gradle-wrapper.properties&lt;br&gt;├── gradle.properties&lt;br&gt;├── gradlew&lt;br&gt;├── gradlew.bat&lt;br&gt;├── micronaut-cli.yml&lt;br&gt;├── settings.gradle&lt;br&gt;└── src&lt;br&gt;    ├── main&lt;br&gt;    │   ├── java&lt;br&gt;    │   │   └── com&lt;br&gt;    │   │       └── example&lt;br&gt;    │   │           └── Application.java&lt;br&gt;    │   └── resources&lt;br&gt;    │       ├── application.yml&lt;br&gt;    │       └── logback.xml&lt;br&gt;    └── test&lt;br&gt;        ├── java&lt;br&gt;        │   └── com&lt;br&gt;        │       └── example&lt;br&gt;        │           └── DemoTest.java&lt;br&gt;        └── resources&lt;br&gt;            ├── application-test.yml&lt;br&gt;            └── logback-test.xml&lt;/pre&gt;&lt;p&gt;Besides Gradle build scripts related resources, it is similar to the Spring Boot project structure.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Application is the entry class of the application.&lt;/li&gt;&lt;li&gt;The &lt;em&gt;src/main/resources/application.yml&lt;/em&gt; is the application configuration.&lt;/li&gt;&lt;li&gt;The &lt;em&gt;src/main/resources/logback.xml&lt;/em&gt; is logging configuration.&lt;/li&gt;&lt;li&gt;The DemoTest is an example of using @MicronautTest.&lt;/li&gt;&lt;li&gt;Under the &lt;em&gt;src/test/resources&lt;/em&gt; folder, there are some config resources for test purpose.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let’s have a look at &lt;em&gt;build.gradle&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;It uses com.github.johnrengelman.shadow to package the application into a jar archive. The micronaut plugin will process the dependency injection at compile time via Java Compiler Annotation Processors. This plugin also includes other tasks, such building application into Docker image and GraalVM native image.&lt;/p&gt;&lt;h3&gt;Declaring a Bean&lt;/h3&gt;&lt;p&gt;In Micronaut, it used JSR330(aka @Inject) specification to annotate the injectable beans. JSR330 originally is lead by SpringSource(now VMware) and Google.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Spring also has built-in JSR330 support, by default it is not activated. You should add &lt;/em&gt;&lt;em&gt;inject artifact in your project dependencies to enable it.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;When a class is annotated with @Singleton means there is only one instance shared in the application scope, @Prototype will produce a new instance for every injection.&lt;/p&gt;&lt;p&gt;Micronaut provides a @Factory to produces simple beans in groups, for example.&lt;/p&gt;&lt;pre&gt;@Factory&lt;br&gt;class MyConfig{&lt;br&gt;    &lt;br&gt;    @Singleton&lt;br&gt;    public Foo foo(){}&lt;br&gt;    &lt;br&gt;    @Singleton&lt;br&gt;    public Bar bar(){}&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;As described in former sections, Micronaut process IOC at compile time. When building the application, explore the project &lt;em&gt;build/classes&lt;/em&gt; folder, you will find there are a lot of extra classes generated at compile time which names are start with a USD(“&lt;strong&gt;$&lt;/strong&gt;”) symbol.&lt;/p&gt;&lt;h3&gt;Setup database&lt;/h3&gt;&lt;p&gt;Open &lt;em&gt;src/main/resources/application.yml&lt;/em&gt;, the datasources is configured when generating the project. Change the properties according to your environment.&lt;/p&gt;&lt;pre&gt;datasources:&lt;br&gt;  default:&lt;br&gt;    url: jdbc:postgresql://localhost:5432/blogdb&lt;br&gt;    driverClassName: org.postgresql.Driver&lt;br&gt;    username: user&lt;br&gt;    password: password&lt;br&gt;    schema-generate: CREATE_DROP&lt;br&gt;    dialect: POSTGRES&lt;br&gt;jpa.default.properties.hibernate.hbm2ddl.auto: update&lt;/pre&gt;&lt;p&gt;Create a docker compose file to bootstrap Postgres in docker container.&lt;/p&gt;&lt;pre&gt;version: &amp;#39;3.7&amp;#39; # specify docker-compose version&lt;/pre&gt;&lt;pre&gt;services:&lt;br&gt;  postgres:&lt;br&gt;    image: postgres&lt;br&gt;    ports:&lt;br&gt;      - &amp;quot;5432:5432&amp;quot;&lt;br&gt;    restart: always&lt;br&gt;    environment:&lt;br&gt;      POSTGRES_PASSWORD: password&lt;br&gt;      POSTGRES_DB: blogdb&lt;br&gt;      POSTGRES_USER: user&lt;br&gt;    volumes:&lt;br&gt;      - ./data:/var/lib/postgresql&lt;br&gt;      - ./pg-initdb.d:/docker-entrypoint-initdb.d&lt;/pre&gt;&lt;p&gt;Start up Postgres database.&lt;/p&gt;&lt;pre&gt;docker compose up postgres&lt;/pre&gt;&lt;h3&gt;Data Accessing with Micronaut Data&lt;/h3&gt;&lt;p&gt;We added &lt;em&gt;data-jpa&lt;/em&gt; feature when generating the project, which enables Micronaut data support. If you have experience of Spring Data JPA , it is easy to migrate to Micronaut Data.&lt;/p&gt;&lt;p&gt;I have used a simple blog application in the former examples when demonstrating other frameworks. In this post, I will reuse the blog application concept.&lt;/p&gt;&lt;p&gt;Basically it includes two JPA entities, Post and Comment, it is a OneToMany relation.&lt;/p&gt;&lt;pre&gt;@Getter&lt;br&gt;@Setter&lt;br&gt;@NoArgsConstructor&lt;br&gt;@AllArgsConstructor&lt;br&gt;@Builder&lt;br&gt;@Entity&lt;br&gt;@Table(name = &amp;quot;posts&amp;quot;)&lt;br&gt;public class Post implements Serializable {&lt;/pre&gt;&lt;pre&gt;    @Id&lt;br&gt;    @GeneratedValue(generator = &amp;quot;uuid&amp;quot;)&lt;br&gt;    @GenericGenerator(name = &amp;quot;uuid&amp;quot;, strategy = &amp;quot;uuid2&amp;quot;)&lt;br&gt;    UUID id;&lt;br&gt;    String title;&lt;br&gt;    String content;&lt;/pre&gt;&lt;pre&gt;    @Builder.Default&lt;br&gt;    Status status = Status.DRAFT;&lt;/pre&gt;&lt;pre&gt;    @Builder.Default&lt;br&gt;    LocalDateTime createdAt = LocalDateTime.now();&lt;/pre&gt;&lt;pre&gt;    @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true, mappedBy = &amp;quot;post&amp;quot;)&lt;br&gt;    @Builder.Default&lt;br&gt;    @OrderColumn(name = &amp;quot;comment_idx&amp;quot;)&lt;br&gt;    List&amp;lt;Comment&amp;gt; comments = new ArrayList&amp;lt;&amp;gt;();&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public boolean equals(Object o) {&lt;br&gt;        if (this == o) return true;&lt;br&gt;        if (o == null || getClass() != o.getClass()) return false;&lt;br&gt;        Post post = (Post) o;&lt;br&gt;        return getTitle().equals(post.getTitle());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public int hashCode() {&lt;br&gt;        return Objects.hash(getTitle());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public String toString() {&lt;br&gt;        return &amp;quot;Post{&amp;quot; +&lt;br&gt;                &amp;quot;id=&amp;quot; + id +&lt;br&gt;                &amp;quot;, title=&amp;#39;&amp;quot; + title + &amp;#39;\&amp;#39;&amp;#39; +&lt;br&gt;                &amp;quot;, content=&amp;#39;&amp;quot; + content + &amp;#39;\&amp;#39;&amp;#39; +&lt;br&gt;                &amp;quot;, status=&amp;quot; + status +&lt;br&gt;                &amp;quot;, createdAt=&amp;quot; + createdAt +&lt;br&gt;                &amp;#39;}&amp;#39;;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;// Comment entity &lt;br&gt;@Getter&lt;br&gt;@Setter&lt;br&gt;@NoArgsConstructor&lt;br&gt;@AllArgsConstructor&lt;br&gt;@Builder&lt;br&gt;@Entity&lt;br&gt;@Table(name = &amp;quot;comments&amp;quot;)&lt;br&gt;public class Comment implements Serializable {&lt;/pre&gt;&lt;pre&gt;    @Id&lt;br&gt;    @GeneratedValue(generator = &amp;quot;uuid&amp;quot;)&lt;br&gt;    @GenericGenerator(name = &amp;quot;uuid&amp;quot;, strategy = &amp;quot;uuid2&amp;quot;)&lt;br&gt;    private UUID id;&lt;/pre&gt;&lt;pre&gt;    @ManyToOne&lt;br&gt;    @JoinColumn(name = &amp;quot;post_id&amp;quot;)&lt;br&gt;    private Post post;&lt;/pre&gt;&lt;pre&gt;    private String content;&lt;/pre&gt;&lt;pre&gt;    @Builder.Default&lt;br&gt;    @Column(name = &amp;quot;created_at&amp;quot;)&lt;br&gt;    private LocalDateTime createdAt = LocalDateTime.now();&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public boolean equals(Object o) {&lt;br&gt;        if (this == o) return true;&lt;br&gt;        if (o == null || getClass() != o.getClass()) return false;&lt;br&gt;        Comment comment = (Comment) o;&lt;br&gt;        return getContent().equals(comment.getContent());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public int hashCode() {&lt;br&gt;        return Objects.hash(getContent());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public String toString() {&lt;br&gt;        return &amp;quot;Comment{&amp;quot; +&lt;br&gt;                &amp;quot;id=&amp;quot; + id +&lt;br&gt;                &amp;quot;, content=&amp;#39;&amp;quot; + content + &amp;#39;\&amp;#39;&amp;#39; +&lt;br&gt;                &amp;quot;, createdAt=&amp;quot; + createdAt +&lt;br&gt;                &amp;#39;}&amp;#39;;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;They are standard JPA @Entity classes.&lt;/p&gt;&lt;p&gt;An JPA entity class should be annotated with an @Entity annotation, and includes a @Id field to identify this entity and a none-arguments constructor. Here we use Lombok to generate setters and getters, and constructors at compile time. We use IDE to generate equals and hasCode according to the business requirements.&lt;/p&gt;&lt;pre&gt;@Repository&lt;br&gt;public interface PostRepository extends JpaRepository&amp;lt;Post, UUID&amp;gt;{&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;pre&gt;@Repository&lt;br&gt;public interface CommentRepository extends JpaRepository&amp;lt;Comment, UUID&amp;gt; {&lt;/pre&gt;&lt;pre&gt;    List&amp;lt;Comment&amp;gt; findByPost(Post post);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Add a DataInitializer bean to initialize some sample data.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;@Slf4j&lt;br&gt;public class DataInitializer implements ApplicationEventListener&amp;lt;ApplicationStartupEvent&amp;gt; {&lt;br&gt;    private final PostRepository posts;&lt;/pre&gt;&lt;pre&gt;    private final TransactionOperations&amp;lt;?&amp;gt; tx;&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public void onApplicationEvent(ApplicationStartupEvent event) {&lt;br&gt;        log.info(&amp;quot;initializing sample data...&amp;quot;);&lt;br&gt;        var data = List.of(Post.builder().title(&amp;quot;Getting started wit Micronaut&amp;quot;).content(&amp;quot;test&amp;quot;).build(),&lt;br&gt;                Post.builder().title(&amp;quot;Getting started wit Micronaut: part 2&amp;quot;).content(&amp;quot;test&amp;quot;).build());&lt;br&gt;        tx.executeWrite(status -&amp;gt; {&lt;br&gt;            this.posts.deleteAll();&lt;br&gt;            this.posts.saveAll(data);&lt;br&gt;            return null;&lt;br&gt;        });&lt;br&gt;        tx.executeRead(status -&amp;gt; {&lt;br&gt;            this.posts.findAll().forEach(p -&amp;gt; log.info(&amp;quot;saved post: {}&amp;quot;, p));&lt;br&gt;            return null;&lt;br&gt;        });&lt;br&gt;        log.info(&amp;quot;data initialization is done...&amp;quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Write a test to verify functionality of PostRepository. Similar to the @SpringBootTest, Micronaut provides a @MicronautTest.&lt;/p&gt;&lt;pre&gt;@MicronautTest(application = Application.class, startApplication = false)&lt;br&gt;class PostRepositoryTest {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    PostRepository posts;&lt;/pre&gt;&lt;pre&gt;    @PersistenceContext&lt;br&gt;    EntityManager entityManager;&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    void testCreatePost() {&lt;br&gt;        var entity = Post.builder().title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build();&lt;br&gt;        this.entityManager.persist(entity);&lt;/pre&gt;&lt;pre&gt;        assertThat(entity.getId()).isNotNull();&lt;br&gt;        assertTrue(posts.findById(entity.getId()).isPresent());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Here we set startApplication = false, it does not start the embedded server to host the application, to test against the database, we do not need a running application&lt;/p&gt;&lt;p&gt;We have add testcontainers feature, it will configure a Postgres for test automatically. Check the testcontainers config in the src/test/resources/application-test.yml.&lt;/p&gt;&lt;pre&gt;datasources:&lt;br&gt;  default:&lt;br&gt;    url: jdbc:tc:postgresql:12:///postgres&lt;br&gt;    driverClassName: org.testcontainers.jdbc.ContainerDatabaseDriver&lt;/pre&gt;&lt;p&gt;When there is a tc as database host name, testcontainer will start up a Postgres database automaticially.&lt;/p&gt;&lt;h3&gt;Exposing Restful APIs&lt;/h3&gt;&lt;p&gt;Similar to Spring WebMVC, in Micronaut, we can use a controller to expose Restful APIs.&lt;/p&gt;&lt;pre&gt;@Controller(&amp;quot;/posts&amp;quot;)&lt;br&gt;@RequiredArgsConstructor(onConstructor_ = {@Inject})&lt;br&gt;@Validated&lt;br&gt;public class PostController {&lt;br&gt;    private final PostRepository posts;&lt;br&gt;    private final CommentRepository comments;&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/&amp;quot;, produces = MediaType.APPLICATION_JSON)&lt;br&gt;    public HttpResponse&amp;lt;List&amp;lt;PostSummaryDto&amp;gt;&amp;gt; getAll() {&lt;br&gt;        var body = posts.findAll()&lt;br&gt;                .stream()&lt;br&gt;                .map(p -&amp;gt; new PostSummaryDto(p.getId(), p.getTitle(), p.getCreatedAt()))&lt;br&gt;                .toList();&lt;br&gt;        return ok(body);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Get(uri = &amp;quot;/{id}&amp;quot;, produces = MediaType.APPLICATION_JSON)&lt;br&gt;    public HttpResponse&amp;lt;?&amp;gt; getById(@PathVariable UUID id) {&lt;br&gt;        return posts.findById(id)&lt;br&gt;                .map(p -&amp;gt; ok(new PostDetailsDto(p.getId(), p.getTitle(), p.getContent(), p.getStatus(), p.getCreatedAt())))&lt;br&gt;                //.orElseThrow(() -&amp;gt; new PostNotFoundException(id));&lt;br&gt;        .orElseGet(HttpResponse::notFound);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;A controller is annotated with @Controller, you can set a base uri that can be applied on all methods. The @Get, @Post,@Put, @Delete is mapped to handle varied HTTP methods, it is similar to the Spring&amp;#39;s @GetMapping, @PostMapping, etc. You can set media types using &lt;em&gt;consumes&lt;/em&gt; or &lt;em&gt;produces&lt;/em&gt; attributes in these annotations to limit the request and response content type, or use standalone annotations @Consumes and @Produces to set up the media types.&lt;/p&gt;&lt;p&gt;Start up the application via Gradle command.&lt;/p&gt;&lt;pre&gt;./gradlew run&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;Do not forget to start up Postgres firstly.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Use curl to test the /posts endpoint.&lt;/p&gt;&lt;pre&gt;curl &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt;&lt;br&gt;[ {&lt;br&gt;  &amp;quot;id&amp;quot; : &amp;quot;b6fb90ab-2719-498e-a5fd-93d0c7669fdf&amp;quot;,&lt;br&gt;  &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;,&lt;br&gt;  &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-14T22:00:28.80933&amp;quot;&lt;br&gt;}, {&lt;br&gt;  &amp;quot;id&amp;quot; : &amp;quot;8c6147ea-8de4-473f-b97d-e211c8e43bac&amp;quot;,&lt;br&gt;  &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut: part 2&amp;quot;,&lt;br&gt;  &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-14T22:00:28.80933&amp;quot;&lt;br&gt;} ]&lt;/pre&gt;&lt;pre&gt;curl &lt;a href=&quot;http://localhost:8080/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf&quot;&gt;http://localhost:8080/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf&lt;/a&gt;&lt;br&gt; {&lt;br&gt;  &amp;quot;id&amp;quot; : &amp;quot;b6fb90ab-2719-498e-a5fd-93d0c7669fdf&amp;quot;,&lt;br&gt;  &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;,&lt;br&gt;  &amp;quot;content&amp;quot;: &amp;quot;test&amp;quot;,&lt;br&gt;  &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-14T22:00:28.80933&amp;quot;&lt;br&gt;}&lt;/pre&gt;&lt;blockquote&gt;&lt;em&gt;Micronaut CLI provides commands to generate controller, bean, etc. Run &lt;/em&gt;&lt;em&gt;mn --help to get all available commands.&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;Write a test for the PostController.&lt;/p&gt;&lt;pre&gt;@MicronautTest(environments = Environment.TEST)&lt;br&gt;public class PostControllerTest {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    @Client(&amp;quot;/&amp;quot;)&lt;br&gt;    HttpClient client;&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    PostRepository posts;&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    CommentRepository comments;&lt;/pre&gt;&lt;pre&gt;    @MockBean(PostRepository.class)&lt;br&gt;    PostRepository posts() {&lt;br&gt;        return mock(PostRepository.class);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @MockBean(CommentRepository.class)&lt;br&gt;    CommentRepository comments() {&lt;br&gt;        return mock(CommentRepository.class);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;test GET &amp;#39;/posts&amp;#39; endpoint&amp;quot;)&lt;br&gt;    public void testGetAllPosts() throws Exception {&lt;br&gt;        when(this.posts.findAll()).thenReturn(&lt;br&gt;                List.of(Post.builder().id(UUID.randomUUID()).title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build())&lt;br&gt;        );&lt;br&gt;        var response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, PostSummaryDto[].class);&lt;br&gt;        assertEquals(HttpStatus.OK, response.status());&lt;br&gt;        var body = response.body();&lt;br&gt;        assertThat(body.length).isEqualTo(1);&lt;br&gt;        assertThat(body[0].title()).isEqualTo(&amp;quot;test title&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        verify(this.posts, times(1)).findAll();&lt;br&gt;        verifyNoMoreInteractions(this.posts);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;test GET &amp;#39;/posts/{id}&amp;#39; endpoint&amp;quot;)&lt;br&gt;    public void testGetSinglePost() throws Exception {&lt;br&gt;        when(this.posts.findById(any(UUID.class))).thenReturn(&lt;br&gt;                Optional.ofNullable(Post.builder().id(UUID.randomUUID()).title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build())&lt;br&gt;        );&lt;br&gt;        var request = HttpRequest.GET(UriBuilder.of(&amp;quot;/posts/{id}&amp;quot;).expand(Map.of(&amp;quot;id&amp;quot;, UUID.randomUUID())));&lt;br&gt;        var response = client.toBlocking().exchange(request, PostDetailsDto.class);&lt;br&gt;        assertEquals(HttpStatus.OK, response.status());&lt;br&gt;        var body = response.body();&lt;br&gt;        assertThat(body.title()).isEqualTo(&amp;quot;test title&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        verify(this.posts, times(1)).findById(any(UUID.class));&lt;br&gt;        verifyNoMoreInteractions(this.posts);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;test GET &amp;#39;/posts/{id}&amp;#39; endpoint that does not exist&amp;quot;)&lt;br&gt;    public void testGetSinglePost_notFound() throws Exception {&lt;br&gt;        when(this.posts.findById(any(UUID.class))).thenReturn(Optional.ofNullable(null));&lt;br&gt;        var request = HttpRequest.GET(UriBuilder.of(&amp;quot;/posts/{id}&amp;quot;).expand(Map.of(&amp;quot;id&amp;quot;, UUID.randomUUID())));&lt;br&gt;        var exception = assertThrows(HttpClientResponseException.class, () -&amp;gt; client.toBlocking().exchange(request, PostDetailsDto.class));&lt;/pre&gt;&lt;pre&gt;        assertEquals(HttpStatus.NOT_FOUND, exception.getStatus());&lt;br&gt;        verify(this.posts, times(1)).findById(any(UUID.class));&lt;br&gt;        verifyNoMoreInteractions(this.posts);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In this test, we use Mockito to mock all dependent beans(PostRepository and CommentRepository) in the PostController. To mock beans in the test context, Micronaut provides a MockBean to produce a mocked instance to replace the &lt;em&gt;real&lt;/em&gt; beans.&lt;/p&gt;&lt;p&gt;Similar to Spring’s RestTemplate or WebClient, Micronaut provides a HttpClient to send request to a certain URI, by default it uses the &lt;em&gt;ReactiveStream&lt;/em&gt;s compatible API, If you are stick on the traditional blocking API, call the toBlocking() method to switch to use it.&lt;/p&gt;&lt;p&gt;The exchange method will return a HTTP response object, and the retrieve method returns the response body directly.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;Note: When using blocking APIs, if it returns a failure HTTP response, such as return a 4xx status code, it will throws a &lt;/em&gt;&lt;em&gt;HttpClientResponseException instead. In contrast, in ReactiveStreams APIs, it will emit the exception to error channel.&lt;/em&gt;&lt;/blockquote&gt;&lt;h3&gt;Exception Handling&lt;/h3&gt;&lt;p&gt;In the above PostController, if there is no posts found for the given post id, it returns a 404 HTTP status directly. In a real world application, we can use an exception to envelope the exception case. Like Spring WebMVC, Micronaut also provides exception handling mechanism.&lt;/p&gt;&lt;p&gt;For example, create an PostNotFoundException to stand for the case post was not found by id.&lt;/p&gt;&lt;p&gt;Create a PostNotFoundException class.&lt;/p&gt;&lt;pre&gt;public class PostNotFoundException extends RuntimeException {&lt;br&gt;    public PostNotFoundException(UUID id) {&lt;br&gt;        super(&amp;quot;Post[id=&amp;quot; + id + &amp;quot;] was not found&amp;quot;);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;In the PostController, throw the exception.&lt;/p&gt;&lt;pre&gt;@Get(uri = &amp;quot;/{id}&amp;quot;, produces = MediaType.APPLICATION_JSON)&lt;br&gt;public HttpResponse&amp;lt;?&amp;gt; getById(@PathVariable UUID id) {&lt;br&gt;    return posts.findById(id)&lt;br&gt;        .map(p -&amp;gt; ok(new PostDetailsDto(p.getId(), p.getTitle(), p.getContent(), p.getStatus(), p.getCreatedAt())))&lt;br&gt;        .orElseThrow(() -&amp;gt; new PostNotFoundException(id));&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Add a PostNotFoundExceptionHandler to handle PostNotFoundException.&lt;/p&gt;&lt;pre&gt;@Produces&lt;br&gt;@Singleton&lt;br&gt;@Requires(classes = { PostNotFoundException.class})&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;public class PostNotFoundExceptionHandler implements ExceptionHandler&amp;lt;PostNotFoundException, HttpResponse&amp;lt;?&amp;gt;&amp;gt; {&lt;br&gt;    private final ErrorResponseProcessor&amp;lt;?&amp;gt; errorResponseProcessor;&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public HttpResponse&amp;lt;?&amp;gt; handle(HttpRequest request, PostNotFoundException exception) {&lt;br&gt;        return errorResponseProcessor.processResponse(&lt;br&gt;                ErrorContext.builder(request)&lt;br&gt;                        .cause(exception)&lt;br&gt;                        .errorMessage(exception.getMessage())&lt;br&gt;                        .build(),&lt;br&gt;                HttpResponse.notFound()&lt;br&gt;        );&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Open your terminal, use curl to test the /posts/{id} endpoint with an none-existing id.&lt;/p&gt;&lt;pre&gt;# curl &lt;a href=&quot;http://localhost:8080/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf&quot;&gt;http://localhost:8080/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf&lt;/a&gt; -v&lt;br&gt;&amp;gt; GET /posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf HTTP/1.1&lt;br&gt;&amp;gt; Host: localhost:8080&lt;br&gt;&amp;gt; User-Agent: curl/7.55.1&lt;br&gt;&amp;gt; Accept: */*&lt;br&gt;&amp;gt;&lt;br&gt;&amp;lt; HTTP/1.1 404 Not Found&lt;br&gt;&amp;lt; Content-Type: application/json&lt;br&gt;&amp;lt; date: Mon, 25 Oct 2021 07:02:01 GMT&lt;br&gt;&amp;lt; content-length: 301&lt;br&gt;&amp;lt; connection: keep-alive&lt;br&gt;&amp;lt;&lt;br&gt;{&lt;br&gt;  &amp;quot;message&amp;quot; : &amp;quot;Not Found&amp;quot;,&lt;br&gt;  &amp;quot;_links&amp;quot; : {&lt;br&gt;    &amp;quot;self&amp;quot; : {&lt;br&gt;      &amp;quot;href&amp;quot; : &amp;quot;/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf&amp;quot;,&lt;br&gt;      &amp;quot;templated&amp;quot; : false&lt;br&gt;    }&lt;br&gt;  },&lt;br&gt;  &amp;quot;_embedded&amp;quot; : {&lt;br&gt;    &amp;quot;errors&amp;quot; : [ {&lt;br&gt;      &amp;quot;message&amp;quot; : &amp;quot;Post[id=b6fb90ab-2719-498e-a5fd-93d0c7669fdf] was not found&amp;quot;&lt;br&gt;    } ]&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Pagination&lt;/h3&gt;&lt;p&gt;Similar to Spring Data, Micronaut Data provides pagination for long query result, the findAll accepts a Pageable parameter, and returns a Page result. Micronaut Data also includes a Specification to adopt JPA Criteria APIs for type safe query.&lt;/p&gt;&lt;p&gt;Change PostRepository , add JpaSpecificationExecutor&amp;lt;Post&amp;gt; to extends list.&lt;/p&gt;&lt;pre&gt;@Repository&lt;br&gt;public interface PostRepository extends JpaRepository&amp;lt;Post, UUID&amp;gt;, JpaSpecificationExecutor&amp;lt;Post&amp;gt; {&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Create a specific PostSpecifications to group all specifications for querying posts. Currently only add one for query by keyword and status.&lt;/p&gt;&lt;pre&gt;public class PostSpecifications {&lt;br&gt;    private PostSpecifications(){&lt;br&gt;        // forbid to instantiate&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public static Specification&amp;lt;Post&amp;gt; filterByKeywordAndStatus(&lt;br&gt;            final String keyword,&lt;br&gt;            final Status status&lt;br&gt;    ) {&lt;br&gt;        return (Root&amp;lt;Post&amp;gt; root, CriteriaQuery&amp;lt;?&amp;gt; query, CriteriaBuilder cb) -&amp;gt; {&lt;br&gt;            List&amp;lt;Predicate&amp;gt; predicates = new ArrayList&amp;lt;&amp;gt;();&lt;br&gt;            if (StringUtils.hasText(keyword)) {&lt;br&gt;                predicates.add(&lt;br&gt;                        cb.or(&lt;br&gt;                                cb.like(root.get(Post_.title), &amp;quot;%&amp;quot; + keyword + &amp;quot;%&amp;quot;),&lt;br&gt;                                cb.like(root.get(Post_.content), &amp;quot;%&amp;quot; + keyword + &amp;quot;%&amp;quot;)&lt;br&gt;                        )&lt;br&gt;                );&lt;br&gt;            }&lt;/pre&gt;&lt;pre&gt;            if (status != null) {&lt;br&gt;                predicates.add(cb.equal(root.get(Post_.status), status));&lt;br&gt;            }&lt;/pre&gt;&lt;pre&gt;            return cb.and(predicates.toArray(new Predicate[0]));&lt;br&gt;        };&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Change the getAll method of PostController to the following.&lt;/p&gt;&lt;pre&gt;@Get(uri = &amp;quot;/&amp;quot;, produces = MediaType.APPLICATION_JSON)&lt;br&gt;@Transactional&lt;br&gt;public HttpResponse&amp;lt;Page&amp;lt;PostSummaryDto&amp;gt;&amp;gt; getAll(@QueryValue(defaultValue = &amp;quot;&amp;quot;) String q,&lt;br&gt;                                                 @QueryValue(defaultValue = &amp;quot;&amp;quot;) String status,&lt;br&gt;                                                 @QueryValue(defaultValue = &amp;quot;0&amp;quot;) int page,&lt;br&gt;                                                 @QueryValue(defaultValue = &amp;quot;10&amp;quot;) int size) {&lt;br&gt;    var pageable = Pageable.from(page, size, Sort.of(Sort.Order.desc(&amp;quot;createdAt&amp;quot;)));&lt;br&gt;    var postStatus = StringUtils.hasText(status) ? com.example.domain.Status.valueOf(status) : null;&lt;br&gt;    var data = this.posts.findAll(PostSpecifications.filterByKeywordAndStatus(q, postStatus), pageable);&lt;br&gt;    var body = data.map(p -&amp;gt; new PostSummaryDto(p.getId(), p.getTitle(), p.getCreatedAt()));&lt;br&gt;    return ok(body);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;All the query parameters are optional.&lt;/p&gt;&lt;p&gt;Let’s use curl to test the &lt;em&gt;/posts&lt;/em&gt; endpiont.&lt;/p&gt;&lt;pre&gt;# curl &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt;&lt;br&gt;{&lt;br&gt;  &amp;quot;content&amp;quot; : [ {&lt;br&gt;    &amp;quot;id&amp;quot; : &amp;quot;c9ec963d-2df5-4d65-bfbe-5a0d4cb14ca6&amp;quot;,&lt;br&gt;    &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;,&lt;br&gt;    &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:35:03.732951&amp;quot;&lt;br&gt;  }, {&lt;br&gt;    &amp;quot;id&amp;quot; : &amp;quot;0a79185c-5981-4301-86d1-c266b26b4980&amp;quot;,&lt;br&gt;    &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut: part 2&amp;quot;,&lt;br&gt;    &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:35:03.732951&amp;quot;&lt;br&gt;  } ],&lt;br&gt;  &amp;quot;pageable&amp;quot; : {&lt;br&gt;    &amp;quot;number&amp;quot; : 0,&lt;br&gt;    &amp;quot;sort&amp;quot; : {&lt;br&gt;      &amp;quot;orderBy&amp;quot; : [ {&lt;br&gt;        &amp;quot;property&amp;quot; : &amp;quot;createdAt&amp;quot;,&lt;br&gt;        &amp;quot;direction&amp;quot; : &amp;quot;DESC&amp;quot;,&lt;br&gt;        &amp;quot;ignoreCase&amp;quot; : false,&lt;br&gt;        &amp;quot;ascending&amp;quot; : false&lt;br&gt;      } ],&lt;br&gt;      &amp;quot;sorted&amp;quot; : true&lt;br&gt;    },&lt;br&gt;    &amp;quot;size&amp;quot; : 10,&lt;br&gt;    &amp;quot;offset&amp;quot; : 0,&lt;br&gt;    &amp;quot;sorted&amp;quot; : true,&lt;br&gt;    &amp;quot;unpaged&amp;quot; : false&lt;br&gt;  },&lt;br&gt;  &amp;quot;totalSize&amp;quot; : 2,&lt;br&gt;  &amp;quot;totalPages&amp;quot; : 1,&lt;br&gt;  &amp;quot;empty&amp;quot; : false,&lt;br&gt;  &amp;quot;size&amp;quot; : 10,&lt;br&gt;  &amp;quot;offset&amp;quot; : 0,&lt;br&gt;  &amp;quot;numberOfElements&amp;quot; : 2,&lt;br&gt;  &amp;quot;pageNumber&amp;quot; : 0&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Customizing JsonSerializer&lt;/h3&gt;&lt;p&gt;The Page object rendered result is a little tedious, most of case, we do not need all these fields, we can customize it via Jackson JsonSerializer.&lt;/p&gt;&lt;pre&gt;@Singleton&lt;br&gt;public class PageJsonSerializer extends JsonSerializer&amp;lt;Page&amp;lt;?&amp;gt;&amp;gt; {&lt;br&gt;    @Override&lt;br&gt;    public void serialize(Page&amp;lt;?&amp;gt; value, JsonGenerator gen, SerializerProvider serializers) throws IOException {&lt;br&gt;        gen.writeStartObject();&lt;br&gt;        gen.writeNumberField(&amp;quot;pageNumber&amp;quot;, value.getPageNumber());&lt;br&gt;        if (value.getNumberOfElements() != value.getSize()) {&lt;br&gt;            //only display it in the last page when number of elements is not equal to page size.&lt;br&gt;            gen.writeNumberField(&amp;quot;numberOfElements&amp;quot;, value.getNumberOfElements());&lt;br&gt;        }&lt;br&gt;        gen.writeNumberField(&amp;quot;size&amp;quot;, value.getSize());&lt;br&gt;        gen.writeNumberField(&amp;quot;totalPages&amp;quot;, value.getTotalPages());&lt;br&gt;        gen.writeNumberField(&amp;quot;totalSize&amp;quot;, value.getTotalSize());&lt;br&gt;        gen.writeObjectField(&amp;quot;content&amp;quot;, value.getContent());&lt;br&gt;        gen.writeEndObject();&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Run the application again, and hint &lt;em&gt;/posts&lt;/em&gt; endpoint.&lt;/p&gt;&lt;pre&gt;# curl &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt;&lt;br&gt;{&lt;br&gt;  &amp;quot;pageNumber&amp;quot; : 0,&lt;br&gt;  &amp;quot;numberOfElements&amp;quot; : 2,&lt;br&gt;  &amp;quot;size&amp;quot; : 10,&lt;br&gt;  &amp;quot;totalPages&amp;quot; : 1,&lt;br&gt;  &amp;quot;totalSize&amp;quot; : 2,&lt;br&gt;  &amp;quot;content&amp;quot; : [ {&lt;br&gt;    &amp;quot;id&amp;quot; : &amp;quot;53fb77d5-4159-4a80-bab9-c76d9a535b36&amp;quot;,&lt;br&gt;    &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;,&lt;br&gt;    &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:47:05.545594&amp;quot;&lt;br&gt;  }, {&lt;br&gt;    &amp;quot;id&amp;quot; : &amp;quot;aa02fd49-0c24-4f12-b204-2e48213c7a1e&amp;quot;,&lt;br&gt;    &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut: part 2&amp;quot;,&lt;br&gt;    &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:47:05.545594&amp;quot;&lt;br&gt;  } ]&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Modify the testing codes to verify changes.&lt;/p&gt;&lt;pre&gt;class PostControllerTest{&lt;br&gt;    //...&lt;br&gt;    &lt;br&gt;    @Test&lt;br&gt;    @DisplayName(&amp;quot;test GET &amp;#39;/posts&amp;#39; endpoint&amp;quot;)&lt;br&gt;    public void testGetAllPosts() throws Exception {&lt;br&gt;        var content = List.of(Post.builder().id(UUID.randomUUID()).title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build());&lt;br&gt;        when(this.posts.findAll(isA(Specification.class), isA(Pageable.class))).thenReturn(&lt;br&gt;                Page.of(content, Pageable.from(0, 20), 1)&lt;br&gt;        );&lt;br&gt;        var request = HttpRequest.GET(&amp;quot;/posts&amp;quot;);&lt;br&gt;        var response = client.toBlocking().exchange(request, String.class);&lt;br&gt;        assertEquals(HttpStatus.OK, response.status());&lt;br&gt;        var body = response.body();&lt;br&gt;        assertThat(JsonPath.from(body).getInt(&amp;quot;totalSize&amp;quot;)).isEqualTo(1);&lt;br&gt;        assertThat(JsonPath.from(body).getString(&amp;quot;content[0].title&amp;quot;)).isEqualTo(&amp;quot;test title&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        verify(this.posts, times(1)).findAll(isA(Specification.class), isA(Pageable.class));&lt;br&gt;        verifyNoMoreInteractions(this.posts);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Creating Posts&lt;/h3&gt;&lt;p&gt;We have discussed how to query posts by key word and get single post by id, in this section, we will focus on creating a new post.&lt;/p&gt;&lt;p&gt;According the REST convention, we will use a POST HTTP method to send a request on endpoint &lt;em&gt;/posts&lt;/em&gt; and accept JSON data as request body.&lt;/p&gt;&lt;pre&gt;@io.micronaut.http.annotation.Post(uri = &amp;quot;/&amp;quot;, consumes = MediaType.APPLICATION_JSON)&lt;br&gt;@Transactional&lt;br&gt;public HttpResponse&amp;lt;Void&amp;gt; create(@Body CreatePostCommand dto) {&lt;br&gt;    var data = Post.builder().title(dto.title()).content(dto.content()).build();&lt;br&gt;    var saved = this.posts.save(data);&lt;br&gt;    return HttpResponse.created(URI.create(&amp;quot;/posts/&amp;quot; + saved.getId()));&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;The request body is deserialized as a POJO by built-in Jackson JsonDesearilizers, it is annotated with a @Body annotation to indicate which target class it will be desearilized to. After the post data is saved, set the response header Location to the URI of accessing the new post.&lt;/p&gt;&lt;p&gt;Run the application, and try to add a post via curl, and then access the newly created post.&lt;/p&gt;&lt;pre&gt;# curl -X POST -v  -H &amp;quot;Content-Type:application/json&amp;quot; &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt; -d &amp;quot;{\&amp;quot;title\&amp;quot;:\&amp;quot;test title\&amp;quot;,\&amp;quot;content\&amp;quot;:\&amp;quot;test content\&amp;quot;}&amp;quot;&lt;br&gt;&amp;gt; POST /posts HTTP/1.1&lt;br&gt;&amp;gt; Host: localhost:8080&lt;br&gt;&amp;gt; User-Agent: curl/7.55.1&lt;br&gt;&amp;gt; Accept: */*&lt;br&gt;&amp;gt; Content-Type:application/json&lt;br&gt;&amp;gt; Content-Length: 47&lt;br&gt;&amp;gt;&lt;br&gt;* upload completely sent off: 47 out of 47 bytes&lt;br&gt;&amp;lt; HTTP/1.1 201 Created&lt;br&gt;&amp;lt; location: /posts/7db15639-62e3-4d3e-9cf4-f54413502ea6&lt;br&gt;&amp;lt; date: Mon, 25 Oct 2021 09:07:40 GMT&lt;br&gt;&amp;lt; connection: keep-alive&lt;br&gt;&amp;lt; transfer-encoding: chunked&lt;br&gt;&amp;lt;&lt;br&gt;# curl &lt;a href=&quot;http://localhost:8080/posts/7db15639-62e3-4d3e-9cf4-f54413502ea6&quot;&gt;http://localhost:8080/posts/7db15639-62e3-4d3e-9cf4-f54413502ea6&lt;/a&gt;&lt;br&gt;{&lt;br&gt;  &amp;quot;id&amp;quot; : &amp;quot;7db15639-62e3-4d3e-9cf4-f54413502ea6&amp;quot;,&lt;br&gt;  &amp;quot;title&amp;quot; : &amp;quot;test title&amp;quot;,&lt;br&gt;  &amp;quot;content&amp;quot; : &amp;quot;test content&amp;quot;,&lt;br&gt;  &amp;quot;status&amp;quot; : &amp;quot;DRAFT&amp;quot;,&lt;br&gt;  &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T17:07:40.87621&amp;quot;&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Data Validation&lt;/h3&gt;&lt;p&gt;Generally, in a real application, we have to ensure the request data satisfies requirements. Micronaut has built-in Bean Validation support.&lt;/p&gt;&lt;p&gt;In the above CreatPostCommand class, add Bean Validation annotations on the fields.&lt;/p&gt;&lt;pre&gt;@Introspected&lt;br&gt;public record CreatePostCommand(@NotBlank String title, @NotBlank String content) {&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;You have to add @Introspected annotation to let micronaut plugin to preprocess bean validation annotations at compile time, and let Bean Validation works without any reflections APIs at runtime time.&lt;/p&gt;&lt;p&gt;In the PostController, add a @Validated on the class and a @Valid on the method argument.&lt;/p&gt;&lt;pre&gt;@Validated&lt;br&gt;public class PostController {&lt;br&gt;    public HttpResponse&amp;lt;Void&amp;gt; create(@Body @Valid CreatePostCommand dto) {...}&lt;br&gt;    //...&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Let’s try to create a post. Note, set the content field empty.&lt;/p&gt;&lt;pre&gt;curl -X POST -v  -H &amp;quot;Content-Type:application/json&amp;quot; &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt; -d &amp;quot;{\&amp;quot;title\&amp;quot;:\&amp;quot;test title\&amp;quot;,\&amp;quot;content\&amp;quot;:\&amp;quot;\&amp;quot;}&amp;quot;&lt;br&gt;&amp;gt; POST /posts HTTP/1.1&lt;br&gt;&amp;gt; Host: localhost:8080&lt;br&gt;&amp;gt; User-Agent: curl/7.55.1&lt;br&gt;&amp;gt; Accept: */*&lt;br&gt;&amp;gt; Content-Type:application/json&lt;br&gt;&amp;gt; Content-Length: 35&lt;br&gt;&amp;gt;&lt;br&gt;* upload completely sent off: 35 out of 35 bytes&lt;br&gt;&amp;lt; HTTP/1.1 400 Bad Request&lt;br&gt;&amp;lt; Content-Type: application/json&lt;br&gt;&amp;lt; date: Mon, 25 Oct 2021 09:23:22 GMT&lt;br&gt;&amp;lt; content-length: 237&lt;br&gt;&amp;lt; connection: keep-alive&lt;br&gt;&amp;lt;&lt;br&gt;{&lt;br&gt;  &amp;quot;message&amp;quot; : &amp;quot;Bad Request&amp;quot;,&lt;br&gt;  &amp;quot;_embedded&amp;quot; : {&lt;br&gt;    &amp;quot;errors&amp;quot; : [ {&lt;br&gt;      &amp;quot;message&amp;quot; : &amp;quot;dto.content: must not be blank&amp;quot;&lt;br&gt;    } ]&lt;br&gt;  },&lt;br&gt;  &amp;quot;_links&amp;quot; : {&lt;br&gt;    &amp;quot;self&amp;quot; : {&lt;br&gt;      &amp;quot;href&amp;quot; : &amp;quot;/posts&amp;quot;,&lt;br&gt;      &amp;quot;templated&amp;quot; : false&lt;br&gt;    }&lt;br&gt;  }&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Deleting a Post&lt;/h3&gt;&lt;p&gt;According to REST convention, to delete a single post, send a DELETE request on /posts/{id}, if it is successful, returns a 204 status. If the id is not existed, returns a 404 instead.&lt;/p&gt;&lt;p&gt;Add the following codes to the PostController.&lt;/p&gt;&lt;pre&gt;@Delete(uri = &amp;quot;/{id}&amp;quot;, produces = MediaType.APPLICATION_JSON)&lt;br&gt;@Transactional&lt;br&gt;public HttpResponse&amp;lt;?&amp;gt; deleteById(@PathVariable UUID id) {&lt;br&gt;    return posts.findById(id)&lt;br&gt;        .map(p -&amp;gt; {&lt;br&gt;            this.posts.delete(p);&lt;br&gt;            return HttpResponse.noContent();&lt;br&gt;        })&lt;br&gt;        .orElseThrow(() -&amp;gt; new PostNotFoundException(id));&lt;br&gt;    //.orElseGet(HttpResponse::notFound);&lt;br&gt;}&lt;/pre&gt;&lt;h3&gt;Processing Subresources&lt;/h3&gt;&lt;p&gt;In our application, the a Comment resource, it should be a subresource of Post resource when adding comments or fetching comments of a specific post, we can design comments resource like this.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;POST /posts/{id}/comments , add a Comment resource to a specific Post.&lt;/li&gt;&lt;li&gt;GET /posts/{id}/comments, get all comments of a certain Post which id value is the path variable id.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;// nested comments endpoints&lt;br&gt;@Get(uri = &amp;quot;/{id}/comments&amp;quot;, produces = MediaType.APPLICATION_JSON)&lt;br&gt;public HttpResponse&amp;lt;?&amp;gt; getCommentsByPostId(@PathVariable UUID id) {&lt;br&gt;    return posts.findById(id)&lt;br&gt;        .map(post -&amp;gt; {&lt;br&gt;            var comments = this.comments.findByPost(post);&lt;br&gt;            return ok(comments.stream().map(c -&amp;gt; new CommentDetailsDto(c.getId(), c.getContent(), c.getCreatedAt())));&lt;br&gt;        })&lt;br&gt;        .orElseThrow(() -&amp;gt; new PostNotFoundException(id));&lt;br&gt;    //.orElseGet(HttpResponse::notFound);&lt;br&gt;}&lt;/pre&gt;&lt;pre&gt;@io.micronaut.http.annotation.Post(uri = &amp;quot;/{id}/comments&amp;quot;, consumes = MediaType.APPLICATION_JSON)&lt;br&gt;@Transactional&lt;br&gt;public HttpResponse&amp;lt;?&amp;gt; create(@PathVariable UUID id, @Body @Valid CreateCommentCommand dto) {&lt;/pre&gt;&lt;pre&gt;    return posts.findById(id)&lt;br&gt;        .map(post -&amp;gt; {&lt;br&gt;            var data = Comment.builder().content(dto.content()).post(post).build();&lt;br&gt;            post.getComments().add(data);&lt;br&gt;            var saved = this.comments.save(data);&lt;br&gt;            return HttpResponse.created(URI.create(&amp;quot;/comments/&amp;quot; + saved.getId()));&lt;br&gt;        })&lt;br&gt;        .orElseThrow(() -&amp;gt; new PostNotFoundException(id));&lt;br&gt;    // .orElseGet(HttpResponse::notFound);&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;h3&gt;Integration Tests&lt;/h3&gt;&lt;p&gt;The following is an example of integration tests, it tries to test all APIs in an integration environment with a real database, and running on a live embedded server.&lt;/p&gt;&lt;pre&gt;@MicronautTest&lt;br&gt;@Slf4j&lt;br&gt;class IntegrationTests {&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    @Client(&amp;quot;/&amp;quot;)&lt;br&gt;    HttpClient client;&lt;/pre&gt;&lt;pre&gt;    @Inject&lt;br&gt;    EmbeddedApplication&amp;lt;?&amp;gt; application;&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    void testItWorks() {&lt;br&gt;        Assertions.assertTrue(application.isRunning());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    void testGetAllPosts() {&lt;br&gt;        var response = client.exchange(HttpRequest.GET(&amp;quot;/posts&amp;quot;), String.class);&lt;/pre&gt;&lt;pre&gt;        var bodyFlux = Flux.from(response).map(HttpResponse::body);&lt;br&gt;        StepVerifier.create(bodyFlux)&lt;br&gt;                .consumeNextWith(posts -&amp;gt; assertThat(JsonPath.from(posts).getInt(&amp;quot;totalSize&amp;quot;)).isGreaterThanOrEqualTo(2))&lt;br&gt;                .verifyComplete();&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br&gt;    public void testCrudFlow() {&lt;br&gt;        //create a new post&lt;br&gt;        var request = HttpRequest.POST(&amp;quot;/posts&amp;quot;, new CreatePostCommand(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;));&lt;br&gt;        var blockingHttpClient = client.toBlocking();&lt;br&gt;        var response = blockingHttpClient.exchange(request);&lt;br&gt;        assertThat(response.status().getCode()).isEqualTo(201);&lt;br&gt;        var savedUrl = response.getHeaders().get(&amp;quot;Location&amp;quot;);&lt;br&gt;        assertThat(savedUrl).isNotNull();&lt;br&gt;        log.debug(&amp;quot;saved post url: {}&amp;quot;, savedUrl);&lt;/pre&gt;&lt;pre&gt;        //get by id&lt;br&gt;        var getPostResponse = blockingHttpClient.exchange(savedUrl, Post.class);&lt;br&gt;        assertThat(getPostResponse.getStatus().getCode()).isEqualTo(200);&lt;/pre&gt;&lt;pre&gt;        // add comments&lt;br&gt;        var addCommentRequest = HttpRequest.POST(savedUrl + &amp;quot;/comments&amp;quot;, new CreateCommentCommand(&amp;quot;test content&amp;quot;));&lt;br&gt;        var addCommentResponse = blockingHttpClient.exchange(addCommentRequest);&lt;br&gt;        assertThat(addCommentResponse.getStatus().getCode()).isEqualTo(201);&lt;br&gt;        var savedCommentUrl = addCommentResponse.getHeaders().get(&amp;quot;Location&amp;quot;);&lt;br&gt;        assertThat(savedCommentUrl).isNotNull();&lt;/pre&gt;&lt;pre&gt;        // get all comments&lt;br&gt;        var getAllCommentsRequest = HttpRequest.GET(savedUrl + &amp;quot;/comments&amp;quot;);&lt;br&gt;        var getAllCommentsResponse = blockingHttpClient.exchange(getAllCommentsRequest, Argument.listOf(CommentDetailsDto.class));&lt;br&gt;        assertThat(getAllCommentsResponse.status().getCode()).isEqualTo(200);&lt;br&gt;        assertThat(getAllCommentsResponse.body().size()).isEqualTo(1);&lt;/pre&gt;&lt;pre&gt;        //delete by id&lt;br&gt;        var deletePostResponse = blockingHttpClient.exchange(HttpRequest.DELETE(savedUrl));&lt;br&gt;        assertThat(deletePostResponse.getStatus().getCode()).isEqualTo(204);&lt;/pre&gt;&lt;pre&gt;        //get by id again(404)&lt;br&gt;        var e = Assertions.assertThrows(HttpClientResponseException.class, () -&amp;gt;&lt;br&gt;                blockingHttpClient.exchange(HttpRequest.GET(savedUrl)));&lt;br&gt;        var getPostResponse2 = e.getResponse();&lt;br&gt;        assertThat(getPostResponse2.getStatus().getCode()).isEqualTo(404);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;In the testGetAllPosts test, we try to use reactive HttpClient APIs and use reactor-test&amp;#39;s StepVerifier to assert the data in a reactive data stream.&lt;/p&gt;&lt;p&gt;The second test mothed is verifying the whole flow of creating a post, add comments, fetching comments, and deleting the post.&lt;/p&gt;&lt;p&gt;In an API integration tests, test itself works as a Http client(through a HTTP Client library) to interact with the backend with defined APIs. Ideally you can use any HttpClient to test APIs, such as Java 11 HttpClient, OKHttp, etc. There are some examples in the example repository using RestAssured and Java 11 new HttpClient, check &lt;a href=&quot;https://github.com/hantsy/micronaut-sandbox/tree/master/post-service&quot;&gt;the source codes&lt;/a&gt; and explore them yourself.&lt;/p&gt;&lt;p&gt;The example codes are hosted on my GitHub, check &lt;a href=&quot;https://github.com/hantsy/micronaut-sandbox/tree/master/post-service&quot;&gt;hantsy/micronaut-sandbox#post-service&lt;/a&gt;.&lt;/p&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=98f4eb39211c&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/building-restful-apis-with-micronaut-98f4eb39211c&quot;&gt;Building Restful APIs with Micronaut&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">Similar to Spring Boot, Micronaut is a JVM based framework and designated for building Microservice and cloud native applications.Photo by Joey Huang on UnsplashUnlike Spring Boot, Micronaut process IOC at compile time and erases runtime reflection, so it is easier to build native image.Spring also started a Spring native project, but it is in the early stage.For developers that new to Micronaut, it is easy to develop your applications using Micronaut if you have some knowledge of Spring Boot. In this post, I will share my experience to create a simple Restful API application from scratch using Micronaut from a Spring developer view.Generating project skeletonSimilar to Spring Initializr, Micronaut provides an online service named Launch to help your generate a project skeleton.Open your browser, go to Micronaut Launch, you will see the following screen.In the Java version field, select the latest LTS version 17. Then click the Features button, add lombok, data hibernate jpa, assertj, postgres, testcontainers. Finally, hit the GENERATE PROJECT button to produce the project files into an archive for download.Extract the project files into disk, and import to your IDE.You can also create a Micronaut project using Micronaut CLI, check Micronaut Starter documentation.Exploring project structureLet’s have a look at the files in the project..├── build.gradle├── gradle│ └── wrapper│ ├── gradle-wrapper.jar│ └── gradle-wrapper.properties├── gradle.properties├── gradlew├── gradlew.bat├── micronaut-cli.yml├── settings.gradle└── src ├── main │ ├── java │ │ └── com │ │ └── example │ │ └── Application.java │ └── resources │ ├── application.yml │ └── logback.xml └── test ├── java │ └── com │ └── example │ └── DemoTest.java └── resources ├── application-test.yml └── logback-test.xmlBesides Gradle build scripts related resources, it is similar to the Spring Boot project structure.The Application is the entry class of the application.The src/main/resources/application.yml is the application configuration.The src/main/resources/logback.xml is logging configuration.The DemoTest is an example of using @MicronautTest.Under the src/test/resources folder, there are some config resources for test purpose.Let’s have a look at build.gradle.It uses com.github.johnrengelman.shadow to package the application into a jar archive. The micronaut plugin will process the dependency injection at compile time via Java Compiler Annotation Processors. This plugin also includes other tasks, such building application into Docker image and GraalVM native image.Declaring a BeanIn Micronaut, it used JSR330(aka @Inject) specification to annotate the injectable beans. JSR330 originally is lead by SpringSource(now VMware) and Google.Spring also has built-in JSR330 support, by default it is not activated. You should add inject artifact in your project dependencies to enable it.When a class is annotated with @Singleton means there is only one instance shared in the application scope, @Prototype will produce a new instance for every injection.Micronaut provides a @Factory to produces simple beans in groups, for example.@Factoryclass MyConfig{ @Singleton public Foo foo(){} @Singleton public Bar bar(){}}As described in former sections, Micronaut process IOC at compile time. When building the application, explore the project build/classes folder, you will find there are a lot of extra classes generated at compile time which names are start with a USD(“$”) symbol.Setup databaseOpen src/main/resources/application.yml, the datasources is configured when generating the project. Change the properties according to your environment.datasources: default: url: jdbc:postgresql://localhost:5432/blogdb driverClassName: org.postgresql.Driver username: user password: password schema-generate: CREATE_DROP dialect: POSTGRESjpa.default.properties.hibernate.hbm2ddl.auto: updateCreate a docker compose file to bootstrap Postgres in docker container.version: &amp;#39;3.7&amp;#39; # specify docker-compose versionservices: postgres: image: postgres ports: - &amp;quot;5432:5432&amp;quot; restart: always environment: POSTGRES_PASSWORD: password POSTGRES_DB: blogdb POSTGRES_USER: user volumes: - ./data:/var/lib/postgresql - ./pg-initdb.d:/docker-entrypoint-initdb.dStart up Postgres database.docker compose up postgresData Accessing with Micronaut DataWe added data-jpa feature when generating the project, which enables Micronaut data support. If you have experience of Spring Data JPA , it is easy to migrate to Micronaut Data.I have used a simple blog application in the former examples when demonstrating other frameworks. In this post, I will reuse the blog application concept.Basically it includes two JPA entities, Post and Comment, it is a OneToMany relation.@Getter@Setter@NoArgsConstructor@AllArgsConstructor@Builder@Entity@Table(name = &amp;quot;posts&amp;quot;)public class Post implements Serializable { @Id @GeneratedValue(generator = &amp;quot;uuid&amp;quot;) @GenericGenerator(name = &amp;quot;uuid&amp;quot;, strategy = &amp;quot;uuid2&amp;quot;) UUID id; String title; String content; @Builder.Default Status status = Status.DRAFT; @Builder.Default LocalDateTime createdAt = LocalDateTime.now(); @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true, mappedBy = &amp;quot;post&amp;quot;) @Builder.Default @OrderColumn(name = &amp;quot;comment_idx&amp;quot;) List&amp;lt;Comment&amp;gt; comments = new ArrayList&amp;lt;&amp;gt;(); @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Post post = (Post) o; return getTitle().equals(post.getTitle()); } @Override public int hashCode() { return Objects.hash(getTitle()); } @Override public String toString() { return &amp;quot;Post{&amp;quot; + &amp;quot;id=&amp;quot; + id + &amp;quot;, title=&amp;#39;&amp;quot; + title + &amp;#39;\&amp;#39;&amp;#39; + &amp;quot;, content=&amp;#39;&amp;quot; + content + &amp;#39;\&amp;#39;&amp;#39; + &amp;quot;, status=&amp;quot; + status + &amp;quot;, createdAt=&amp;quot; + createdAt + &amp;#39;}&amp;#39;; }}// Comment entity @Getter@Setter@NoArgsConstructor@AllArgsConstructor@Builder@Entity@Table(name = &amp;quot;comments&amp;quot;)public class Comment implements Serializable { @Id @GeneratedValue(generator = &amp;quot;uuid&amp;quot;) @GenericGenerator(name = &amp;quot;uuid&amp;quot;, strategy = &amp;quot;uuid2&amp;quot;) private UUID id; @ManyToOne @JoinColumn(name = &amp;quot;post_id&amp;quot;) private Post post; private String content; @Builder.Default @Column(name = &amp;quot;created_at&amp;quot;) private LocalDateTime createdAt = LocalDateTime.now(); @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Comment comment = (Comment) o; return getContent().equals(comment.getContent()); } @Override public int hashCode() { return Objects.hash(getContent()); } @Override public String toString() { return &amp;quot;Comment{&amp;quot; + &amp;quot;id=&amp;quot; + id + &amp;quot;, content=&amp;#39;&amp;quot; + content + &amp;#39;\&amp;#39;&amp;#39; + &amp;quot;, createdAt=&amp;quot; + createdAt + &amp;#39;}&amp;#39;; }}They are standard JPA @Entity classes.An JPA entity class should be annotated with an @Entity annotation, and includes a @Id field to identify this entity and a none-arguments constructor. Here we use Lombok to generate setters and getters, and constructors at compile time. We use IDE to generate equals and hasCode according to the business requirements.@Repositorypublic interface PostRepository extends JpaRepository&amp;lt;Post, UUID&amp;gt;{}@Repositorypublic interface CommentRepository extends JpaRepository&amp;lt;Comment, UUID&amp;gt; { List&amp;lt;Comment&amp;gt; findByPost(Post post);}Add a DataInitializer bean to initialize some sample data.@Singleton@RequiredArgsConstructor@Slf4jpublic class DataInitializer implements ApplicationEventListener&amp;lt;ApplicationStartupEvent&amp;gt; { private final PostRepository posts; private final TransactionOperations&amp;lt;?&amp;gt; tx; @Override public void onApplicationEvent(ApplicationStartupEvent event) { log.info(&amp;quot;initializing sample data...&amp;quot;); var data = List.of(Post.builder().title(&amp;quot;Getting started wit Micronaut&amp;quot;).content(&amp;quot;test&amp;quot;).build(), Post.builder().title(&amp;quot;Getting started wit Micronaut: part 2&amp;quot;).content(&amp;quot;test&amp;quot;).build()); tx.executeWrite(status -&amp;gt; { this.posts.deleteAll(); this.posts.saveAll(data); return null; }); tx.executeRead(status -&amp;gt; { this.posts.findAll().forEach(p -&amp;gt; log.info(&amp;quot;saved post: {}&amp;quot;, p)); return null; }); log.info(&amp;quot;data initialization is done...&amp;quot;); }}Write a test to verify functionality of PostRepository. Similar to the @SpringBootTest, Micronaut provides a @MicronautTest.@MicronautTest(application = Application.class, startApplication = false)class PostRepositoryTest { @Inject PostRepository posts; @PersistenceContext EntityManager entityManager; @Test void testCreatePost() { var entity = Post.builder().title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build(); this.entityManager.persist(entity); assertThat(entity.getId()).isNotNull(); assertTrue(posts.findById(entity.getId()).isPresent()); }}Here we set startApplication = false, it does not start the embedded server to host the application, to test against the database, we do not need a running applicationWe have add testcontainers feature, it will configure a Postgres for test automatically. Check the testcontainers config in the src/test/resources/application-test.yml.datasources: default: url: jdbc:tc:postgresql:12:///postgres driverClassName: org.testcontainers.jdbc.ContainerDatabaseDriverWhen there is a tc as database host name, testcontainer will start up a Postgres database automaticially.Exposing Restful APIsSimilar to Spring WebMVC, in Micronaut, we can use a controller to expose Restful APIs.@Controller(&amp;quot;/posts&amp;quot;)@RequiredArgsConstructor(onConstructor_ = {@Inject})@Validatedpublic class PostController { private final PostRepository posts; private final CommentRepository comments; @Get(uri = &amp;quot;/&amp;quot;, produces = MediaType.APPLICATION_JSON) public HttpResponse&amp;lt;List&amp;lt;PostSummaryDto&amp;gt;&amp;gt; getAll() { var body = posts.findAll() .stream() .map(p -&amp;gt; new PostSummaryDto(p.getId(), p.getTitle(), p.getCreatedAt())) .toList(); return ok(body); } @Get(uri = &amp;quot;/{id}&amp;quot;, produces = MediaType.APPLICATION_JSON) public HttpResponse&amp;lt;?&amp;gt; getById(@PathVariable UUID id) { return posts.findById(id) .map(p -&amp;gt; ok(new PostDetailsDto(p.getId(), p.getTitle(), p.getContent(), p.getStatus(), p.getCreatedAt()))) //.orElseThrow(() -&amp;gt; new PostNotFoundException(id)); .orElseGet(HttpResponse::notFound); }}A controller is annotated with @Controller, you can set a base uri that can be applied on all methods. The @Get, @Post,@Put, @Delete is mapped to handle varied HTTP methods, it is similar to the Spring&amp;#39;s @GetMapping, @PostMapping, etc. You can set media types using consumes or produces attributes in these annotations to limit the request and response content type, or use standalone annotations @Consumes and @Produces to set up the media types.Start up the application via Gradle command../gradlew runDo not forget to start up Postgres firstly.Use curl to test the /posts endpoint.curl http://localhost:8080/posts[ { &amp;quot;id&amp;quot; : &amp;quot;b6fb90ab-2719-498e-a5fd-93d0c7669fdf&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-14T22:00:28.80933&amp;quot;}, { &amp;quot;id&amp;quot; : &amp;quot;8c6147ea-8de4-473f-b97d-e211c8e43bac&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut: part 2&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-14T22:00:28.80933&amp;quot;} ]curl http://localhost:8080/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf { &amp;quot;id&amp;quot; : &amp;quot;b6fb90ab-2719-498e-a5fd-93d0c7669fdf&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;test&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-14T22:00:28.80933&amp;quot;}Micronaut CLI provides commands to generate controller, bean, etc. Run mn --help to get all available commands.Write a test for the PostController.@MicronautTest(environments = Environment.TEST)public class PostControllerTest { @Inject @Client(&amp;quot;/&amp;quot;) HttpClient client; @Inject PostRepository posts; @Inject CommentRepository comments; @MockBean(PostRepository.class) PostRepository posts() { return mock(PostRepository.class); } @MockBean(CommentRepository.class) CommentRepository comments() { return mock(CommentRepository.class); } @Test @DisplayName(&amp;quot;test GET &amp;#39;/posts&amp;#39; endpoint&amp;quot;) public void testGetAllPosts() throws Exception { when(this.posts.findAll()).thenReturn( List.of(Post.builder().id(UUID.randomUUID()).title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build()) ); var response = client.toBlocking().exchange(&amp;quot;/posts&amp;quot;, PostSummaryDto[].class); assertEquals(HttpStatus.OK, response.status()); var body = response.body(); assertThat(body.length).isEqualTo(1); assertThat(body[0].title()).isEqualTo(&amp;quot;test title&amp;quot;); verify(this.posts, times(1)).findAll(); verifyNoMoreInteractions(this.posts); } @Test @DisplayName(&amp;quot;test GET &amp;#39;/posts/{id}&amp;#39; endpoint&amp;quot;) public void testGetSinglePost() throws Exception { when(this.posts.findById(any(UUID.class))).thenReturn( Optional.ofNullable(Post.builder().id(UUID.randomUUID()).title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build()) ); var request = HttpRequest.GET(UriBuilder.of(&amp;quot;/posts/{id}&amp;quot;).expand(Map.of(&amp;quot;id&amp;quot;, UUID.randomUUID()))); var response = client.toBlocking().exchange(request, PostDetailsDto.class); assertEquals(HttpStatus.OK, response.status()); var body = response.body(); assertThat(body.title()).isEqualTo(&amp;quot;test title&amp;quot;); verify(this.posts, times(1)).findById(any(UUID.class)); verifyNoMoreInteractions(this.posts); } @Test @DisplayName(&amp;quot;test GET &amp;#39;/posts/{id}&amp;#39; endpoint that does not exist&amp;quot;) public void testGetSinglePost_notFound() throws Exception { when(this.posts.findById(any(UUID.class))).thenReturn(Optional.ofNullable(null)); var request = HttpRequest.GET(UriBuilder.of(&amp;quot;/posts/{id}&amp;quot;).expand(Map.of(&amp;quot;id&amp;quot;, UUID.randomUUID()))); var exception = assertThrows(HttpClientResponseException.class, () -&amp;gt; client.toBlocking().exchange(request, PostDetailsDto.class)); assertEquals(HttpStatus.NOT_FOUND, exception.getStatus()); verify(this.posts, times(1)).findById(any(UUID.class)); verifyNoMoreInteractions(this.posts); }}In this test, we use Mockito to mock all dependent beans(PostRepository and CommentRepository) in the PostController. To mock beans in the test context, Micronaut provides a MockBean to produce a mocked instance to replace the real beans.Similar to Spring’s RestTemplate or WebClient, Micronaut provides a HttpClient to send request to a certain URI, by default it uses the ReactiveStreams compatible API, If you are stick on the traditional blocking API, call the toBlocking() method to switch to use it.The exchange method will return a HTTP response object, and the retrieve method returns the response body directly.Note: When using blocking APIs, if it returns a failure HTTP response, such as return a 4xx status code, it will throws a HttpClientResponseException instead. In contrast, in ReactiveStreams APIs, it will emit the exception to error channel.Exception HandlingIn the above PostController, if there is no posts found for the given post id, it returns a 404 HTTP status directly. In a real world application, we can use an exception to envelope the exception case. Like Spring WebMVC, Micronaut also provides exception handling mechanism.For example, create an PostNotFoundException to stand for the case post was not found by id.Create a PostNotFoundException class.public class PostNotFoundException extends RuntimeException { public PostNotFoundException(UUID id) { super(&amp;quot;Post[id=&amp;quot; + id + &amp;quot;] was not found&amp;quot;); }}In the PostController, throw the exception.@Get(uri = &amp;quot;/{id}&amp;quot;, produces = MediaType.APPLICATION_JSON)public HttpResponse&amp;lt;?&amp;gt; getById(@PathVariable UUID id) { return posts.findById(id) .map(p -&amp;gt; ok(new PostDetailsDto(p.getId(), p.getTitle(), p.getContent(), p.getStatus(), p.getCreatedAt()))) .orElseThrow(() -&amp;gt; new PostNotFoundException(id));}Add a PostNotFoundExceptionHandler to handle PostNotFoundException.@Produces@Singleton@Requires(classes = { PostNotFoundException.class})@RequiredArgsConstructorpublic class PostNotFoundExceptionHandler implements ExceptionHandler&amp;lt;PostNotFoundException, HttpResponse&amp;lt;?&amp;gt;&amp;gt; { private final ErrorResponseProcessor&amp;lt;?&amp;gt; errorResponseProcessor; @Override public HttpResponse&amp;lt;?&amp;gt; handle(HttpRequest request, PostNotFoundException exception) { return errorResponseProcessor.processResponse( ErrorContext.builder(request) .cause(exception) .errorMessage(exception.getMessage()) .build(), HttpResponse.notFound() ); }}Open your terminal, use curl to test the /posts/{id} endpoint with an none-existing id.# curl http://localhost:8080/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf -v&amp;gt; GET /posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf HTTP/1.1&amp;gt; Host: localhost:8080&amp;gt; User-Agent: curl/7.55.1&amp;gt; Accept: */*&amp;gt;&amp;lt; HTTP/1.1 404 Not Found&amp;lt; Content-Type: application/json&amp;lt; date: Mon, 25 Oct 2021 07:02:01 GMT&amp;lt; content-length: 301&amp;lt; connection: keep-alive&amp;lt;{ &amp;quot;message&amp;quot; : &amp;quot;Not Found&amp;quot;, &amp;quot;_links&amp;quot; : { &amp;quot;self&amp;quot; : { &amp;quot;href&amp;quot; : &amp;quot;/posts/b6fb90ab-2719-498e-a5fd-93d0c7669fdf&amp;quot;, &amp;quot;templated&amp;quot; : false } }, &amp;quot;_embedded&amp;quot; : { &amp;quot;errors&amp;quot; : [ { &amp;quot;message&amp;quot; : &amp;quot;Post[id=b6fb90ab-2719-498e-a5fd-93d0c7669fdf] was not found&amp;quot; } ] }}PaginationSimilar to Spring Data, Micronaut Data provides pagination for long query result, the findAll accepts a Pageable parameter, and returns a Page result. Micronaut Data also includes a Specification to adopt JPA Criteria APIs for type safe query.Change PostRepository , add JpaSpecificationExecutor&amp;lt;Post&amp;gt; to extends list.@Repositorypublic interface PostRepository extends JpaRepository&amp;lt;Post, UUID&amp;gt;, JpaSpecificationExecutor&amp;lt;Post&amp;gt; {}Create a specific PostSpecifications to group all specifications for querying posts. Currently only add one for query by keyword and status.public class PostSpecifications { private PostSpecifications(){ // forbid to instantiate } public static Specification&amp;lt;Post&amp;gt; filterByKeywordAndStatus( final String keyword, final Status status ) { return (Root&amp;lt;Post&amp;gt; root, CriteriaQuery&amp;lt;?&amp;gt; query, CriteriaBuilder cb) -&amp;gt; { List&amp;lt;Predicate&amp;gt; predicates = new ArrayList&amp;lt;&amp;gt;(); if (StringUtils.hasText(keyword)) { predicates.add( cb.or( cb.like(root.get(Post_.title), &amp;quot;%&amp;quot; + keyword + &amp;quot;%&amp;quot;), cb.like(root.get(Post_.content), &amp;quot;%&amp;quot; + keyword + &amp;quot;%&amp;quot;) ) ); } if (status != null) { predicates.add(cb.equal(root.get(Post_.status), status)); } return cb.and(predicates.toArray(new Predicate[0])); }; }}Change the getAll method of PostController to the following.@Get(uri = &amp;quot;/&amp;quot;, produces = MediaType.APPLICATION_JSON)@Transactionalpublic HttpResponse&amp;lt;Page&amp;lt;PostSummaryDto&amp;gt;&amp;gt; getAll(@QueryValue(defaultValue = &amp;quot;&amp;quot;) String q, @QueryValue(defaultValue = &amp;quot;&amp;quot;) String status, @QueryValue(defaultValue = &amp;quot;0&amp;quot;) int page, @QueryValue(defaultValue = &amp;quot;10&amp;quot;) int size) { var pageable = Pageable.from(page, size, Sort.of(Sort.Order.desc(&amp;quot;createdAt&amp;quot;))); var postStatus = StringUtils.hasText(status) ? com.example.domain.Status.valueOf(status) : null; var data = this.posts.findAll(PostSpecifications.filterByKeywordAndStatus(q, postStatus), pageable); var body = data.map(p -&amp;gt; new PostSummaryDto(p.getId(), p.getTitle(), p.getCreatedAt())); return ok(body);}All the query parameters are optional.Let’s use curl to test the /posts endpiont.# curl http://localhost:8080/posts{ &amp;quot;content&amp;quot; : [ { &amp;quot;id&amp;quot; : &amp;quot;c9ec963d-2df5-4d65-bfbe-5a0d4cb14ca6&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:35:03.732951&amp;quot; }, { &amp;quot;id&amp;quot; : &amp;quot;0a79185c-5981-4301-86d1-c266b26b4980&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut: part 2&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:35:03.732951&amp;quot; } ], &amp;quot;pageable&amp;quot; : { &amp;quot;number&amp;quot; : 0, &amp;quot;sort&amp;quot; : { &amp;quot;orderBy&amp;quot; : [ { &amp;quot;property&amp;quot; : &amp;quot;createdAt&amp;quot;, &amp;quot;direction&amp;quot; : &amp;quot;DESC&amp;quot;, &amp;quot;ignoreCase&amp;quot; : false, &amp;quot;ascending&amp;quot; : false } ], &amp;quot;sorted&amp;quot; : true }, &amp;quot;size&amp;quot; : 10, &amp;quot;offset&amp;quot; : 0, &amp;quot;sorted&amp;quot; : true, &amp;quot;unpaged&amp;quot; : false }, &amp;quot;totalSize&amp;quot; : 2, &amp;quot;totalPages&amp;quot; : 1, &amp;quot;empty&amp;quot; : false, &amp;quot;size&amp;quot; : 10, &amp;quot;offset&amp;quot; : 0, &amp;quot;numberOfElements&amp;quot; : 2, &amp;quot;pageNumber&amp;quot; : 0}Customizing JsonSerializerThe Page object rendered result is a little tedious, most of case, we do not need all these fields, we can customize it via Jackson JsonSerializer.@Singletonpublic class PageJsonSerializer extends JsonSerializer&amp;lt;Page&amp;lt;?&amp;gt;&amp;gt; { @Override public void serialize(Page&amp;lt;?&amp;gt; value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeStartObject(); gen.writeNumberField(&amp;quot;pageNumber&amp;quot;, value.getPageNumber()); if (value.getNumberOfElements() != value.getSize()) { //only display it in the last page when number of elements is not equal to page size. gen.writeNumberField(&amp;quot;numberOfElements&amp;quot;, value.getNumberOfElements()); } gen.writeNumberField(&amp;quot;size&amp;quot;, value.getSize()); gen.writeNumberField(&amp;quot;totalPages&amp;quot;, value.getTotalPages()); gen.writeNumberField(&amp;quot;totalSize&amp;quot;, value.getTotalSize()); gen.writeObjectField(&amp;quot;content&amp;quot;, value.getContent()); gen.writeEndObject(); }}Run the application again, and hint /posts endpoint.# curl http://localhost:8080/posts{ &amp;quot;pageNumber&amp;quot; : 0, &amp;quot;numberOfElements&amp;quot; : 2, &amp;quot;size&amp;quot; : 10, &amp;quot;totalPages&amp;quot; : 1, &amp;quot;totalSize&amp;quot; : 2, &amp;quot;content&amp;quot; : [ { &amp;quot;id&amp;quot; : &amp;quot;53fb77d5-4159-4a80-bab9-c76d9a535b36&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:47:05.545594&amp;quot; }, { &amp;quot;id&amp;quot; : &amp;quot;aa02fd49-0c24-4f12-b204-2e48213c7a1e&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Getting started wit Micronaut: part 2&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T16:47:05.545594&amp;quot; } ]}Modify the testing codes to verify changes.class PostControllerTest{ //... @Test @DisplayName(&amp;quot;test GET &amp;#39;/posts&amp;#39; endpoint&amp;quot;) public void testGetAllPosts() throws Exception { var content = List.of(Post.builder().id(UUID.randomUUID()).title(&amp;quot;test title&amp;quot;).content(&amp;quot;test content&amp;quot;).build()); when(this.posts.findAll(isA(Specification.class), isA(Pageable.class))).thenReturn( Page.of(content, Pageable.from(0, 20), 1) ); var request = HttpRequest.GET(&amp;quot;/posts&amp;quot;); var response = client.toBlocking().exchange(request, String.class); assertEquals(HttpStatus.OK, response.status()); var body = response.body(); assertThat(JsonPath.from(body).getInt(&amp;quot;totalSize&amp;quot;)).isEqualTo(1); assertThat(JsonPath.from(body).getString(&amp;quot;content[0].title&amp;quot;)).isEqualTo(&amp;quot;test title&amp;quot;); verify(this.posts, times(1)).findAll(isA(Specification.class), isA(Pageable.class)); verifyNoMoreInteractions(this.posts); }}Creating PostsWe have discussed how to query posts by key word and get single post by id, in this section, we will focus on creating a new post.According the REST convention, we will use a POST HTTP method to send a request on endpoint /posts and accept JSON data as request body.@io.micronaut.http.annotation.Post(uri = &amp;quot;/&amp;quot;, consumes = MediaType.APPLICATION_JSON)@Transactionalpublic HttpResponse&amp;lt;Void&amp;gt; create(@Body CreatePostCommand dto) { var data = Post.builder().title(dto.title()).content(dto.content()).build(); var saved = this.posts.save(data); return HttpResponse.created(URI.create(&amp;quot;/posts/&amp;quot; + saved.getId()));}The request body is deserialized as a POJO by built-in Jackson JsonDesearilizers, it is annotated with a @Body annotation to indicate which target class it will be desearilized to. After the post data is saved, set the response header Location to the URI of accessing the new post.Run the application, and try to add a post via curl, and then access the newly created post.# curl -X POST -v -H &amp;quot;Content-Type:application/json&amp;quot; http://localhost:8080/posts -d &amp;quot;{\&amp;quot;title\&amp;quot;:\&amp;quot;test title\&amp;quot;,\&amp;quot;content\&amp;quot;:\&amp;quot;test content\&amp;quot;}&amp;quot;&amp;gt; POST /posts HTTP/1.1&amp;gt; Host: localhost:8080&amp;gt; User-Agent: curl/7.55.1&amp;gt; Accept: */*&amp;gt; Content-Type:application/json&amp;gt; Content-Length: 47&amp;gt;* upload completely sent off: 47 out of 47 bytes&amp;lt; HTTP/1.1 201 Created&amp;lt; location: /posts/7db15639-62e3-4d3e-9cf4-f54413502ea6&amp;lt; date: Mon, 25 Oct 2021 09:07:40 GMT&amp;lt; connection: keep-alive&amp;lt; transfer-encoding: chunked&amp;lt;# curl http://localhost:8080/posts/7db15639-62e3-4d3e-9cf4-f54413502ea6{ &amp;quot;id&amp;quot; : &amp;quot;7db15639-62e3-4d3e-9cf4-f54413502ea6&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;test title&amp;quot;, &amp;quot;content&amp;quot; : &amp;quot;test content&amp;quot;, &amp;quot;status&amp;quot; : &amp;quot;DRAFT&amp;quot;, &amp;quot;createdAt&amp;quot; : &amp;quot;2021-10-25T17:07:40.87621&amp;quot;}Data ValidationGenerally, in a real application, we have to ensure the request data satisfies requirements. Micronaut has built-in Bean Validation support.In the above CreatPostCommand class, add Bean Validation annotations on the fields.@Introspectedpublic record CreatePostCommand(@NotBlank String title, @NotBlank String content) {}You have to add @Introspected annotation to let micronaut plugin to preprocess bean validation annotations at compile time, and let Bean Validation works without any reflections APIs at runtime time.In the PostController, add a @Validated on the class and a @Valid on the method argument.@Validatedpublic class PostController { public HttpResponse&amp;lt;Void&amp;gt; create(@Body @Valid CreatePostCommand dto) {...} //...}Let’s try to create a post. Note, set the content field empty.curl -X POST -v -H &amp;quot;Content-Type:application/json&amp;quot; http://localhost:8080/posts -d &amp;quot;{\&amp;quot;title\&amp;quot;:\&amp;quot;test title\&amp;quot;,\&amp;quot;content\&amp;quot;:\&amp;quot;\&amp;quot;}&amp;quot;&amp;gt; POST /posts HTTP/1.1&amp;gt; Host: localhost:8080&amp;gt; User-Agent: curl/7.55.1&amp;gt; Accept: */*&amp;gt; Content-Type:application/json&amp;gt; Content-Length: 35&amp;gt;* upload completely sent off: 35 out of 35 bytes&amp;lt; HTTP/1.1 400 Bad Request&amp;lt; Content-Type: application/json&amp;lt; date: Mon, 25 Oct 2021 09:23:22 GMT&amp;lt; content-length: 237&amp;lt; connection: keep-alive&amp;lt;{ &amp;quot;message&amp;quot; : &amp;quot;Bad Request&amp;quot;, &amp;quot;_embedded&amp;quot; : { &amp;quot;errors&amp;quot; : [ { &amp;quot;message&amp;quot; : &amp;quot;dto.content: must not be blank&amp;quot; } ] }, &amp;quot;_links&amp;quot; : { &amp;quot;self&amp;quot; : { &amp;quot;href&amp;quot; : &amp;quot;/posts&amp;quot;, &amp;quot;templated&amp;quot; : false } }}Deleting a PostAccording to REST convention, to delete a single post, send a DELETE request on /posts/{id}, if it is successful, returns a 204 status. If the id is not existed, returns a 404 instead.Add the following codes to the PostController.@Delete(uri = &amp;quot;/{id}&amp;quot;, produces = MediaType.APPLICATION_JSON)@Transactionalpublic HttpResponse&amp;lt;?&amp;gt; deleteById(@PathVariable UUID id) { return posts.findById(id) .map(p -&amp;gt; { this.posts.delete(p); return HttpResponse.noContent(); }) .orElseThrow(() -&amp;gt; new PostNotFoundException(id)); //.orElseGet(HttpResponse::notFound);}Processing SubresourcesIn our application, the a Comment resource, it should be a subresource of Post resource when adding comments or fetching comments of a specific post, we can design comments resource like this.POST /posts/{id}/comments , add a Comment resource to a specific Post.GET /posts/{id}/comments, get all comments of a certain Post which id value is the path variable id.// nested comments endpoints@Get(uri = &amp;quot;/{id}/comments&amp;quot;, produces = MediaType.APPLICATION_JSON)public HttpResponse&amp;lt;?&amp;gt; getCommentsByPostId(@PathVariable UUID id) { return posts.findById(id) .map(post -&amp;gt; { var comments = this.comments.findByPost(post); return ok(comments.stream().map(c -&amp;gt; new CommentDetailsDto(c.getId(), c.getContent(), c.getCreatedAt()))); }) .orElseThrow(() -&amp;gt; new PostNotFoundException(id)); //.orElseGet(HttpResponse::notFound);}@io.micronaut.http.annotation.Post(uri = &amp;quot;/{id}/comments&amp;quot;, consumes = MediaType.APPLICATION_JSON)@Transactionalpublic HttpResponse&amp;lt;?&amp;gt; create(@PathVariable UUID id, @Body @Valid CreateCommentCommand dto) { return posts.findById(id) .map(post -&amp;gt; { var data = Comment.builder().content(dto.content()).post(post).build(); post.getComments().add(data); var saved = this.comments.save(data); return HttpResponse.created(URI.create(&amp;quot;/comments/&amp;quot; + saved.getId())); }) .orElseThrow(() -&amp;gt; new PostNotFoundException(id)); // .orElseGet(HttpResponse::notFound);}Integration TestsThe following is an example of integration tests, it tries to test all APIs in an integration environment with a real database, and running on a live embedded server.@MicronautTest@Slf4jclass IntegrationTests { @Inject @Client(&amp;quot;/&amp;quot;) HttpClient client; @Inject EmbeddedApplication&amp;lt;?&amp;gt; application; @Test void testItWorks() { Assertions.assertTrue(application.isRunning()); } @Test void testGetAllPosts() { var response = client.exchange(HttpRequest.GET(&amp;quot;/posts&amp;quot;), String.class); var bodyFlux = Flux.from(response).map(HttpResponse::body); StepVerifier.create(bodyFlux) .consumeNextWith(posts -&amp;gt; assertThat(JsonPath.from(posts).getInt(&amp;quot;totalSize&amp;quot;)).isGreaterThanOrEqualTo(2)) .verifyComplete(); } @Test public void testCrudFlow() { //create a new post var request = HttpRequest.POST(&amp;quot;/posts&amp;quot;, new CreatePostCommand(&amp;quot;test title&amp;quot;, &amp;quot;test content&amp;quot;)); var blockingHttpClient = client.toBlocking(); var response = blockingHttpClient.exchange(request); assertThat(response.status().getCode()).isEqualTo(201); var savedUrl = response.getHeaders().get(&amp;quot;Location&amp;quot;); assertThat(savedUrl).isNotNull(); log.debug(&amp;quot;saved post url: {}&amp;quot;, savedUrl); //get by id var getPostResponse = blockingHttpClient.exchange(savedUrl, Post.class); assertThat(getPostResponse.getStatus().getCode()).isEqualTo(200); // add comments var addCommentRequest = HttpRequest.POST(savedUrl + &amp;quot;/comments&amp;quot;, new CreateCommentCommand(&amp;quot;test content&amp;quot;)); var addCommentResponse = blockingHttpClient.exchange(addCommentRequest); assertThat(addCommentResponse.getStatus().getCode()).isEqualTo(201); var savedCommentUrl = addCommentResponse.getHeaders().get(&amp;quot;Location&amp;quot;); assertThat(savedCommentUrl).isNotNull(); // get all comments var getAllCommentsRequest = HttpRequest.GET(savedUrl + &amp;quot;/comments&amp;quot;); var getAllCommentsResponse = blockingHttpClient.exchange(getAllCommentsRequest, Argument.listOf(CommentDetailsDto.class)); assertThat(getAllCommentsResponse.status().getCode()).isEqualTo(200); assertThat(getAllCommentsResponse.body().size()).isEqualTo(1); //delete by id var deletePostResponse = blockingHttpClient.exchange(HttpRequest.DELETE(savedUrl)); assertThat(deletePostResponse.getStatus().getCode()).isEqualTo(204); //get by id again(404) var e = Assertions.assertThrows(HttpClientResponseException.class, () -&amp;gt; blockingHttpClient.exchange(HttpRequest.GET(savedUrl))); var getPostResponse2 = e.getResponse(); assertThat(getPostResponse2.getStatus().getCode()).isEqualTo(404); }}In the testGetAllPosts test, we try to use reactive HttpClient APIs and use reactor-test&amp;#39;s StepVerifier to assert the data in a reactive data stream.The second test mothed is verifying the whole flow of creating a post, add comments, fetching comments, and deleting the post.In an API integration tests, test itself works as a Http client(through a HTTP Client library) to interact with the backend with defined APIs. Ideally you can use any HttpClient to test APIs, such as Java 11 HttpClient, OKHttp, etc. There are some examples in the example repository using RestAssured and Java 11 new HttpClient, check the source codes and explore them yourself.The example codes are hosted on my GitHub, check hantsy/micronaut-sandbox#post-service.Building Restful APIs with Micronaut was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry><entry><title type="html">Integrating Hibernate Reactive with Spring</title><link href="/blog/2021/integrating-hibernate-reactive-with-spring/" rel="alternate" type="text/html" title="Integrating Hibernate Reactive with Spring" /><published>2021-08-27T00:00:00+00:00</published><updated>2021-08-27T00:00:00+00:00</updated><id>/blog/2021/integrating-hibernate-reactive-with-spring</id><content type="html" xml:base="/blog/2021/integrating-hibernate-reactive-with-spring/">&lt;p&gt;Hibernate started a subproject — Hibernate Reactive for Reactive Streams support, but at the moment when I wrote this post, Spring still did not embrace Hibernate Reactive. The good news is the integration work is not complex. In this post, we will attempt to integrate the latest Hibernate Reactive with Spring framework.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*n4q8pWVkhuvNGMID3AOKHw.jpeg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@qriusv?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Vivek Kumar&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/china-landscape?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;In the former post &lt;a href=&quot;https://itnext.io/integrating-vertx-application-with-spring-framework-fb8fca81a357&quot;&gt;Integrating Vertx with Spring framework&lt;/a&gt; and &lt;a href=&quot;https://itnext.io/building-a-vertx-application-with-smallrye-mutiny-bindings-spring-and-hibernate-reactive-5cf10b57983a&quot;&gt;the further post&lt;/a&gt; , we have integrated Hibernate Reactive with Spring IOC container, but in those the posts, the web handling is done by Vertx Web. In this post, we will use the existing Spring WebFlux instead.&lt;/p&gt;&lt;p&gt;Open your browser and navigate to &lt;a href=&quot;https://start.spring.io&quot;&gt;https://start.spring.io&lt;/a&gt;, and generate a Spring project skeleton with the following dependencies,&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;WebFlux&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Lombok&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Extract the downloaded files into disc, and import the project into your IDE.&lt;/p&gt;&lt;p&gt;Open the project &lt;em&gt;pom.xml&lt;/em&gt; file, add the following dependencies.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;io.vertx&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;vertx-pg-client&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${vertx-pg-client.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.hibernate.reactive&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;hibernate-reactive-core&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${hibernate-reactive.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;hibernate-jpamodelgen&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;In the above the codes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The vertx-pg-client is the Postgres reactive driver which is required by Hibernate Reactive.&lt;/li&gt;&lt;li&gt;The hibernate-reactive-core is the core dependency of Hibernate Reactive.&lt;/li&gt;&lt;li&gt;Similar to the general Hibernate/JPA support, hibernate-jpamodelgen is used to generate entity metadata classes from the @Entity classes.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add a &lt;em&gt;persistence.xml&lt;/em&gt; to &lt;em&gt;src/main/resources/META-INF&lt;/em&gt; folder.&lt;/p&gt;&lt;pre&gt;&amp;lt;persistence xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/persistence&amp;quot;&lt;br&gt;             xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;br&gt;             xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd&amp;quot;&lt;br&gt;             version=&amp;quot;2.2&amp;quot;&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;persistence-unit name=&amp;quot;blogPU&amp;quot;&amp;gt;&lt;br&gt;        &amp;lt;provider&amp;gt;org.hibernate.reactive.provider.ReactivePersistenceProvider&amp;lt;/provider&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;class&amp;gt;com.example.demo.Post&amp;lt;/class&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;properties&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- PostgreSQL --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;javax.persistence.jdbc.url&amp;quot;&lt;br&gt;                      value=&amp;quot;jdbc:postgresql://localhost:5432/blogdb&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- Credentials --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;javax.persistence.jdbc.user&amp;quot;&lt;br&gt;                      value=&amp;quot;user&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;javax.persistence.jdbc.password&amp;quot;&lt;br&gt;                      value=&amp;quot;password&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- The Vert.x SQL Client connection pool size --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.connection.pool_size&amp;quot;&lt;br&gt;                      value=&amp;quot;10&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- Automatic schema export --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;javax.persistence.schema-generation.database.action&amp;quot;&lt;br&gt;                      value=&amp;quot;drop-and-create&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;            &amp;lt;!-- SQL statement logging --&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;br&gt;            &amp;lt;property name=&amp;quot;hibernate.highlight_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;pre&gt;        &amp;lt;/properties&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;lt;/persistence-unit&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;/persistence&amp;gt;&lt;/pre&gt;&lt;p&gt;Note the provider must use the ReactivePersistenceProvider class which is provided in the new Hibernate Reactive. And you have to add all your entity classes in this &lt;em&gt;persistence.xml&lt;/em&gt; file.&lt;/p&gt;&lt;p&gt;Then declare a Mutiny.SessionFactory bean. The blogPU is the persistence unit name configured in the &lt;em&gt;persistence.xml&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;@Bean&lt;br&gt;public Mutiny.SessionFactory sessionFactory() {&lt;br&gt;    return Persistence.createEntityManagerFactory(&amp;quot;blogPU&amp;quot;)&lt;br&gt;        .unwrap(Mutiny.SessionFactory.class);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Create a sample entity class.&lt;/p&gt;&lt;pre&gt;@Data&lt;br&gt;@NoArgsConstructor&lt;br&gt;@AllArgsConstructor(staticName = &amp;quot;of&amp;quot;)&lt;br&gt;@Builder&lt;br&gt;@Entity&lt;br&gt;@Table(name = &amp;quot;posts&amp;quot;)&lt;br&gt;public class Post {&lt;/pre&gt;&lt;pre&gt;    @Id&lt;br&gt;    @GeneratedValue(generator = &amp;quot;uuid&amp;quot;)&lt;br&gt;    @GenericGenerator(name = &amp;quot;uuid&amp;quot;, strategy = &amp;quot;uuid2&amp;quot;)&lt;br&gt;    UUID id;&lt;br&gt;    String title;&lt;br&gt;    String content;&lt;/pre&gt;&lt;pre&gt;    @Builder.Default&lt;br&gt;    @Column(name = &amp;quot;created_at&amp;quot;)&lt;br&gt;    @CreationTimestamp&lt;br&gt;    LocalDateTime createdAt = LocalDateTime.now();&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;And then create a Repository class for it.&lt;/p&gt;&lt;pre&gt;@Component&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;public class PostRepository {&lt;br&gt;    private static final Logger LOGGER = Logger.getLogger(PostRepository.class.getName());&lt;/pre&gt;&lt;pre&gt;    private final Mutiny.SessionFactory sessionFactory;&lt;/pre&gt;&lt;pre&gt;    public Uni&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; findAll() {&lt;br&gt;        CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder();&lt;br&gt;        // create query&lt;br&gt;        CriteriaQuery&amp;lt;Post&amp;gt; query = cb.createQuery(Post.class);&lt;br&gt;        // set the root class&lt;br&gt;        Root&amp;lt;Post&amp;gt; root = query.from(Post.class);&lt;br&gt;        return this.sessionFactory.withSession(session -&amp;gt; session.createQuery(query).getResultList());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Uni&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; findByKeyword(String q, int offset, int limit) {&lt;/pre&gt;&lt;pre&gt;        CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder();&lt;br&gt;        // create query&lt;br&gt;        CriteriaQuery&amp;lt;Post&amp;gt; query = cb.createQuery(Post.class);&lt;br&gt;        // set the root class&lt;br&gt;        Root&amp;lt;Post&amp;gt; root = query.from(Post.class);&lt;/pre&gt;&lt;pre&gt;        // if keyword is provided&lt;br&gt;        if (q != null &amp;amp;&amp;amp; !q.trim().isEmpty()) {&lt;br&gt;            query.where(&lt;br&gt;                cb.or(&lt;br&gt;                    cb.like(root.get(Post_.title), &amp;quot;%&amp;quot; + q + &amp;quot;%&amp;quot;),&lt;br&gt;                    cb.like(root.get(Post_.content), &amp;quot;%&amp;quot; + q + &amp;quot;%&amp;quot;)&lt;br&gt;                )&lt;br&gt;            );&lt;br&gt;        }&lt;br&gt;        //perform query&lt;br&gt;        return this.sessionFactory.withSession(session -&amp;gt; session.createQuery(query)&lt;br&gt;            .setFirstResult(offset)&lt;br&gt;            .setMaxResults(limit)&lt;br&gt;            .getResultList());&lt;br&gt;    }&lt;br&gt;&lt;/pre&gt;&lt;pre&gt;    public Uni&amp;lt;Post&amp;gt; findById(UUID id) {&lt;br&gt;        Objects.requireNonNull(id, &amp;quot;id can not be null&amp;quot;);&lt;br&gt;        return this.sessionFactory.withSession(session -&amp;gt; session.find(Post.class, id))&lt;br&gt;            .onItem().ifNull().failWith(() -&amp;gt; new PostNotFoundException(id));&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Uni&amp;lt;Post&amp;gt; save(Post post) {&lt;br&gt;        if (post.getId() == null) {&lt;br&gt;            return this.sessionFactory.withSession(session -&amp;gt;&lt;br&gt;                session.persist(post)&lt;br&gt;                    .chain(session::flush)&lt;br&gt;                    .replaceWith(post)&lt;br&gt;            );&lt;br&gt;        } else {&lt;br&gt;            return this.sessionFactory.withSession(session -&amp;gt; session.merge(post).onItem().call(session::flush));&lt;br&gt;        }&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Uni&amp;lt;Integer&amp;gt; deleteById(UUID id) {&lt;br&gt;        CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder();&lt;br&gt;        // create delete&lt;br&gt;        CriteriaDelete&amp;lt;Post&amp;gt; delete = cb.createCriteriaDelete(Post.class);&lt;br&gt;        // set the root class&lt;br&gt;        Root&amp;lt;Post&amp;gt; root = delete.from(Post.class);&lt;br&gt;        // set where clause&lt;br&gt;        delete.where(cb.equal(root.get(Post_.id), id));&lt;br&gt;        // perform update&lt;br&gt;        return this.sessionFactory.withTransaction((session, tx) -&amp;gt;&lt;br&gt;            session.createQuery(delete).executeUpdate()&lt;br&gt;        );&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Uni&amp;lt;Integer&amp;gt; deleteAll() {&lt;br&gt;        CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder();&lt;br&gt;        // create delete&lt;br&gt;        CriteriaDelete&amp;lt;Post&amp;gt; delete = cb.createCriteriaDelete(Post.class);&lt;br&gt;        // set the root class&lt;br&gt;        Root&amp;lt;Post&amp;gt; root = delete.from(Post.class);&lt;br&gt;        // perform update&lt;br&gt;        return this.sessionFactory.withTransaction((session, tx) -&amp;gt;&lt;br&gt;            session.createQuery(delete).executeUpdate()&lt;br&gt;        );&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;p&gt;Till now, we have integrated Hibernate Reactive with Spring IOC container, next we will use the PostRepositoy to shake hands with the backend database. Let&amp;#39;s begin to build the web handling part.&lt;/p&gt;&lt;p&gt;There are two different types of asynchronous APIs available in Hibernate Reactive, one is based on Java 8 CompletionStage, another is built on &lt;a href=&quot;https://smallrye.io/smallrye-mutiny&quot;&gt;Smallrye Munity project&lt;/a&gt;. The later fully implements the Reactive Streams specification, we use SmallRye Mutiny in this post.&lt;/p&gt;&lt;p&gt;But unfortunately, Spring does not include built-in Smallrye Mutiny support as RxJava 2/3, etc.&lt;/p&gt;&lt;p&gt;There are some possible solutions that we can use to overcome this barrier.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Convert the SmallRye APIs to Reactor APIs, then use the Reactor APIs directly in RouterFunction or Controller class.&lt;/li&gt;&lt;li&gt;Similar to the existing RxJava 1/2/3, JDK 9+ Flow support in Spring WebFlux, we can register Smallry Munity as another ReactiveStreams alternative of the official Reactor.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let’s explore them one by one.&lt;/p&gt;&lt;p&gt;Firstly let’s try to convert the Munity APIs to Reactor APIs. Assume we will use RouterFunction to handle the web request.&lt;/p&gt;&lt;p&gt;Add the following dependency to the project &lt;em&gt;pom.xml&lt;/em&gt; file.&lt;/p&gt;&lt;pre&gt;&amp;lt;dependency&amp;gt;&lt;br&gt;    &amp;lt;groupId&amp;gt;io.smallrye.reactive&amp;lt;/groupId&amp;gt;&lt;br&gt;    &amp;lt;artifactId&amp;gt;mutiny-reactor&amp;lt;/artifactId&amp;gt;&lt;br&gt;    &amp;lt;version&amp;gt;${mutiny-reactor.version}&amp;lt;/version&amp;gt;&lt;br&gt;&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;p&gt;The mutiny-reactor provides some utilities that can be use to convert APIs between SmallRye Mutiny and Reactor.&lt;/p&gt;&lt;p&gt;The following is an example of PostsHandler, where we centralize all web handlers in one class. In this class we convert all Mutiny APIs to Reactor APIs.&lt;/p&gt;&lt;pre&gt;@Component&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;class PostsHandler {&lt;/pre&gt;&lt;pre&gt;    private final PostRepository posts;&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;ServerResponse&amp;gt; all(ServerRequest req) {&lt;br&gt;        return ServerResponse.ok().body(this.posts.findAll().convert().with(toMono()), Post.class);&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;ServerResponse&amp;gt; create(ServerRequest req) {&lt;br&gt;        return req.bodyToMono(CreatePostCommand.class)&lt;br&gt;            .flatMap(post -&amp;gt; this.posts.save(&lt;br&gt;                        Post.builder()&lt;br&gt;                            .title(post.getTitle())&lt;br&gt;                            .content(post.getContent())&lt;br&gt;                            .build()&lt;br&gt;                    )&lt;br&gt;                    .convert().with(toMono())&lt;br&gt;            )&lt;br&gt;            .flatMap(p -&amp;gt; ServerResponse.created(URI.create(&amp;quot;/posts/&amp;quot; + p.getId())).build());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;ServerResponse&amp;gt; get(ServerRequest req) {&lt;br&gt;        var id = UUID.fromString(req.pathVariable(&amp;quot;id&amp;quot;));&lt;br&gt;        return this.posts.findById(id).convert().with(toMono())&lt;br&gt;            .flatMap(post -&amp;gt; ServerResponse.ok().body(Mono.just(post), Post.class))&lt;br&gt;            .switchIfEmpty(ServerResponse.notFound().build());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;ServerResponse&amp;gt; update(ServerRequest req) {&lt;/pre&gt;&lt;pre&gt;        var id = UUID.fromString(req.pathVariable(&amp;quot;id&amp;quot;));&lt;br&gt;        return Mono.zip((data) -&amp;gt; {&lt;br&gt;                    Post p = (Post) data[0];&lt;br&gt;                    UpdatePostCommand p2 = (UpdatePostCommand) data[1];&lt;br&gt;                    p.setTitle(p2.getTitle());&lt;br&gt;                    p.setContent(p2.getContent());&lt;br&gt;                    return p;&lt;br&gt;                },&lt;br&gt;                this.posts.findById(id).convert().with(toMono()),&lt;br&gt;                req.bodyToMono(UpdatePostCommand.class)&lt;br&gt;            )&lt;br&gt;            //.cast(Post.class)&lt;br&gt;            .flatMap(post -&amp;gt; this.posts.save(post).convert().with(toMono()))&lt;br&gt;            .flatMap(post -&amp;gt; ServerResponse.noContent().build());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Mono&amp;lt;ServerResponse&amp;gt; delete(ServerRequest req) {&lt;br&gt;        var id = UUID.fromString(req.pathVariable(&amp;quot;id&amp;quot;));&lt;br&gt;        return this.posts.deleteById(id).convert().with(toMono())&lt;br&gt;            .flatMap(d -&amp;gt; ServerResponse.noContent().build());&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Then assemble the web handlers in a RouterFunction bean.&lt;/p&gt;&lt;pre&gt;@Bean&lt;br&gt;public RouterFunction&amp;lt;ServerResponse&amp;gt; routes(PostsHandler handler) {&lt;br&gt;    return route(GET(&amp;quot;/posts&amp;quot;), handler::all)&lt;br&gt;        .andRoute(POST(&amp;quot;/posts&amp;quot;), handler::create)&lt;br&gt;        .andRoute(GET(&amp;quot;/posts/{id}&amp;quot;), handler::get)&lt;br&gt;        .andRoute(PUT(&amp;quot;/posts/{id}&amp;quot;), handler::update)&lt;br&gt;        .andRoute(DELETE(&amp;quot;/posts/{id}&amp;quot;), handler::delete);&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Add a DataInitializer bean to initialize some sample data when starting up the application.&lt;/p&gt;&lt;pre&gt;@Component&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;public class DataInitializer implements ApplicationRunner {&lt;/pre&gt;&lt;pre&gt;    private final static Logger LOGGER = Logger.getLogger(DataInitializer.class.getName());&lt;/pre&gt;&lt;pre&gt;    private final Mutiny.SessionFactory sessionFactory;&lt;/pre&gt;&lt;pre&gt;    @Override&lt;br&gt;    public void run(ApplicationArguments args) throws Exception {&lt;br&gt;        LOGGER.info(&amp;quot;Data initialization is starting...&amp;quot;);&lt;/pre&gt;&lt;pre&gt;        Post first = Post.of(null, &amp;quot;Hello Spring&amp;quot;, &amp;quot;My first post of Spring&amp;quot;, null);&lt;br&gt;        Post second = Post.of(null, &amp;quot;Hello Hibernate Reactive&amp;quot;, &amp;quot;My second Hibernate Reactive&amp;quot;, null);&lt;/pre&gt;&lt;pre&gt;        sessionFactory&lt;br&gt;            .withTransaction(&lt;br&gt;                (conn, tx) -&amp;gt; conn.createQuery(&amp;quot;DELETE FROM Post&amp;quot;).executeUpdate()&lt;br&gt;                    .flatMap(r -&amp;gt; conn.persistAll(first, second))&lt;br&gt;                    .chain(conn::flush)&lt;br&gt;                    .flatMap(r -&amp;gt; conn.createQuery(&amp;quot;SELECT p from Post p&amp;quot;, Post.class).getResultList())&lt;br&gt;            )&lt;br&gt;            .subscribe()&lt;br&gt;            .with(&lt;br&gt;                data -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;saved data:{0}&amp;quot;, data),&lt;br&gt;                throwable -&amp;gt; LOGGER.warning(&amp;quot;Data initialization is failed:&amp;quot; + throwable.getMessage())&lt;br&gt;            );&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Start up a Postgres database. There is a &lt;a href=&quot;https://github.com/hantsy/spring-puzzles/blob/master/hibernate-reactive/docker-compose.yml&quot;&gt;&lt;em&gt;docker-compose.yml&lt;/em&gt;&lt;/a&gt; file available to start a Postgres instance in Docker container.&lt;/p&gt;&lt;p&gt;Then run the application via Spring Boot Maven plugin.&lt;/p&gt;&lt;pre&gt;// start postgres database&lt;br&gt;docker compose up &lt;/pre&gt;&lt;pre&gt;// run the application&lt;br&gt;mvn clean spring-root:run&lt;/pre&gt;&lt;p&gt;When the application is running successfully, open your terminal, and try to test &lt;a href=&quot;http://localhost:8080/posts&quot;&gt;http://localhost:8080/posts&lt;/a&gt; endpoints with curl command.&lt;/p&gt;&lt;pre&gt;# curl http://localhost:8080/posts&lt;br&gt;[{&amp;quot;id&amp;quot;:&amp;quot;0998578e-0553-480b-bbb7-e96fd402455f&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Hello Spring&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;My first post of Spring&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-08-26T22:37:02.076284&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;e09ffa71-905f-4241-9449-0860977de666&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Hello Hibernate Reactive&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;My second Hibernate Reactive&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-08-26T22:37:02.116677&amp;quot;}]&lt;/pre&gt;&lt;pre&gt;# curl http://localhost:8080/posts/0998578e-0553-480b-bbb7-e96fd402455f&lt;br&gt;{&amp;quot;id&amp;quot;:&amp;quot;0998578e-0553-480b-bbb7-e96fd402455f&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Hello Spring&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;My first post of Spring&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-08-26T22:37:02.076284&amp;quot;}&lt;/pre&gt;&lt;p&gt;Then let’s discuss the second solution.&lt;/p&gt;&lt;p&gt;Spring internally uses a ReactiveAdapterRegistry to register all reactive streams implementations, such as RxJava 2/3, JDK 9+ Flow, etc. When serializing the implementor&amp;#39;s specific APIs, it will look up the registry and convert it into the standard RectiveStreams APIs which can be processed by Spring framework.&lt;/p&gt;&lt;p&gt;We’ll create a new adapter to register Mutiny APIs as expected.&lt;/p&gt;&lt;pre&gt;@Component&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;@Slf4j&lt;br&gt;public class MutinyAdapter {&lt;br&gt;    private final ReactiveAdapterRegistry registry;&lt;/pre&gt;&lt;pre&gt;    @PostConstruct&lt;br&gt;    public void registerAdapters(){&lt;br&gt;        log.debug(&amp;quot;registering MutinyAdapter&amp;quot;);&lt;br&gt;        registry.registerReactiveType(&lt;br&gt;            ReactiveTypeDescriptor.singleOptionalValue(Uni.class, ()-&amp;gt; Uni.createFrom().nothing()),&lt;br&gt;            uni -&amp;gt;((Uni&amp;lt;?&amp;gt;)uni).convert().toPublisher(),&lt;br&gt;            publisher -&amp;gt;  Uni.createFrom().publisher(publisher)&lt;br&gt;        );&lt;/pre&gt;&lt;pre&gt;        registry.registerReactiveType(&lt;br&gt;            ReactiveTypeDescriptor.multiValue(Multi.class, ()-&amp;gt; Multi.createFrom().empty()),&lt;br&gt;            multi -&amp;gt; (Multi&amp;lt;?&amp;gt;) multi,&lt;br&gt;            publisher-&amp;gt; Multi.createFrom().publisher(publisher));&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Then create a @RestController bean which invokes PostRepository directly. As you see, all methods return a ResponseEntity type or a Uni&amp;lt;ResponseEntity&amp;gt; type directly, no need explicit conversion work there.&lt;/p&gt;&lt;pre&gt;@RestController&lt;br&gt;@RequestMapping(&amp;quot;/posts&amp;quot;)&lt;br&gt;@RequiredArgsConstructor&lt;br&gt;class PostController {&lt;/pre&gt;&lt;pre&gt;    private final PostRepository posts;&lt;/pre&gt;&lt;pre&gt;    @GetMapping(value = &amp;quot;&amp;quot;, produces = MediaType.APPLICATION_JSON_VALUE)&lt;br&gt;    public ResponseEntity&amp;lt;?&amp;gt; all() {&lt;br&gt;        return ok().body(this.posts.findAll());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @PostMapping(value = &amp;quot;&amp;quot;, consumes = MediaType.APPLICATION_JSON_VALUE)&lt;br&gt;    public Uni&amp;lt;ResponseEntity&amp;lt;?&amp;gt;&amp;gt; create(@RequestBody CreatePostCommand data) {&lt;br&gt;        return this.posts.save(&lt;br&gt;                Post.builder()&lt;br&gt;                    .title(data.getTitle())&lt;br&gt;                    .content(data.getContent())&lt;br&gt;                    .build()&lt;br&gt;            )&lt;br&gt;            .map(p -&amp;gt; created(URI.create(&amp;quot;/posts/&amp;quot; + p.getId())).build());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @GetMapping(value = &amp;quot;{id}&amp;quot;, produces = MediaType.APPLICATION_JSON_VALUE)&lt;br&gt;    public Uni&amp;lt;ResponseEntity&amp;lt;Post&amp;gt;&amp;gt; get(@PathVariable UUID id) {&lt;br&gt;        return this.posts.findById(id)&lt;br&gt;            .map(post -&amp;gt; ok().body(post));&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @PutMapping(value = &amp;quot;{id}&amp;quot;, consumes = MediaType.APPLICATION_JSON_VALUE)&lt;br&gt;    public Uni&amp;lt;ResponseEntity&amp;lt;?&amp;gt;&amp;gt; update(@PathVariable UUID id, @RequestBody UpdatePostCommand data) {&lt;/pre&gt;&lt;pre&gt;        return Uni.combine().all()&lt;br&gt;            .unis(&lt;br&gt;                this.posts.findById(id),&lt;br&gt;                Uni.createFrom().item(data)&lt;br&gt;            )&lt;br&gt;            .combinedWith((p, d) -&amp;gt; {&lt;br&gt;                p.setTitle(d.getTitle());&lt;br&gt;                p.setContent(d.getContent());&lt;br&gt;                return p;&lt;br&gt;            })&lt;br&gt;            .flatMap(this.posts::save)&lt;br&gt;            .map(post -&amp;gt; noContent().build());&lt;br&gt;    }&lt;/pre&gt;&lt;pre&gt;    @DeleteMapping(&amp;quot;{id}&amp;quot;)&lt;br&gt;    public Uni&amp;lt;ResponseEntity&amp;lt;?&amp;gt;&amp;gt; delete(@PathVariable UUID id) {&lt;br&gt;        return this.posts.deleteById(id).map(d -&amp;gt; noContent().build());&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;p&gt;Run this application again, you will get the same result as the former solution.&lt;/p&gt;&lt;h4&gt;Get the source codes of this post from my GitHub, they are available in two separate projects, &lt;a href=&quot;https://github.com/hantsy/spring-puzzles/tree/master/hibernate-reactive&quot;&gt;hibernate-reactive&lt;/a&gt; and &lt;a href=&quot;https://github.com/hantsy/spring-puzzles/tree/master/hibernate-reactive-mutiny&quot;&gt;hibernate-reactive-mutiny&lt;/a&gt;.&lt;/h4&gt;&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5427440607fe&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://itnext.io/integrating-hibernate-reactive-with-spring-5427440607fe&quot;&gt;Integrating Hibernate Reactive with Spring&lt;/a&gt; was originally published in &lt;a href=&quot;https://itnext.io&quot;&gt;ITNEXT&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hibernate started a subproject — Hibernate Reactive for Reactive Streams support, but at the moment when I wrote this post, Spring still did not embrace Hibernate Reactive. The good news is the integration work is not complex. In this post, we will attempt to integrate the latest Hibernate Reactive with Spring framework.Photo by Vivek Kumar on UnsplashIn the former post Integrating Vertx with Spring framework and the further post , we have integrated Hibernate Reactive with Spring IOC container, but in those the posts, the web handling is done by Vertx Web. In this post, we will use the existing Spring WebFlux instead.Open your browser and navigate to https://start.spring.io, and generate a Spring project skeleton with the following dependencies,WebFluxLombokExtract the downloaded files into disc, and import the project into your IDE.Open the project pom.xml file, add the following dependencies.&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.vertx&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;vertx-pg-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${vertx-pg-client.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate.reactive&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-reactive-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hibernate-reactive.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-jpamodelgen&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&amp;lt;/dependency&amp;gt;In the above the codes:The vertx-pg-client is the Postgres reactive driver which is required by Hibernate Reactive.The hibernate-reactive-core is the core dependency of Hibernate Reactive.Similar to the general Hibernate/JPA support, hibernate-jpamodelgen is used to generate entity metadata classes from the @Entity classes.Add a persistence.xml to src/main/resources/META-INF folder.&amp;lt;persistence xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/persistence&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd&amp;quot; version=&amp;quot;2.2&amp;quot;&amp;gt; &amp;lt;persistence-unit name=&amp;quot;blogPU&amp;quot;&amp;gt; &amp;lt;provider&amp;gt;org.hibernate.reactive.provider.ReactivePersistenceProvider&amp;lt;/provider&amp;gt; &amp;lt;class&amp;gt;com.example.demo.Post&amp;lt;/class&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;!-- PostgreSQL --&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.url&amp;quot; value=&amp;quot;jdbc:postgresql://localhost:5432/blogdb&amp;quot;/&amp;gt; &amp;lt;!-- Credentials --&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.user&amp;quot; value=&amp;quot;user&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.jdbc.password&amp;quot; value=&amp;quot;password&amp;quot;/&amp;gt; &amp;lt;!-- The Vert.x SQL Client connection pool size --&amp;gt; &amp;lt;property name=&amp;quot;hibernate.connection.pool_size&amp;quot; value=&amp;quot;10&amp;quot;/&amp;gt; &amp;lt;!-- Automatic schema export --&amp;gt; &amp;lt;property name=&amp;quot;javax.persistence.schema-generation.database.action&amp;quot; value=&amp;quot;drop-and-create&amp;quot;/&amp;gt; &amp;lt;!-- SQL statement logging --&amp;gt; &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;hibernate.highlight_sql&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/persistence-unit&amp;gt;&amp;lt;/persistence&amp;gt;Note the provider must use the ReactivePersistenceProvider class which is provided in the new Hibernate Reactive. And you have to add all your entity classes in this persistence.xml file.Then declare a Mutiny.SessionFactory bean. The blogPU is the persistence unit name configured in the persistence.xml file.@Beanpublic Mutiny.SessionFactory sessionFactory() { return Persistence.createEntityManagerFactory(&amp;quot;blogPU&amp;quot;) .unwrap(Mutiny.SessionFactory.class);}Create a sample entity class.@Data@NoArgsConstructor@AllArgsConstructor(staticName = &amp;quot;of&amp;quot;)@Builder@Entity@Table(name = &amp;quot;posts&amp;quot;)public class Post { @Id @GeneratedValue(generator = &amp;quot;uuid&amp;quot;) @GenericGenerator(name = &amp;quot;uuid&amp;quot;, strategy = &amp;quot;uuid2&amp;quot;) UUID id; String title; String content; @Builder.Default @Column(name = &amp;quot;created_at&amp;quot;) @CreationTimestamp LocalDateTime createdAt = LocalDateTime.now();}And then create a Repository class for it.@Component@RequiredArgsConstructorpublic class PostRepository { private static final Logger LOGGER = Logger.getLogger(PostRepository.class.getName()); private final Mutiny.SessionFactory sessionFactory; public Uni&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; findAll() { CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder(); // create query CriteriaQuery&amp;lt;Post&amp;gt; query = cb.createQuery(Post.class); // set the root class Root&amp;lt;Post&amp;gt; root = query.from(Post.class); return this.sessionFactory.withSession(session -&amp;gt; session.createQuery(query).getResultList()); } public Uni&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; findByKeyword(String q, int offset, int limit) { CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder(); // create query CriteriaQuery&amp;lt;Post&amp;gt; query = cb.createQuery(Post.class); // set the root class Root&amp;lt;Post&amp;gt; root = query.from(Post.class); // if keyword is provided if (q != null &amp;amp;&amp;amp; !q.trim().isEmpty()) { query.where( cb.or( cb.like(root.get(Post_.title), &amp;quot;%&amp;quot; + q + &amp;quot;%&amp;quot;), cb.like(root.get(Post_.content), &amp;quot;%&amp;quot; + q + &amp;quot;%&amp;quot;) ) ); } //perform query return this.sessionFactory.withSession(session -&amp;gt; session.createQuery(query) .setFirstResult(offset) .setMaxResults(limit) .getResultList()); } public Uni&amp;lt;Post&amp;gt; findById(UUID id) { Objects.requireNonNull(id, &amp;quot;id can not be null&amp;quot;); return this.sessionFactory.withSession(session -&amp;gt; session.find(Post.class, id)) .onItem().ifNull().failWith(() -&amp;gt; new PostNotFoundException(id)); } public Uni&amp;lt;Post&amp;gt; save(Post post) { if (post.getId() == null) { return this.sessionFactory.withSession(session -&amp;gt; session.persist(post) .chain(session::flush) .replaceWith(post) ); } else { return this.sessionFactory.withSession(session -&amp;gt; session.merge(post).onItem().call(session::flush)); } } public Uni&amp;lt;Integer&amp;gt; deleteById(UUID id) { CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder(); // create delete CriteriaDelete&amp;lt;Post&amp;gt; delete = cb.createCriteriaDelete(Post.class); // set the root class Root&amp;lt;Post&amp;gt; root = delete.from(Post.class); // set where clause delete.where(cb.equal(root.get(Post_.id), id)); // perform update return this.sessionFactory.withTransaction((session, tx) -&amp;gt; session.createQuery(delete).executeUpdate() ); } public Uni&amp;lt;Integer&amp;gt; deleteAll() { CriteriaBuilder cb = this.sessionFactory.getCriteriaBuilder(); // create delete CriteriaDelete&amp;lt;Post&amp;gt; delete = cb.createCriteriaDelete(Post.class); // set the root class Root&amp;lt;Post&amp;gt; root = delete.from(Post.class); // perform update return this.sessionFactory.withTransaction((session, tx) -&amp;gt; session.createQuery(delete).executeUpdate() ); }}Till now, we have integrated Hibernate Reactive with Spring IOC container, next we will use the PostRepositoy to shake hands with the backend database. Let&amp;#39;s begin to build the web handling part.There are two different types of asynchronous APIs available in Hibernate Reactive, one is based on Java 8 CompletionStage, another is built on Smallrye Munity project. The later fully implements the Reactive Streams specification, we use SmallRye Mutiny in this post.But unfortunately, Spring does not include built-in Smallrye Mutiny support as RxJava 2/3, etc.There are some possible solutions that we can use to overcome this barrier.Convert the SmallRye APIs to Reactor APIs, then use the Reactor APIs directly in RouterFunction or Controller class.Similar to the existing RxJava 1/2/3, JDK 9+ Flow support in Spring WebFlux, we can register Smallry Munity as another ReactiveStreams alternative of the official Reactor.Let’s explore them one by one.Firstly let’s try to convert the Munity APIs to Reactor APIs. Assume we will use RouterFunction to handle the web request.Add the following dependency to the project pom.xml file.&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.smallrye.reactive&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mutiny-reactor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${mutiny-reactor.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;The mutiny-reactor provides some utilities that can be use to convert APIs between SmallRye Mutiny and Reactor.The following is an example of PostsHandler, where we centralize all web handlers in one class. In this class we convert all Mutiny APIs to Reactor APIs.@Component@RequiredArgsConstructorclass PostsHandler { private final PostRepository posts; public Mono&amp;lt;ServerResponse&amp;gt; all(ServerRequest req) { return ServerResponse.ok().body(this.posts.findAll().convert().with(toMono()), Post.class); } public Mono&amp;lt;ServerResponse&amp;gt; create(ServerRequest req) { return req.bodyToMono(CreatePostCommand.class) .flatMap(post -&amp;gt; this.posts.save( Post.builder() .title(post.getTitle()) .content(post.getContent()) .build() ) .convert().with(toMono()) ) .flatMap(p -&amp;gt; ServerResponse.created(URI.create(&amp;quot;/posts/&amp;quot; + p.getId())).build()); } public Mono&amp;lt;ServerResponse&amp;gt; get(ServerRequest req) { var id = UUID.fromString(req.pathVariable(&amp;quot;id&amp;quot;)); return this.posts.findById(id).convert().with(toMono()) .flatMap(post -&amp;gt; ServerResponse.ok().body(Mono.just(post), Post.class)) .switchIfEmpty(ServerResponse.notFound().build()); } public Mono&amp;lt;ServerResponse&amp;gt; update(ServerRequest req) { var id = UUID.fromString(req.pathVariable(&amp;quot;id&amp;quot;)); return Mono.zip((data) -&amp;gt; { Post p = (Post) data[0]; UpdatePostCommand p2 = (UpdatePostCommand) data[1]; p.setTitle(p2.getTitle()); p.setContent(p2.getContent()); return p; }, this.posts.findById(id).convert().with(toMono()), req.bodyToMono(UpdatePostCommand.class) ) //.cast(Post.class) .flatMap(post -&amp;gt; this.posts.save(post).convert().with(toMono())) .flatMap(post -&amp;gt; ServerResponse.noContent().build()); } public Mono&amp;lt;ServerResponse&amp;gt; delete(ServerRequest req) { var id = UUID.fromString(req.pathVariable(&amp;quot;id&amp;quot;)); return this.posts.deleteById(id).convert().with(toMono()) .flatMap(d -&amp;gt; ServerResponse.noContent().build()); }}Then assemble the web handlers in a RouterFunction bean.@Beanpublic RouterFunction&amp;lt;ServerResponse&amp;gt; routes(PostsHandler handler) { return route(GET(&amp;quot;/posts&amp;quot;), handler::all) .andRoute(POST(&amp;quot;/posts&amp;quot;), handler::create) .andRoute(GET(&amp;quot;/posts/{id}&amp;quot;), handler::get) .andRoute(PUT(&amp;quot;/posts/{id}&amp;quot;), handler::update) .andRoute(DELETE(&amp;quot;/posts/{id}&amp;quot;), handler::delete);}Add a DataInitializer bean to initialize some sample data when starting up the application.@Component@RequiredArgsConstructorpublic class DataInitializer implements ApplicationRunner { private final static Logger LOGGER = Logger.getLogger(DataInitializer.class.getName()); private final Mutiny.SessionFactory sessionFactory; @Override public void run(ApplicationArguments args) throws Exception { LOGGER.info(&amp;quot;Data initialization is starting...&amp;quot;); Post first = Post.of(null, &amp;quot;Hello Spring&amp;quot;, &amp;quot;My first post of Spring&amp;quot;, null); Post second = Post.of(null, &amp;quot;Hello Hibernate Reactive&amp;quot;, &amp;quot;My second Hibernate Reactive&amp;quot;, null); sessionFactory .withTransaction( (conn, tx) -&amp;gt; conn.createQuery(&amp;quot;DELETE FROM Post&amp;quot;).executeUpdate() .flatMap(r -&amp;gt; conn.persistAll(first, second)) .chain(conn::flush) .flatMap(r -&amp;gt; conn.createQuery(&amp;quot;SELECT p from Post p&amp;quot;, Post.class).getResultList()) ) .subscribe() .with( data -&amp;gt; LOGGER.log(Level.INFO, &amp;quot;saved data:{0}&amp;quot;, data), throwable -&amp;gt; LOGGER.warning(&amp;quot;Data initialization is failed:&amp;quot; + throwable.getMessage()) ); }}Start up a Postgres database. There is a docker-compose.yml file available to start a Postgres instance in Docker container.Then run the application via Spring Boot Maven plugin.// start postgres databasedocker compose up // run the applicationmvn clean spring-root:runWhen the application is running successfully, open your terminal, and try to test http://localhost:8080/posts endpoints with curl command.# curl http://localhost:8080/posts[{&amp;quot;id&amp;quot;:&amp;quot;0998578e-0553-480b-bbb7-e96fd402455f&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Hello Spring&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;My first post of Spring&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-08-26T22:37:02.076284&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;e09ffa71-905f-4241-9449-0860977de666&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Hello Hibernate Reactive&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;My second Hibernate Reactive&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-08-26T22:37:02.116677&amp;quot;}]# curl http://localhost:8080/posts/0998578e-0553-480b-bbb7-e96fd402455f{&amp;quot;id&amp;quot;:&amp;quot;0998578e-0553-480b-bbb7-e96fd402455f&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Hello Spring&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;My first post of Spring&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2021-08-26T22:37:02.076284&amp;quot;}Then let’s discuss the second solution.Spring internally uses a ReactiveAdapterRegistry to register all reactive streams implementations, such as RxJava 2/3, JDK 9+ Flow, etc. When serializing the implementor&amp;#39;s specific APIs, it will look up the registry and convert it into the standard RectiveStreams APIs which can be processed by Spring framework.We’ll create a new adapter to register Mutiny APIs as expected.@Component@RequiredArgsConstructor@Slf4jpublic class MutinyAdapter { private final ReactiveAdapterRegistry registry; @PostConstruct public void registerAdapters(){ log.debug(&amp;quot;registering MutinyAdapter&amp;quot;); registry.registerReactiveType( ReactiveTypeDescriptor.singleOptionalValue(Uni.class, ()-&amp;gt; Uni.createFrom().nothing()), uni -&amp;gt;((Uni&amp;lt;?&amp;gt;)uni).convert().toPublisher(), publisher -&amp;gt; Uni.createFrom().publisher(publisher) ); registry.registerReactiveType( ReactiveTypeDescriptor.multiValue(Multi.class, ()-&amp;gt; Multi.createFrom().empty()), multi -&amp;gt; (Multi&amp;lt;?&amp;gt;) multi, publisher-&amp;gt; Multi.createFrom().publisher(publisher)); }}Then create a @RestController bean which invokes PostRepository directly. As you see, all methods return a ResponseEntity type or a Uni&amp;lt;ResponseEntity&amp;gt; type directly, no need explicit conversion work there.@RestController@RequestMapping(&amp;quot;/posts&amp;quot;)@RequiredArgsConstructorclass PostController { private final PostRepository posts; @GetMapping(value = &amp;quot;&amp;quot;, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&amp;lt;?&amp;gt; all() { return ok().body(this.posts.findAll()); } @PostMapping(value = &amp;quot;&amp;quot;, consumes = MediaType.APPLICATION_JSON_VALUE) public Uni&amp;lt;ResponseEntity&amp;lt;?&amp;gt;&amp;gt; create(@RequestBody CreatePostCommand data) { return this.posts.save( Post.builder() .title(data.getTitle()) .content(data.getContent()) .build() ) .map(p -&amp;gt; created(URI.create(&amp;quot;/posts/&amp;quot; + p.getId())).build()); } @GetMapping(value = &amp;quot;{id}&amp;quot;, produces = MediaType.APPLICATION_JSON_VALUE) public Uni&amp;lt;ResponseEntity&amp;lt;Post&amp;gt;&amp;gt; get(@PathVariable UUID id) { return this.posts.findById(id) .map(post -&amp;gt; ok().body(post)); } @PutMapping(value = &amp;quot;{id}&amp;quot;, consumes = MediaType.APPLICATION_JSON_VALUE) public Uni&amp;lt;ResponseEntity&amp;lt;?&amp;gt;&amp;gt; update(@PathVariable UUID id, @RequestBody UpdatePostCommand data) { return Uni.combine().all() .unis( this.posts.findById(id), Uni.createFrom().item(data) ) .combinedWith((p, d) -&amp;gt; { p.setTitle(d.getTitle()); p.setContent(d.getContent()); return p; }) .flatMap(this.posts::save) .map(post -&amp;gt; noContent().build()); } @DeleteMapping(&amp;quot;{id}&amp;quot;) public Uni&amp;lt;ResponseEntity&amp;lt;?&amp;gt;&amp;gt; delete(@PathVariable UUID id) { return this.posts.deleteById(id).map(d -&amp;gt; noContent().build()); }}Run this application again, you will get the same result as the former solution.Get the source codes of this post from my GitHub, they are available in two separate projects, hibernate-reactive and hibernate-reactive-mutiny.Integrating Hibernate Reactive with Spring was originally published in ITNEXT on Medium, where people are continuing the conversation by highlighting and responding to this story.</summary></entry></feed>